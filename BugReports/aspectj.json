{
  "6be7097": {
    "bug_report": {
      "summary": "Bug 155148  jdk14 trace deadlock in oc4j",
      "description": "I turned on tracing for the Aj class inside of Oracle's OC4J server. In one test (not always) it deadlocked. It looks like the threads are each trying to lock each other's loader. Notice that one of the threads is in the toString method of the Oracle ClassLoader (perhaps another reason to prefer tracing argument class names and system identity hashcodes).\n\nHere's a thread dump from Ctrl+BREAK:\n\nFound one Java-level deadlock:\n=============================\n\"WorkExecutorWorkerThread-1\":\n  waiting to lock monitor 0x003384ec (object 0x05239e48, a oracle.classloader.Po\nlicyClassLoader),\n  which is held by \"OC4J Launcher\"\n\"OC4J Launcher\":\n  waiting to lock monitor 0x0033848c (object 0x0554f0e8, a oracle.classloader.Po\nlicyClassLoader),\n  which is held by \"WorkExecutorWorkerThread-1\"\n\nJava stack information for the threads listed above:\n===================================================\n\"WorkExecutorWorkerThread-1\":\n        at oracle.classloader.SearchPolicy.loadClass(SearchPolicy.java:641)\n        - waiting to lock <0x05239e48> (a oracle.classloader.PolicyClassLoader)\n        at oracle.classloader.PolicyClassLoader.askParentForClass(PolicyClassLoa\nder.java:1284)\n        at oracle.classloader.SearchPolicy$AskParent.getClass(SearchPolicy.java:\n69)\n        at oracle.classloader.SearchSequence.getClass(SearchSequence.java:119)\n        at oracle.classloader.SearchPolicy.loadClass(SearchPolicy.java:642)\n        - locked <0x0554f0e8> (a oracle.classloader.PolicyClassLoader)\n        at oracle.classloader.PolicyClassLoader.askParentForClass(PolicyClassLoa\nder.java:1284)\n        at oracle.classloader.SearchPolicy$AskParent.getClass(SearchPolicy.java:\n69)\n        at oracle.classloader.SearchSequence.getClass(SearchSequence.java:119)\n        at oracle.classloader.PolicyClassLoader.internalLoadClass(PolicyClassLoa\nder.java:1660)\n        - locked <0x056a9ed0> (a oracle.classloader.PolicyClassLoader)\n        at oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java\n:1621)\n        at oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java\n:1606)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n        - locked <0x056a9ed0> (a oracle.classloader.PolicyClassLoader)\n        at oracle.j2ee.ra.jms.generic.WorkConsumer.doReceive(WorkConsumer.java:9\n87)\n        at oracle.j2ee.ra.jms.generic.WorkConsumer.run(WorkConsumer.java:215)\n        - locked <0x05de2718> (a oracle.j2ee.ra.jms.generic.WorkConsumer)\n        at oracle.j2ee.connector.work.WorkWrapper.runTargetWork(WorkWrapper.java\n:242)\n        at oracle.j2ee.connector.work.WorkWrapper.doWork(WorkWrapper.java:215)\n        at oracle.j2ee.connector.work.WorkWrapper.run(WorkWrapper.java:190)\n        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExec\nutor.java:814)\n        at java.lang.Thread.run(Thread.java:595)\n\"OC4J Launcher\":\n        at oracle.classloader.PolicyClassLoader.toString(PolicyClassLoader.java:\n1846)\n        - waiting to lock <0x0554f0e8> (a oracle.classloader.PolicyClassLoader)\n        at java.text.MessageFormat.subformat(MessageFormat.java:1237)\n        at java.text.MessageFormat.format(MessageFormat.java:828)\n        at java.text.Format.format(Format.java:133)\n        at java.text.MessageFormat.format(MessageFormat.java:804)\n        at java.util.logging.Formatter.formatMessage(Formatter.java:130)\n        - locked <0x0514e920> (a java.util.logging.SimpleFormatter)\n        at java.util.logging.SimpleFormatter.format(SimpleFormatter.java:63)\n        - locked <0x0514e920> (a java.util.logging.SimpleFormatter)\n        at java.util.logging.StreamHandler.publish(StreamHandler.java:179)\n        - locked <0x0514a0a8> (a java.util.logging.FileHandler)\n        at java.util.logging.FileHandler.publish(FileHandler.java:555)\n        - locked <0x0514a0a8> (a java.util.logging.FileHandler)\n        at java.util.logging.Logger.log(Logger.java:428)\n        at java.util.logging.Logger.doLog(Logger.java:450)\n        at java.util.logging.Logger.logp(Logger.java:619)\n        at java.util.logging.Logger.entering(Logger.java:870)\n        at org.aspectj.weaver.tools.Jdk14Trace.enter(Jdk14Trace.java:32)\n        at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:67)\n        at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(C\nlassPreProcessorAgentAdapter.java:55)\n        at sun.instrument.TransformerManager.transform(TransformerManager.java:1\n22)\n        at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java\n:155)\n        at java.lang.ClassLoader.defineClass1(Native Method)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n        at oracle.classloader.PolicyClassLoader.defineClass(PolicyClassLoader.ja\nva:2224)\n        at oracle.classloader.PolicyClassLoader.findLocalClass(PolicyClassLoader\n.java:1457)\n        at oracle.classloader.SearchPolicy$FindLocal.getClass(SearchPolicy.java:\n167)\n        at oracle.classloader.SearchSequence.getClass(SearchSequence.java:119)\n        at oracle.classloader.PolicyClassLoader.internalLoadClass(PolicyClassLoa\nder.java:1660)\n        - locked <0x05239e48> (a oracle.classloader.PolicyClassLoader)\n        at oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java\n:1621)\n        at oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java\n:1606)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n        - locked <0x05239e48> (a oracle.classloader.PolicyClassLoader)\n        at com.evermind.server.http.HttpRequestHandler.<init>(HttpRequestHandler\n.java:97)\n        at com.evermind.server.http.HttpConnectionListener$HttpNIOAcceptHandler.\ngetReadHandler(HttpConnectionListener.java:116)\n        at oracle.oc4j.network.ReadHandlerPool.getContextFromBackend(ReadHandler\nPool.java:63)\n        at com.evermind.util.BBPool.startPool(BBPool.java:42)\n        at oracle.oc4j.network.ReadHandlerPool.register(ReadHandlerPool.java:25)\n\n        - locked <0x05ec9290> (a java.util.ArrayList)\n        at oracle.oc4j.network.ServerSocketAcceptHandler.setPoolOptions(ServerSo\ncketAcceptHandler.java:140)\n        at com.evermind.server.http.HttpConnectionListener.setRequestHandlerPool\n(HttpConnectionListener.java:232)\n        at com.evermind.server.http.HttpConnectionListener.initHandlers(HttpConn\nectionListener.java:226)\n        at com.evermind.server.http.HttpConnectionListener.<init>(HttpConnection\nListener.java:174)\n        at com.evermind.server.http.HttpServer.getListener(HttpServer.java:481)\n        - locked <0x05ec4f88> (a com.evermind.server.http.HttpServer)\n        at com.evermind.server.http.HttpServer.setSites(HttpServer.java:267)\n        - locked <0x05ec4f88> (a com.evermind.server.http.HttpServer)\n        at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:180)\n        at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServe\nr.java:2296)\n        at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.jav\na:944)\n        at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLa\nuncher.java:113)\n        - locked <0x0530eb20> (a java.lang.Object)\n        at java.lang.Thread.run(Thread.java:595)\n\nFound 1 deadlock."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java",
        "weaver/testsrc/org/aspectj/weaver/AbstractTraceTest.java",
        "weaver5/java5-src/org/aspectj/weaver/tools/Jdk14Trace.java",
        "weaver/src/org/aspectj/weaver/tools/AbstractTrace.java"
      ]
    }
  },
  "2edb246": {
    "bug_report": {
      "summary": "Bug 348979  world type map fixed/expendable problems",
      "description": "Discovered whilst working with Steve Ash on a build of a few projects that was consuming more than 2Gigs of heap.\n\nTo recover memory Steve activated type demotion.  This didn't appear to help much.  This was due to Steve's projects using aspectpath.  The aspectpath scanning to discover aspects was inadvertently making any types discovered on the aspectpath permanent types (not expendable) and they'd never be demoted/evicted.\n\nThe types were all being made permanent in case they were an aspect but never being demoted if it turns out they were not.  In a Roo petclinic I added spel as a dependency (on the aspectpath) and parsed a simple expression (just to further exaggerate the problem).  This was leaving 213 types in the fixed area of the typemap.  By correctly scanning aspectpath and demoting non-aspects this was reduced to 90."
    },
    "commit": {
      "diff": [
        "tests/multiIncremental/PR278496_10/base/com/Foo.java",
        "tests/multiIncremental/PR278496_11/base/com/Foo.java",
        "tests/multiIncremental/PR278496_10/base/com/Asp.java",
        "tests/multiIncremental/PR278496_11_a/base/com/Asp.java",
        "tests/multiIncremental/PR278496_11_a/base/com/Dibble.java"
      ]
    }
  },
  "522911e": {
    "bug_report": {
      "summary": "Bug 116755  PointcutParser is not configurable",
      "description": "I'm testing the reflection and weaver tools APIs. When I using following code:\n\nPointcutParser parse = new PointcutParser();\nString expr = \"call(public * main.hello(..)\";\nPointcutExpression pex = parse.parsePointcutExpression(expr);\n\nWhenever I use a full qualified class name in pointcut expression, an \nexception is throwed out:\njava.lang.IllegalArgumentException: warning no match for this type name: obj \n[Xlint:invalidAbsoluteTypeName]\n\nI try to turn off this Lint exception. But it seems I must access to world \nfield of PointcutParser. This is inconvenient because world field is not \nexposed by PointcutParser. \n\nThe existing PointcutParser interface implicitly creates a World and does not \nallow any configuration including classpath or lint. But developers may need \nthis kind of control."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "weaver/src/org/aspectj/weaver/tools/PointcutParser.java",
        "weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java",
        "weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java",
        "weaver/src/org/aspectj/weaver/internal/tools/TypePatternMatcherImpl.java",
        "weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java",
        "weaver/src/org/aspectj/weaver/tools/TypePatternMatcher.java",
        "weaver/testsrc/org/aspectj/weaver/tools/ToolsTests.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java",
        "weaver/src/org/aspectj/weaver/reflect/AnnotationFinder.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java",
        "tests/java5/reflection/ReflectOnAjcCompiledPointcuts.java",
        "weaver/src/org/aspectj/weaver/ltw/LTWeaver.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/java5/ataspectj/annotationGen/RuntimePointcuts.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionVar.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionBasedResolvedMemberImpl.java",
        "weaver/testsrc/org/aspectj/weaver/tools/TypePatternMatcherTest.java",
        "weaver/src/org/aspectj/weaver/ltw/LTWWorld.java"
      ]
    }
  },
  "8a0f59a": {
    "bug_report": {
      "summary": "Bug 109283  Invalid \"indirect static access\" warning on EnumSet.noneOf",
      "description": "When compiling AspectJ enabled projects in Java 5.0 source mode with \"Indirect\naccess to static modifier\" warnings on, the following code incorrectly gives a\ncompiler warning (this doesn't occur in non-AspectJ enabled projects):\n\npublic class Test {\n    enum Foo {\n        Wibble,\n        Wobble,\n        Woo;\n    }\n\n    public static void main(String[] args) {\n        EnumSet<Foo> set = EnumSet.noneOf(Foo.class);\n    }\n}"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "weaver/src/org/aspectj/weaver/AjcMemberMaker.java"
      ]
    }
  },
  "989aaf7": {
    "bug_report": {
      "summary": "Bug 33474  bad source locations for declare error/warning",
      "description": null
    },
    "commit": {
      "diff": [
        "ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java",
        "ajde/testdata/examples/declare-warning/apackage/SomeClass.java",
        "ajde/testsrc/org/aspectj/ajde/CompilerMessagesTest.java",
        "ajde/testsrc/org/aspectj/ajde/AjdeTestCase.java",
        "ajde/testsrc/org/aspectj/ajde/AjdeTests.java",
        "ajde/testdata/examples/declare-warning/apackage/InitCatcher.java",
        "ajde/testsrc/org/aspectj/ajde/NullIdeManager.java"
      ]
    }
  },
  "bdafe31": {
    "bug_report": {
      "summary": "Bug 120693  Contribution: More Efficient Lint Warnings: ~15% Performance Increase",
      "description": "In profiling a load-time weaving configuration from HEAD, I found that 9% of total time (over 10% of weaving time) is spent in org.aspectj.weaver.Lint.clearSuppressions(), mostly from use inside BcelClassWeaver.match\n\nI made a small change in the parts of BcelAdvice that clear suppressions to save the list that was cleared and to only clear these. This alone saves about 15% of total CPU time in start up on my sample configuration."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "weaver/src/org/aspectj/weaver/Lint.java"
      ]
    }
  },
  "86ce1f7": {
    "bug_report": {
      "summary": "Bug 86057  expect error when overriding final pointcuts",
      "description": "I get no compiler error when I \"override\"/redefine a final pointcut:\n\n------------\npublic class Main {\n    static void walk() {}\n    static void run() {}\n    public static void main(String[] args) {\n        walk();\n        run();\n    }\n}\nabstract aspect AA {\n    public final pointcut publicPointcut() : call(void walk());\n    before() : publicPointcut() { System.out.print(\"here: \" + thisJoinPoint); }\n}\naspect AA1 extends AA {\n    // expecting error here b/c pointcut is final\n    public pointcut publicPointcut() : call(void run());\n}\n------------\nWhen run, it picks out run() rather than walk()."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/WeaverMessages.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/ResolvedType.java"
      ]
    }
  },
  "cb77524": {
    "bug_report": {
      "summary": "Bug 33635  Negation of if pointcut does not work",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java",
        "tests/bugs/NotIf.java"
      ]
    }
  },
  "9897659": {
    "bug_report": {
      "summary": "Bug 82062  WeaveMessage should provide more information",
      "description": "It would be wonderful if the WeaveMessage object would provide two additional\nthings:\n\n- the affected class name\n- the aspect name\n\nI could use this to determine which aspect is woven into which class during\nload-time weaving (need this for dependency management)."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/Advice.java",
        "bridge/src/org/aspectj/bridge/WeaveMessage.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "weaver/src/org/aspectj/weaver/Shadow.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"
      ]
    }
  },
  "2502ee5": {
    "bug_report": {
      "summary": "Bug 39842  allow use of an environment variable to set compiler arguments",
      "description": "I'm trying to create a special jsp compilation servlet in Tomcat 4.x that uses \nthe aspectj compiler. I can plug in the compiler adapter, but I don't have \ncontrol of the ant code they use to invoke the compiler, so I'd like to use \nan environment variable to do this (apparently the only mechanism they do \nsupport).\n\nI'm doing this so I can pass an aspectpath in to weave aspects into the \ncompiled jsp servlet."
    },
    "commit": {
      "diff": [
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java",
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/ICommandEditor.java",
        "taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java"
      ]
    }
  },
  "e460b1e": {
    "bug_report": {
      "summary": "Bug 85297  Improvements to incremental compilation",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/incremental/IncrementalTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/IStateListener.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"
      ]
    }
  },
  "0e5ecd3": {
    "bug_report": {
      "summary": "Bug 314766  NPE when using aop.xml for compile time config",
      "description": "Reported on the list:\n\njava.lang.NullPointerException\nat org.aspectj.weaver.bcel.BcelWorld.isAspectIncluded(BcelWorld.java:942)\nat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:80)\nat org.aspectj.weaver.Advice.match(Advice.java:106)\nat org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:149)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:3108)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2562)"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/Advice.java"
      ]
    }
  },
  "9e992d6": {
    "bug_report": {
      "summary": "Bug 415266  LTW not working when JMX is enabled",
      "description": "When I enable JMX remote management on a JVM along with AspectJ load-time weaving (LTW), our Aspect doesn't appear to get woven in.\n\nThis are the JVM arguments:\n\n-Dvisualvm.display.name=JdbcTimingAspectTest -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=1024 -javaagent:/jars/aspectjweaver.jar -Dorg.aspectj.weaver.loadtime.configuration=com/trgr/cobalt/infrastructure/instrumentation/aspects/timing/jdbc/jdbcmonitor.xml\n\nNote that if I don't enable JMX remote management (by remove the -Dcom.sun.management.jmxremote.* JVM arguments), the Aspect works fine."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/Aj.java"
      ]
    }
  },
  "dd9a9b2": {
    "bug_report": {
      "summary": "Bug 116949  [waitingOnAJDTdrop]Exception thrown from AspectJ compiler",
      "description": "java.lang.ClassCastException\nat org.aspectj.weaver.bcel.BcelClassWeaver.checkForOverride\n(BcelClassWeaver.java:607)\nat org.aspectj.weaver.bcel.BcelClassWeaver.calculateAnyRequiredBridgeMethods\n(BcelClassWeaver.java:676)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1537)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1485)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1266)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1088)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave\n(AjCompilerAdapter.java:300)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling\n(AjCompilerAdapter.java:178)\nat \norg.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspect\nj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile\n(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation\n(AjBuildManager.java:809)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:254)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild\n(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run\n(AspectJBuildManager.java:191)\n\ntrouble in: \npublic class ts.simul.client.AbstractClient$OptionSetter extends \nts.util.CmdLineProgram$OptionSetterBase:\n  final ts.simul.client.AbstractClient this$0\n  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0\n  public void <init>(ts.simul.client.AbstractClient)    \norg.aspectj.weaver.MethodDeclarationLineNumber: 59:1411\n:\n                    ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter \nthis   (line 60)\n                    ALOAD_1\n                    PUTFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 \nLts/simul/client/AbstractClient;\n                    ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter \nthis   (line 59)\n                    ALOAD_1\n                    INVOKESPECIAL \nts.util.CmdLineProgram$OptionSetterBase.<init> (Lts/util/CmdLineProgram;)V\n    constructor-execution(void \nts.simul.client.AbstractClient$OptionSetter.<init>\n(ts.simul.client.AbstractClient))\n    |               RETURN\n    constructor-execution(void \nts.simul.client.AbstractClient$OptionSetter.<init>\n(ts.simul.client.AbstractClient))\n  end public void <init>(ts.simul.client.AbstractClient)\n\n  public boolean setOption_file(String) throws \nts.util.IllegalProgramArgumentException    \norg.aspectj.weaver.MethodDeclarationLineNumber: 62:1469\n:\n    method-execution(boolean \nts.simul.client.AbstractClient$OptionSetter.setOption_file(java.lang.String))\n    |               ALOAD_1     // java.lang.String optParam   (line 65)\n    | method-call(int java.lang.String.length())\n    | |             INVOKEVIRTUAL java.lang.String.length ()I\n    | method-call(int java.lang.String.length())\n    |               IFLE L1\n    |               ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter \nthis   (line 66)\n    |               GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 \nLts/simul/client/AbstractClient;\n    |               ALOAD_1     // java.lang.String optParam\n    |               PUTFIELD ts.simul.client.AbstractClient.fileName \nLjava/lang/String;\n    |               NEW java.io.File   (line 67)\n    |               DUP\n    |               ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter \nthis\n    |               GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 \nLts/simul/client/AbstractClient;\n    |               GETFIELD ts.simul.client.AbstractClient.fileName \nLjava/lang/String;\n    | constructor-call(void java.io.File.<init>(java.lang.String))\n    | |             INVOKESPECIAL java.io.File.<init> (Ljava/lang/String;)V\n    | constructor-call(void java.io.File.<init>(java.lang.String))\n    |               ASTORE_2\n    |               ALOAD_2     // java.io.File file   (line 68)\n    | method-call(boolean java.io.File.exists())\n    | |             INVOKEVIRTUAL java.io.File.exists ()Z\n    | method-call(boolean java.io.File.exists())\n    |               IFNE L0\n    |               NEW ts.util.IllegalProgramArgumentException   (line 69)\n    |               DUP\n    |               NEW java.lang.StringBuilder\n    |               DUP\n    |               LDC \"Cannot find file: [\"\n    | constructor-call(void java.lang.StringBuilder.<init>(java.lang.String))\n    | |             INVOKESPECIAL java.lang.StringBuilder.<init> \n(Ljava/lang/String;)V\n    | constructor-call(void java.lang.StringBuilder.<init>(java.lang.String))\n    |               ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter \nthis\n    |               GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 \nLts/simul/client/AbstractClient;\n    |               GETFIELD ts.simul.client.AbstractClient.fileName \nLjava/lang/String;\n    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append\n(java.lang.String))\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append \n(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append\n(java.lang.String))\n    |               LDC \"]\"\n    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append\n(java.lang.String))\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append \n(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append\n(java.lang.String))\n    | method-call(java.lang.String java.lang.StringBuilder.toString())\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()\nLjava/lang/String;\n    | method-call(java.lang.String java.lang.StringBuilder.toString())\n    | constructor-call(void ts.util.IllegalProgramArgumentException.<init>\n(java.lang.String))\n    | |             INVOKESPECIAL \nts.util.IllegalProgramArgumentException.<init> (Ljava/lang/String;)V\n    | constructor-call(void ts.util.IllegalProgramArgumentException.<init>\n(java.lang.String))\n    |               ATHROW\n    |           L0: ICONST_1   (line 70)\n    |               IRETURN\n    |           L1: ICONST_0   (line 73)\n    |               IRETURN\n    method-execution(boolean \nts.simul.client.AbstractClient$OptionSetter.setOption_file(java.lang.String))\n  end public boolean setOption_file(String) throws \nts.util.IllegalProgramArgumentException\n\n  public boolean setOption_class(String) throws \nts.util.IllegalProgramArgumentException    \norg.aspectj.weaver.MethodDeclarationLineNumber: 76:1971\n:\n    method-execution(boolean \nts.simul.client.AbstractClient$OptionSetter.setOption_class(java.lang.String))\n    |               ALOAD_1     // java.lang.String optParam   (line 79)\n    | method-call(int java.lang.String.length())\n    | |             INVOKEVIRTUAL java.lang.String.length ()I\n    | method-call(int java.lang.String.length())\n    |               IFLE L1\n    |               ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter \nthis   (line 80)\n    |               GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 \nLts/simul/client/AbstractClient;\n    |               ALOAD_1     // java.lang.String optParam\n    |               PUTFIELD ts.simul.client.AbstractClient.className \nLjava/lang/String;\n    | catch ts.simul.SimulationException -> E0\n    | |             ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter \nthis   (line 82)\n    | |             GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 \nLts/simul/client/AbstractClient;\n    | |             ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter \nthis\n    | |             GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 \nLts/simul/client/AbstractClient;\n    | |             GETFIELD ts.simul.client.AbstractClient.className \nLjava/lang/String;\n    | | method-call(java.lang.Class ts.simul.SceneFactory.getSceneClass\n(java.lang.String))\n    | | |           INVOKESTATIC ts.simul.SceneFactory.getSceneClass \n(Ljava/lang/String;)Ljava/lang/Class;\n    | | method-call(java.lang.Class ts.simul.SceneFactory.getSceneClass\n(java.lang.String))\n    | |             PUTFIELD ts.simul.client.AbstractClient.sceneClass \nLjava/lang/Class;\n    | |             ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter \nthis   (line 83)\n    | |             GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 \nLts/simul/client/AbstractClient;\n    | | method-call(void ts.simul.client.AbstractClient.setBeanInfoSearchPath())\n    | | |           INVOKESTATIC ts.simul.Architecture.aspectOf ()\nLts/simul/Architecture;\n    | | |           GETSTATIC \nts.simul.client.AbstractClient$OptionSetter.ajc$tjp_0 \nLorg/aspectj/lang/JoinPoint$StaticPart;\n    | | |           INVOKEVIRTUAL \nts.simul.Architecture.ajc$before$ts_simul_Architecture$1$ae285a4d \n(Lorg/aspectj/lang/JoinPoint$StaticPart;)V\n    | | |           INVOKEVIRTUAL \nts.simul.client.AbstractClient.setBeanInfoSearchPath ()V\n    | | method-call(void ts.simul.client.AbstractClient.setBeanInfoSearchPath())\n    | |             GOTO L0\n    | catch ts.simul.SimulationException -> E0\n    |           E0: ASTORE_2   (line 85)\n    |               NEW ts.util.IllegalProgramArgumentException   (line 86)\n    |               DUP\n    |               ALOAD_2     // ts.simul.SimulationException e\n    | method-call(java.lang.String ts.simul.SimulationException.getMessage())\n    | |             INVOKEVIRTUAL ts.simul.SimulationException.getMessage ()\nLjava/lang/String;\n    | method-call(java.lang.String ts.simul.SimulationException.getMessage())\n    | constructor-call(void ts.util.IllegalProgramArgumentException.<init>\n(java.lang.String))\n    | |             INVOKESPECIAL \nts.util.IllegalProgramArgumentException.<init> (Ljava/lang/String;)V\n    | constructor-call(void ts.util.IllegalProgramArgumentException.<init>\n(java.lang.String))\n    |               ATHROW\n    |           L0: ICONST_1   (line 88)\n    |               IRETURN\n    |           L1: ICONST_0   (line 91)\n    |               IRETURN\n    method-execution(boolean \nts.simul.client.AbstractClient$OptionSetter.setOption_class(java.lang.String))\n  end public boolean setOption_class(String) throws \nts.util.IllegalProgramArgumentException\n\n  public boolean setOption_name(String)    \norg.aspectj.weaver.MethodDeclarationLineNumber: 94:2593\n:\n    method-execution(boolean \nts.simul.client.AbstractClient$OptionSetter.setOption_name(java.lang.String))\n    |               ALOAD_0     // ts.simul.client.AbstractClient$OptionSetter \nthis   (line 96)\n    |               GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 \nLts/simul/client/AbstractClient;\n    |               ALOAD_1     // java.lang.String optParam\n    |               PUTFIELD ts.simul.client.AbstractClient.sceneName \nLjava/lang/String;\n    |               ICONST_1   (line 97)\n    |               IRETURN\n    method-execution(boolean \nts.simul.client.AbstractClient$OptionSetter.setOption_name(java.lang.String))\n  end public boolean setOption_name(String)\n\n  public boolean setOption_actors(String)    \norg.aspectj.weaver.MethodDeclarationLineNumber: 100:2739\n:\n    method-execution(boolean \nts.simul.client.AbstractClient$OptionSetter.setOption_actors(java.lang.String))\n    | catch java.lang.NumberFormatException -> E0\n    | |             ALOAD_1     // java.lang.String optParam   (line 103)\n    | | method-call(int java.lang.Integer.parseInt(java.lang.String))\n    | | |           INVOKESTATIC java.lang.Integer.parseInt (Ljava/lang/String;)\nI\n    | | method-call(int java.lang.Integer.parseInt(java.lang.String))\n    | |             ISTORE_2\n    | |             GOTO L0\n    | catch java.lang.NumberFormatException -> E0\n    |           E0: ASTORE_2     // int n   (line 105)\n    |               ICONST_0   (line 106)\n    |               IRETURN\n    |           L0: ICONST_1   (line 108)\n    |               IRETURN\n    method-execution(boolean \nts.simul.client.AbstractClient$OptionSetter.setOption_actors(java.lang.String))\n  end public boolean setOption_actors(String)\n\nend public class ts.simul.client.AbstractClient$OptionSetter\n\nwhen weaving type ts.simul.client.AbstractClient$OptionSetter\nwhen weaving classes \nwhen weaving \nwhen incrementally building BuildConfig\n[c:\\Projects\\eclipse\\.metadata\\.plugins\\org.eclipse.ajdt.core\\TS.generated.lst] \n#Files=79"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"
      ]
    }
  },
  "ca9c1f7": {
    "bug_report": {
      "summary": "Bug 76374  Problem with declare parents when using non-public classes",
      "description": "Non-public classes, when explicitly named, do not get woven.\n\nThe test case below exhibits this problem when the package declaration is\nuncommented.\n\nIf the package declaration is commented out, the class is woven correctly.\nIf the package declaration is uncommented, a compilation failure occurs with\nAspectJ 1.2.  According to Andrew Clement, AspectJ 1.2.1 compiles, but does not\nweave.\nIf the \"MyInnerClass\" is changed to be public [regardless of the package\ndeclaration status], the class is woven correctly.\n\nAlso:\nWhen the \"MyInnerClass\" is moved out of \"MyClass\", but kept in the MyClass.java\nfile, then the following behavior is exhibited:\nIf the package declaration is commented out, the class is woven correctly.\nIf the package declaration is uncommented out, a compilation failure occurs with\nAspectJ 1.2.\nNote, in this case, MyInnerClass cannot be declared as public.\n\nIt also appears that if the RunnableAspect is placed in the same package as\n\"MyClass\", weaving occurs correctly, regardless of any class access modifiers\n\n<MyClass.java>\n\n// package mypackage;\n\npublic class MyClass {\n public MyClass() {\n   MyInnerClass mic = new MyInnerClass();\n   if (mic instanceof Runnable)\n     mic.run();\n }\n\n class MyInnerClass {\n   public void run() {\n     System.out.println(\"In MyInnerClass.run()!!\");\n   }\n }\n\n public static void main(String args[]) {\n   new MyClass();\n }\n}\n\n</MyClass.java>\n\n<RunnableAspect.aj>\n\npublic aspect RunnableAspect {\n declare parents: MyClass$MyInnerClass implements Runnable;\n // declare parents: mypackage.MyClass$MyInnerClass implements Runnable;\n}\n\n</RunnableAspect.aj>"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "05dabd1": {
    "bug_report": {
      "summary": "Bug 53981  proceed used as method name in around advice",
      "description": "Using a method named proceed(..) in around advice confuses the compiler (in at\nleast the 2-3 ways shown below).  \n\nTrue of the current tree (untested in 1.1.1).  Workaround for now is to rename\nthe method.  \n\n---- first problem: NPE in compiler\njava.lang.NullPointerException\n\tat\norg.aspectj.ajdt.internal.compiler.ast.MakeDeclsPublicVisitor.endVisit(MakeDeclsPublicVisitor.java:44)\n\npublic class Proceeding {\n    public static void main(String[] args) { }\n    static aspect A {\n        interface IProceed {\n            void proceed(Runnable next);\n        }\n        IProceed decorator;\n        void around() : execution(void main(String[])) {\n            decorator.proceed(new Runnable() {\n                public void run() {\n                    proceed();\n                }\n            });\n        }\n    }\n}\n\n---- second problem: incorrect error wrt number of arguments\n\npublic class Proceeding {\n    public static void main(String[] args) {\n    }\n    static aspect A {\n        void around() : execution(void main(String[])) {\n            Proceeding.proceed(null); // BUG: treated as proceed(Object);\n        }\n    }\n    static void proceed(Object o) {}\n}\n\n---- third hypothetical: we should document how ambiguity is resolved\n\npublic class Proceeding {\n    public static void main(String[] args) {\n    }\n    static aspect A {\n        void around() : execution(void main(String[])) {\n            proceed(); // special form or Proceeding.proceed()?\n        }\n    }\n    void proceed() {}\n}"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "11b3b07": {
    "bug_report": {
      "summary": "Bug 35725  Inter type declaration to base class not seen by derived class",
      "description": "The following code shows what I believe is an incorrect error - the base class \nAImpl is made concrete by the aspect Af, but the compilation of BImpl does not \nrecognize this fact. This problem is for version 1.1rc1 and is not seen in \n1.0.6.\n\n// ---------------------\n// A.java\n\npackage a_intf;\n\npublic interface A\n{\n  A f();\n}\n\n// ---------------------\n// AImpl.java\n\npackage a_impl;\n\nimport a_intf.A;\n\npublic class AImpl\n  implements A\n{\n}\n\n// ---------------------\n// Af.java\n\npackage a_impl;\n\nimport a_intf.A;\n\naspect Af\n{\n  public A AImpl.f()\n  {\n    System.out.println( \"f called\" );\n    return null;\n  }\n}\n\n// ---------------------\n// B.java\n\npackage b_intf;\n\nimport a_intf.A;\n\npublic interface B\n  extends A\n{\n  B g();\n}\n\n// ---------------------\n// BImpl.java\n\npackage b_impl;\n\nimport a_impl.AImpl;\nimport b_intf.B;\n\npublic class BImpl\n  extends AImpl\n  implements B\n{\n  public B g()\n  {\n    System.out.println( \"g called\" );\n    return null;\n  }\n}\n\n// Compiler Error:\n// BImpl.java:7 Class must implement the inherited abstract method a_intf.A.f()"
    },
    "commit": {
      "diff": [
        "tests/bugs/interInherit/b_intf/B.java",
        "tests/bugs/interInherit/a_intf/A.java",
        "tests/bugs/interInherit/a_impl/Af.java",
        "tests/bugs/interInherit/b_impl/BImpl.java",
        "tests/bugs/interInherit/a_impl/AImpl.java"
      ]
    }
  },
  "19bac86": {
    "bug_report": {
      "summary": "Bug 50570  CatchClauseSignature has broken operation",
      "description": "It looks like the getParameterName() operation on org.aspectj.lang.reflect.\nCatchClauseSignature is not working. Instead of returning the name of the \nexception as declared in the matched handler, returns the string value \n\"<missing>\".\n\nHere is a test case that shows the problem :-\n\n------START OF TEST CASE CODE-----------\n\npublic class MyApp {\n\n    public void doSomething() {\n        // Get around \"unreachable code error...\n        if (true)\n        {\n            throw new BusinessException(\"Surprise!!\");\n        }\n        System.out.println(\"Busy doing something.\");\n    }\n\n    public static void main(String[] args) {\n        try {\n            MyApp m = new MyApp();\n            m.doSomething();\n        } catch (BusinessException be) {\n            System.out.println(\"Exception caught : \" + be.getMessage()); \n        }\n    }\n}\n\nclass BusinessException extends RuntimeException {\n    BusinessException(String message) {\n        super(message);\n    }\n}\n\naspect AppMonitor {\n    pointcut problemHandling() : handler(Throwable+);\n\n    before() : problemHandling() {\n        CatchClauseSignature cSig =\n            (CatchClauseSignature) thisJoinPointStaticPart.getSignature();\n\n        System.out.println(\n            \"MONITOR::\\tCaught a \"\n                + cSig.getParameterType().getName()\n                + \" called \"\n                + cSig.getParameterName());\n    }\n}\n\n------END OF TEST CASE CODE-----------\n\nThe output from running the above was ...\n\nMONITOR::\tCaught a BusinessException called <missing>\nException caught : Surprise !!!!\n\nOperating system : Windows XP\nAspectJ : 1.1.1 final and also on latest from CVS HEAD"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "tests/bugs/HandlerSig.java",
        "weaver/src/org/aspectj/weaver/ResolvedMember.java",
        "weaver/src/org/aspectj/weaver/Member.java"
      ]
    }
  },
  "e8d2556": {
    "bug_report": {
      "summary": "Bug 165148  [ltw] Unnecessary exceptions during concretization of aspects in aop.xml",
      "description": "Due to the mechanism used in ConcreteAspectCodeGen I see a lot of unnecessary exceptions created.  The problem is rather than looking up a type to confirm it doesn't exist before defining it, the code uses a resolve() to check if it exists and resolve attempts to build it if it isnt there.  Because the classloader will never find an aop.xml defined type (the class doesn't exist anywhere on the classpath), a spurious exception is created and sometimes traced (if collecting a trace).  I'm going to change the code to do a lookup, that is all that is really necessary."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java"
      ]
    }
  },
  "13dde4e": {
    "bug_report": {
      "summary": "Bug 147801  java.lang.ClassFormatError: Repetitive method name/signature",
      "description": "I get a ClassFormatError trying to perform runtime-weaving on a DB2 class.\nThe class being woven is COM.ibm.db2.jdbc.app.DB2PreparedStatement.  \nThe full message exception is: java.lang.ClassFormatError: Repetitive method name/signature in class file COM/ibm/db2/jdbc/app/DB2PreparedStatement.\n\nIn examining the post-weave class file, it looks as if Aspectj is defining\na duplicate method within the class called getParameterMetaData().  \n\nHere are the messages from the weaver:\n04:21:13,640 INFO  [STDOUT] info weaving 'COM.ibm.db2.jdbc.app.DB2CallableStatement'\n04:21:13,640 INFO  [STDOUT] info weaver operating in reweavable mode.  Need to verify any required types exist.\n04:21:13,671 INFO  [STDOUT] info weaving 'COM.ibm.db2.jdbc.app.DB2PreparedStatement'\n04:21:13,671 INFO  [STDOUT] info weaver operating in reweavable mode.  Need to verify any required types exist.\n04:21:13,703 INFO  [STDOUT] weaveinfo Join point 'method-execution(java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery())' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:1679) advised by before advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' (CaptureSQLStatement.aj:747) [with runtime test]\n04:21:13,703 INFO  [STDOUT] weaveinfo Join point 'method-execution(java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery())' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:1679) advised by afterReturning advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' (CaptureSQLStatement.aj:946) [with runtime test]\n04:21:13,718 INFO  [STDOUT] weaveinfo Join point 'method-execution(java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery())' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:1679) advised by afterThrowing advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' (CaptureSQLStatement.aj:971) [with runtime test]\n04:21:13,718 INFO  [STDOUT] weaveinfo Join point 'method-execution(boolean COM.ibm.db2.jdbc.app.DB2PreparedStatement.execute())' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:3971) advised by before advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' (CaptureSQLStatement.aj:833) [with runtime test]\n04:21:13,718 INFO  [STDOUT] weaveinfo Join point 'method-execution(boolean COM.ibm.db2.jdbc.app.DB2PreparedStatement.execute())' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:3971) advised by afterReturning advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' (CaptureSQLStatement.aj:946) [with runtime test]"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "tests/bugs152/pr147801/PreparedStatement.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "tests/bugs152/pr147801/Foo.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "eec4990": {
    "bug_report": {
      "summary": "Bug 125809  AjTypeDeclaration in the dom shouldn't have the properties of it's subtype AspectDeclaration",
      "description": "The AjTypeDeclaration should not have the properties 'privileged' and 'perClause' which it's subtype AspectDeclaration has. This was shown up whilst building an aspectj for ajdt and a failure in one of the visitor tests."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AspectDeclaration.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjASTTest.java",
        "org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjTypeDeclaration.java"
      ]
    }
  },
  "249f832": {
    "bug_report": {
      "summary": "Bug 339974  NPE when accessing static class inside of an ITIT",
      "description": "This code:\n\npublic class City {\n\n    private String name;\n\n    private Country country;\n}\n\n\nAnd separate file:\n\npublic aspect TrafficCalculator {\n\t\n\tpublic static class City.TrafficCalculator {\n\t\tFunction<City, Time> EXTREME = createExtremeTraffic(); \n\t\tFunction<City, Time> BASIC = createBasicTraffic();\n\t}\n\t\n\t\n\tprivate static Function<City, Time> createExtremeTraffic() {\n\t\treturn null;\n\t} \n\tprivate static Function<City, Time> createBasicTraffic() {\n\t\treturn null;\n\t} \n\t\n\tpublic static class Time { } \n\n}\n\nTry full build and the following exception:\n\njava.lang.NullPointerException\n\tat org.aspectj.ajdt.internal.compiler.ast.IntertypeMemberClassDeclaration.resolveOnType(IntertypeMemberClassDeclaration.java:238)\n\tat org.aspectj.ajdt.internal.compiler.ast.IntertypeMemberClassDeclaration.build(IntertypeMemberClassDeclaration.java:246)\n\tat org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.processIntertypeMemberTypes(AspectDeclaration.java:1039)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.processInterTypeMemberTypes(AjLookupEnvironment.java:523)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:197)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:616)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:357)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:371)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1021)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:305)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:185)\n\tat org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild(AjdeCoreBuildManager.java:127)\n\tat org.aspectj.ajde.core.AjCompiler.build(AjCompiler.java:91)\n\tat org.eclipse.ajdt.core.builder.AJBuilder.build(AJBuilder.java:257)\n\tat org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:629)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:172)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:203)\n\tat org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:255)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:258)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:311)\n\tat org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:343)\n\tat org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:144)\n\tat org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:242)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)"
    },
    "commit": {
      "diff": [
        "tests/bugs1612/pr339974/City.java",
        "tests/bugs1612/pr339974/TrafficCalculator.java",
        "tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java",
        "tests/bugs1612/pr342605/Code.java"
      ]
    }
  },
  "749078d": {
    "bug_report": {
      "summary": "Bug 305788  Exception was thrown when I saved a file in Eclipse",
      "description": "Build Identifier: SpringSource STS 2.3.1\n\njava.util.ConcurrentModificationException\nat java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)\nat java.util.HashMap$KeyIterator.next(HashMap.java:828)\nat org.aspectj.asm.internal.AspectJElementHierarchy.updateHandleMap(AspectJElementHierarchy.java:594)\nat org.aspectj.asm.AsmManager.removeStructureModelForFiles(AsmManager.java:564)\nat org.aspectj.asm.AsmManager.processDelta(AsmManager.java:639)\nat org.aspectj.ajdt.internal.core ... un(AutoBuildJob.java:238)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)\n\nCompile error: ConcurrentModificationException thrown: null\n\nReproducible: Always\n\nSteps to Reproduce:\n1.Generate an abstract class using Spring roo\n2. Edit that file within Eclipse/STS to add JPA annotations\n3.Click on the save icon to save the file - Exceptions box pops up"
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"
      ]
    }
  },
  "d1551bd": {
    "bug_report": {
      "summary": "Bug 72671  Bootclasspath specification for compiling is not possible",
      "description": "I have following bug running  eclipse 3.0 and ajdt 1.1.12\n\nI have following class:\n \nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\n\nimport org.w3c.dom.DOMConfiguration;\nimport org.w3c.dom.DOMError;\nimport org.w3c.dom.DOMErrorHandler;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.DocumentFragment;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.ls.DOMImplementationLS;\nimport org.w3c.dom.ls.LSInput;\nimport org.w3c.dom.ls.LSOutput;\nimport org.w3c.dom.ls.LSParser;\n\nimport com.dcbank.common.DOMImplementationLSSingleton;\n\npublic class DOMHelper {\n\n   public static final String CLASS_ID = \"%full_filespec:\nDOMHelper.java~1:java:1 %\";\n   \n   public static void save(Document document, String filename)\n   throws ClassNotFoundException, InstantiationException,  \nIllegalAccessException, FileNotFoundException {\n   \n      document.normalizeDocument();\n   }\n\n}\n\nwhich compiles very fine with JDK 1.4.2_02 on Windows XP, \nas soon as the  dom2-xml-apis.jar and dom3-xercesImpl.jar are added at the\nbeginning of the jre container, or are included in\nthe jar-library list before the system jar. \n\nAs soon as I convert this project to an AspectJ project, the code does not\ncompile anymore. The aspectJ compiler does not find the  normalizeDocument,\nwhich is included in the one of the two additional jars.\nmethod any more.\n\nkind regards\nArno Schmidmeier"
    },
    "commit": {
      "diff": [
        "ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "dfb15c1": {
    "bug_report": {
      "summary": "Bug 71723  Inconsistency in scoping of protected members in ITDs",
      "description": "When introducing new member functions to existing classes via inter-type\ndeclarations, the scoping rules that apply to the ITD bodies are the same as for\nthe aspect - for example, private members of the target class cannot be accessed\nunless the aspect is privileged.\n\nSimilarly, protected members of classes in different packages should not be\nvisible in ITDs unless the aspect is privileged.\n\nThis rule is only enforced for protected members declared in the target class -\nprotected members that are inherited are visible from ITDs in aspects in\ndifferent packages.\n\nThe following is an example of this:\n\n----------------------\npackage foo;\n\npublic class Foo extends AncientFoo {\n    protected int i() { return 42; }\n    public static void main(String[] args) {\n\tnew Foo().doStuff();\n    }\n    public void doStuff() { }\n    protected int ancientI() { return 42; }\n}\n\nclass AncientFoo {\n    protected int ancientI() { return -42; }\n    protected int ancientJ() { return 0; }\n}\n----------\n\npackage bar;\nimport foo.Foo;\n\naspect Bar {\n    public void Foo.doing() {\n\ttry {\n\t    System.out.println(i()); // fails in ajc\n\t    System.out.println(ancientI()); // fails in ajc\n\t    System.out.println(ancientJ()); // succeeds\n\t    System.out.println(clone()); // succeeds\n\t}\n\tcatch(Throwable t) { }\n    }\n    before(Foo f) : call(* doStuff(..)) && target(f) {\n\tf.doing();\n    }\n}\n-------------------\n\nAll four calls in Foo.doing() should fail, as they refer to protected members of\nfoo.Foo from package bar. However, only the first 2 - the ones directly\ndeclared/overridden in foo.Foo - are detected as errors, and removing them makes\nthe rest compile and execute.\n\nBest wishes,\nPavel"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java",
        "tests/bugs/pr71723/foo/Foo.java"
      ]
    }
  },
  "100d9e0": {
    "bug_report": {
      "summary": "Bug 107713  ClassCastException popup",
      "description": "Whenever I change any file and save(auto-compile) I get this in a popup.\n\nClassCastException thrown: \norg.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType cannot be cast to \norg.aspectj.weaver.bcel.BcelObjectType\n\nThis started happening when I wrote these aspects.\n\nBefore this started happening the IDE showed this line as an error.\n\nb.support.firePropertyChange( property,\n\t\t\t( oldval == null ) ? oldval : new String(oldval),\n\t                      new String(newval));\n\n\n----------------------------------------------------------------\n/**\n * \n */\npackage com.blueprint.util.mixin.test;\n\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\nimport java.lang.reflect.Field;\nimport com.blueprint.util.mixin.test.*;\nimport org.aspectj.lang.Signature;\n\npublic aspect PropertySupportAspect {\n\t\n\t\tPropertyChangeSupport PropertySupport.support = new \nPropertyChangeSupport(this);\n\n\t\tpublic interface PropertySupport{\n\t\t\t  public void addPropertyChangeListener( \nPropertyChangeListener listener );\n\t\t\t  public void addPropertyChangeListener( String \npropertyName,\n\t\t\t\t                                     \nPropertyChangeListener listener );\n\t\t\t  public void removePropertyChangeListener( String \npropertyName,\n\t\t\t\t                                        \nPropertyChangeListener listener );\n\t\t\t  public void removePropertyChangeListener( \nPropertyChangeListener listener );\n\t\t\t  public void hasListeners( String propertyName );\n\t\t}\n\t\t\n\t\tpublic void PropertySupport.addPropertyChangeListener\n(PropertyChangeListener listener){\n\t\t    support.addPropertyChangeListener(listener);\n\t\t}\n\t\t\n\t\tpublic void PropertySupport.addPropertyChangeListener( String \npropertyName,\n\t\t                                                       \nPropertyChangeListener listener){\n\n\t\t\tsupport.addPropertyChangeListener(propertyName, \nlistener);\n\t    }\n\t    \n\t\tpublic void PropertySupport.removePropertyChangeListener( \nString propertyName,\n\t\t\t                                                      \nPropertyChangeListener listener) {\n\t\t\tsupport.removePropertyChangeListener(propertyName, \nlistener);\n\t    }\n\t\t\n\t\tpublic void PropertySupport.removePropertyChangeListener\n(PropertyChangeListener listener) {\n\t\t    support.removePropertyChangeListener(listener);\n\t\t}\n\t\t\n\t\tpublic void PropertySupport.hasListeners(String propertyName) {\n\t\t    support.hasListeners(propertyName);\n\t\t}\n\n\t\tpointcut callSetter( Bean b ) \n\t    : call( public void com.blueprint.util.test.Bean.setName( \nString ) ) && target( b );\n\t\t\n\t\tvoid around( Bean b ) : callSetter( b )  {\n\t\t    String propertyName = getField( \nthisJoinPointStaticPart.getSignature() ).\n\t\t    \t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tgetName\n();\n\t\t\tSystem.out.println( \"The property is [\" + propertyName \n+ \"]\" );\n\t\t\tString oldValue = b.getName();\n\t\t    proceed( b );\n\t\t    firePropertyChange( b, propertyName, oldValue, b.getName\n());\n\t\t}\n\n\t    private Field getField( Signature signature ){\n\t    \tField field = null;\n\t\t\tSystem.out.println( \"Getting the field name of [\" \n+signature.getName() + \"]\" );\n\t    \t\n\t    \ttry{\n\t    \t\tString methodName = signature.getName();\n\t    \t\tfield = signature.getDeclaringType().\n\t\t\t\t\t\t\t\n\tgetDeclaredField( methodName.\n\t\t\t\t\t\t\t\t\t\n\t\t\t   substring( 3,\n\t\t\t\t\t\t\t\t\t\n\t\t                  methodName.length() ).\n\t\t\t\t\t\t\t\t\t\n\t\t                  \t\t\ttoLowerCase());\n\t    \t\tfield.setAccessible(true);\n\t    \t}catch( NoSuchFieldException nsfe ){\n\t    \t\tnsfe.printStackTrace();\n\t    \t}\n\t\t\treturn field;\n\t\t}\n\n\t\tvoid firePropertyChange( Bean b,\n\t\t\t\t\t String property,\n\t\t\t\t\t String oldval,\n\t\t\t\t\t String newval) {\n\t\tSystem.out.println( \"The property is [\" + property + \"]\");\n\t\tSystem.out.println( \"The old value is [\" + oldval + \"]\");\n\t\tSystem.out.println( \"The new value is [\" + newval + \"]\");\n\t\tb.support.firePropertyChange( property,\n\t\t\t\t\t( oldval == null ) ? oldval : new \nString(oldval),\n\t\t\t            new String(newval));\n\t\t}\n\t\t\n}\n----------------------------------------------------------------\nimport java.io.Serializable;\n\npublic class Bean implements Serializable{\n\t\n\tprivate String name;\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName( String name ) {\n\t\tthis.name = name;\n\t}\n}\n----------------------------------------------------------------\npublic aspect BeanSupport {\n     declare parents: Bean implements PropertySupportAspect.PropertySupport;\n}\n----------------------------------------------------------------"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"
      ]
    }
  },
  "cf0ee0c": {
    "bug_report": {
      "summary": "Bug 314130  [plan] [ltw] [hcr] LTW, Reweaving and Hot Code Replace changes reflected every two saves of files",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"
      ]
    }
  },
  "f1deb9c": {
    "bug_report": {
      "summary": "Bug 41254  revise asm and create interfaces",
      "description": null
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/StructureModel.java",
        "ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java",
        "ajde/src/org/aspectj/ajde/ui/swing/BrowserView.java",
        "ajde/src/org/aspectj/ajde/ui/StructureViewProperties.java",
        "asm/src/org/aspectj/asm/ProgramElementNode.java",
        "asm/src/org/aspectj/asm/StructureNode.java",
        "ajde/src/org/aspectj/ajde/ui/StructureViewNode.java",
        "ajde/testsrc/org/aspectj/ajde/ui/StructureModelUtilTest.java",
        "ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeRenderer.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "ajde/src/org/aspectj/ajde/ui/internal/NavigationHistoryModel.java",
        "ajde/src/org/aspectj/ajde/ui/swing/IconRegistry.java",
        "testing/src/org/aspectj/testing/ajde/CompileCommand.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EmacsStructureModelManager.java",
        "asm/src/org/aspectj/asm/internal/ProgramElement.java",
        "asm/src/org/aspectj/asm/Association.java",
        "ajde/testsrc/org/aspectj/ajde/AsmRelationshipsTest.java",
        "ajde/testdata/examples/coverage/ModelCoverage.java",
        "ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java",
        "ajde/testsrc/org/aspectj/ajde/NullIdeUIAdapter.java",
        "asm/src/org/aspectj/asm/StructureModelManager.java",
        "asm/src/org/aspectj/asm/AdviceAssociation.java",
        "asm/src/org/aspectj/asm/StructureModelListener.java",
        "asm/src/org/aspectj/asm/HierarchyWalker.java",
        "ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java",
        "asm/src/org/aspectj/asm/ReferenceAssociation.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java",
        "asm/src/org/aspectj/asm/StructureNodeFactory.java",
        "asm/src/org/aspectj/asm/IStructureModelListener.java",
        "asm/src/org/aspectj/asm/IRelationship.java",
        "ajde/testsrc/org/aspectj/ajde/NullIdeErrorHandler.java",
        "ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeFactory.java",
        "ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java",
        "ajde/src/org/aspectj/ajde/ui/StructureView.java",
        "asm/src/org/aspectj/asm/Relation.java",
        "ajde/testsrc/org/aspectj/ajde/AjdeTests.java",
        "ajde/src/org/aspectj/ajde/internal/LstBuildConfigManager.java",
        "ajde/testsrc/org/aspectj/ajde/NullIdeManager.java",
        "ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java",
        "ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java",
        "ajde/src/org/aspectj/ajde/ui/AbstractIconRegistry.java",
        "asm/src/org/aspectj/asm/RelationNode.java",
        "asm/src/org/aspectj/asm/ModelWalker.java",
        "ajde/src/org/aspectj/ajde/ui/swing/StructureViewPanel.java",
        "ajde/src/org/aspectj/ajde/ui/StructureViewNodeFactory.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AsmBuilderTest.java",
        "ajde/src/org/aspectj/ajde/ui/BuildConfigNode.java",
        "asm/src/org/aspectj/asm/IProgramElement.java",
        "ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java",
        "ajde/testsrc/org/aspectj/ajde/NullIdeProgressMonitor.java",
        "asm/src/org/aspectj/asm/InheritanceAssociation.java",
        "ajde/src/org/aspectj/ajde/ui/StructureViewManager.java",
        "ajde/testsrc/org/aspectj/ajde/StructureModelTest.java",
        "ajde/src/org/aspectj/ajde/ui/swing/SimpleStructureViewToolPanel.java",
        "ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java",
        "weaver/src/org/aspectj/weaver/AsmAdaptor.java",
        "ajde/testdata/examples/coverage/pkg/InPackage.java",
        "asm/src/org/aspectj/asm/IntroductionAssociation.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java",
        "ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNode.java",
        "ajde/src/org/aspectj/ajde/ui/StructureSearchManager.java",
        "ajde/src/org/aspectj/ajde/ui/swing/BrowserViewManager.java",
        "asm/src/org/aspectj/asm/internal/Relationship.java",
        "ajde/testsrc/org/aspectj/ajde/ui/StructureSearchManagerTest.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmNodeFormatter.java",
        "ajde/src/org/aspectj/ajde/ui/swing/TreeViewBuildConfigEditor.java",
        "ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java",
        "ajde/src/org/aspectj/ajde/ui/swing/BuildConfigPopupMenu.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "asm/src/org/aspectj/asm/LinkNode.java",
        "ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java",
        "ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java",
        "ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java",
        "ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java",
        "ajde/src/org/aspectj/ajde/ui/BuildConfigModel.java"
      ]
    }
  },
  "68c36e3": {
    "bug_report": {
      "summary": "Bug 151978  [3.2compiler] Generics program fails to compile",
      "description": "generics problem, reported on newsgroup by Thomas Darimont\n\n//package de.tutorials.aspectj;\n\npublic interface IMessage {\n  void publish();\n}\n\n\ninterface IErrorMessage extends IMessage{\n  StackTraceElement[] getStackTrace();\n}\n\ninterface IObjectFactory<E> {\n  public <T extends E> T create(Class<T> theObjectType, Object[] theParameters);\n}\n\nclass MessageFactory implements IObjectFactory<IMessage>{\n  public <T extends IMessage> T create(Class<T> theObjectType, Object[] theParameters) {\n    return null;\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    IErrorMessage message = new MessageFactory().create(IErrorMessage.class, new Object[]{\"Foo\",\"Bar\"});\n  }\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs153/pr151978/IMessage.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "4513e92": {
    "bug_report": {
      "summary": "Bug 120739  LTW Optimization: Disable World if it has No Aspects",
      "description": "This optimization disables weaving for a ClassLoader where there are no aspects defined. This is actually useful if you have aspect exclusions that exclude all the aspects defined in a parent class loader. It is also helpful in the trivial/rare case where there is an aop.xml definition with no aspect definitions."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "tests/java5/ataspectj/ataspectj/ltwreweavable/EmptyAtAspect.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "81e6b60": {
    "bug_report": {
      "summary": "Bug 116254  AjTypeSystem interface cannot be used in LTW environment",
      "description": null
    },
    "commit": {
      "diff": [
        "aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/DeclareSoftImpl.java",
        "aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/StringToType.java"
      ]
    }
  },
  "f014275": {
    "bug_report": {
      "summary": "Bug 232712  ClassFormatError during LTW using annotation approach",
      "description": "The following exception is obtained when using the annotation approach and load-time weaving:\n\n[AppClassLoader@1f12c4e] info AspectJ Weaver Version 1.5.4 built on Thursday Dec 20, 2007 at 13:44:10 GMT\n[AppClassLoader@1f12c4e] info register classloader sun.misc.Launcher$AppClassLoader@1f12c4e\n[AppClassLoader@1f12c4e] info using configuration /H:/temp/aspectj_bug/scratch/classes/scratch/aop/annotationbug/aspect/aop-bug.xml\n[AppClassLoader@1f12c4e] info register aspect scratch.aop.annotationbug.aspect.BugAspect\ndoSomething()\nException in thread \"main\" java.lang.ClassFormatError: Code attribute in native or abstract methods in class file scratch/aop/annotationbug/extra/SubClass\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$000(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:276)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\tat scratch.aop.annotationbug.extra.BugOther.getSubClass(BugOther.java:22)\n\tat scratch.aop.annotationbug.main.BugMain.somethingElse(BugMain.java:36)\n\tat scratch.aop.annotationbug.main.BugMain.doSomething(BugMain.java:30)\n\tat scratch.aop.annotationbug.main.BugMain.execute(BugMain.java:24)\n\tat scratch.aop.annotationbug.main.BugDriver.doExecute(BugDriver.java:27)\n\tat scratch.aop.annotationbug.main.BugDriver.main(BugDriver.java:21)\n\nThe same advice logic does not result in a ClassFormatError when using the Aspect approach, it only appears using the annotation approach.\n\nUnfortunately we have not been able to track down exactly why the above Error occurs but have attached a test case that manifests it.\n\nTo run simply use the runtime configuration on the BugDriver main():\n\n-Dorg.aspectj.weaver.loadtime.configuration=\"scratch/aop/annotationbug/aspect/aop-bug.xml\"\n\nAlong with the AspectJ Load-Time Weaver Agent.\n\nThe above occurs with both AspectJ 1.5.4 and AspectJ 1.6.0. Interestingly when using the aspectj 1.6.0 weaver, the AppClassLoader log still indicates \"1.5.4\"."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"
      ]
    }
  },
  "9df9062": {
    "bug_report": {
      "summary": "Bug 41888  call PCD fails when given subtype of defining type",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs/CallReference.java"
      ]
    }
  },
  "1e28b92": {
    "bug_report": {
      "summary": "Bug 314365  pointcut rewriter can have issues for large hashcode values",
      "description": "AJDT uses a pointcut like this:\n\n(persingleton(org.eclipse.ajdt.internal.ui.ras.UIFFDC) && ((handler(java.lang.Throwable+) && args(arg1)) && ((within(org.eclipse.ajdt..*) && (!within(org.eclipse.ajdt.internal.ui.lazystart..*) && (!within(org.eclipse.ajdt.internal.ui.dialogs.OpenTypeSelectionDialog2) && !(within(org.eclipse.ajdt.internal.ui.editor.AspectJBreakpointRulerAction) && handler(org.eclipse.jface.text.BadLocationException))))) && (!(within(org.eclipse.ajdt.core.ras.FFDC+) || handler(org.eclipse.core.runtime.OperationCanceledException)) && !this(java.lang.Object)))))\n\nAfter the pointcut rewriter has chewed on it, it is reduced to a normal form.  This is meant to be a stable form such that further rewrites of it would not change it.  This turned out not to be the case.  The hashcodes for some of the components were quite large and manifested as negative integers.  The arithmetic in the comparator for the elements would have a problem and give unhelpful responses.  For example, if the elements were C,B,A it might rewrite them to A,B,C but on a subsequent rewrite it would realise that C was less than A, giving B,C,A.  Whether it went wrong was dependent on the order in which the elements were collected by the rewriter.\n\nThis is now fixed.  It impacts incremental compilation sometimes as two pointcuts that should be identical look different because one has been through the rewritter more times than the other..."
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PointcutRewriterTest.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java"
      ]
    }
  },
  "87e5c2e": {
    "bug_report": {
      "summary": "Bug 109486  Internal compiler error (ClassParser.java:242)",
      "description": "Testcase: A.aj containing:\n\nfinal abstract aspect A {}\n\nThis causes the compiler to abort with an internal compiler error:\n\nC:\\Documents and Settings\\mchapman\\A.aj [error] Internal compiler error\norg.aspectj.apache.bcel.classfile.ClassFormatException: Class can't be both\nfinal and abstract\n        at org.aspectj.apache.bcel.classfile.ClassParser.readClassInfo(ClassPars\ner.java:242)\n        at org.aspectj.apache.bcel.classfile.ClassParser.parse(ClassParser.java:\n165)\n        at org.aspectj.weaver.bcel.Utility.makeJavaClass(Utility.java:489)\n        at org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass(UnwovenClassFil\ne.java:63)\n        at org.aspectj.weaver.bcel.UnwovenClassFile.getClassName(UnwovenClassFil\ne.java:147)\n        at org.aspectj.ajdt.internal.core.builder.AjState.noteResult(AjState.jav\na:497)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult(\nAjBuildManager.java:748)\n        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(\nAjCompilerAdapter.java:186)\n        at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning\n$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.a\nj:89)\n        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compil\ner.java:528)\n        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compil\ner.java:329)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat\nion(AjBuildManager.java:728)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuild\nManager.java:206)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBu\nildManager.java:140)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n        at org.aspectj.tools.ajc.Main.run(Main.java:324)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:238)\n        at org.aspectj.tools.ajc.Main.main(Main.java:82)\n\n(no source information available)\nC:\\Documents and Settings\\mchapman\\A.aj:1 [error] The class A can be either abst\nract or final, not both\nfinal abstract aspect A {}\n\nABORT\n\nException thrown from AspectJ DEVELOPMENT\n\n\nC:\\Documents and Settings\\mchapman>ajc -version\nAspectJ Compiler DEVELOPMENT built on Tuesday Sep 13, 2005 at 22:31:40 GMT\n\nThe expected behaviour is naturally just to get a regular compiler errror saying\n\"The aspect A can be either abstract or final, not both\"."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/PR109486.java",
        "bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java"
      ]
    }
  },
  "9f80317": {
    "bug_report": {
      "summary": "Bug 264869  AspectJ depends on Class files having a dot in their source file name attribute",
      "description": "The following code in ShadowMunger$getBinaryFile() (line 169 ff) fails if a class file does not contain a proper source file name:\n\n\t\tif (binaryFile == null) {\n\t\t\tString s = getDeclaringType().getBinaryPath();\n\t\t\tFile f = getDeclaringType().getSourceLocation().getSourceFile();\n\t\t\tint i = f.getPath().lastIndexOf('.');\n\t\t\tString path = f.getPath().substring(0, i) + \".class\";\n\t\t\tbinaryFile = new File(s + \"!\" + path);\n\t\t}\n\n(there is no '.' in the file name, thus this gives a string index out of bounds error)."
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java"
      ]
    }
  },
  "d78d9ed": {
    "bug_report": {
      "summary": "Bug 42740  declare error fails on pointcuts composed from multiple classes",
      "description": "This error occurs in both 1.1.0 and in the head of CVS as of 9/8/03. The \ncompiler crash output from the CVS head version is at the end. It may be \nrelated to 42739, but they may be distinct problems.\n\nSample source:\n/*\n * Created on Sep 8, 2003\n *\n * Copyright (c) 2003 New Aspects of Security. All Rights Reserved.\n */\naspect Library {\n    public pointcut executionsThrowingChecked() : \n        execution(* *(..) throws (Exception+ && !RuntimeException));\n}\n\npublic aspect SampleExceptionHandling {\n    public pointcut scope() : within(org.atrack.model..*);\n    \n    public pointcut executionsThrowingChecked() : \n        Library.executionsThrowingChecked() && scope();\n\n    declare error : executionsThrowingChecked(): \n        \"no checked exceptions\";\n}\n\nsample compile:\nC:\\eclipse\\workspace\\atrack>ajc src\\SampleExceptionHandling.java\njava.lang.Exception: Stack trace\n        at java.lang.Thread.dumpStack(Thread.java:1071)\n        at org.aspectj.weaver.patterns.ReferencePointcut.concretize1\n(ReferencePo\nintcut.java:215)\n        at org.aspectj.weaver.patterns.AndPointcut.concretize1\n(AndPointcut.java:\n88)\n        at org.aspectj.weaver.patterns.ReferencePointcut.concretize1\n(ReferencePo\nintcut.java:272)\n        at org.aspectj.weaver.patterns.AndPointcut.concretize1\n(AndPointcut.java:\n88)\n        at org.aspectj.weaver.patterns.ReferencePointcut.concretize1\n(ReferencePo\nintcut.java:272)\n        at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:127)\n        at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:120)\n        at org.aspectj.weaver.Checker.concretize(Checker.java:37)\n        at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger\n(CrosscuttingMe\nmbers.java:78)\n        at org.aspectj.weaver.CrosscuttingMembers.addDeclare\n(CrosscuttingMembers\n.java:102)\n        at org.aspectj.weaver.CrosscuttingMembers.addDeclares\n(CrosscuttingMember\ns.java:92)\n        at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers\n(ResolvedT\nypeX.java:332)\n        at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect\n(Crosscut\ntingMembersSet.java:50)\n        at \norg.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy\npeAndPerClause(AspectDeclaration.java:754)\n        at \norg.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn\nterTypeAndPerClause(AjLookupEnvironment.java:124)\n        at \norg.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet\neTypeBindings(AjLookupEnvironment.java:91)\n        at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile\n(Compiler.ja\nva:310)\n        at org.eclipse.jdt.internal.compiler.Compiler.compile\n(Compiler.java:324)\n\n        at \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat\nion(AjBuildManager.java:373)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuild\nManager.java:125)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBu\nildManager.java:70)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)\n        at org.aspectj.tools.ajc.Main.run(Main.java:217)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:155)\n        at org.aspectj.tools.ajc.Main.main(Main.java:72)\nC:\\eclipse\\workspace\\atrack\\src\\SampleExceptionHandling.java:15 circular \npointcu\nt declaration involving: executionsThrowingChecked()\n\n1 error"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java",
        "tests/bugs/declareBinding/SampleExceptionHandling1.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java",
        "weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java",
        "tests/bugs/declareSoftWithin/test/NoSoftener.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"
      ]
    }
  },
  "6beb43f": {
    "bug_report": {
      "summary": "Bug 76096  Anonymous classes unaware of introductions into abstract classes (error can't find type $Local$)",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "tests/bugs/pr76096/ConcreteClassA.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "7d6b500": {
    "bug_report": {
      "summary": "Bug 55134  Incremental compilation does not delete weaver-generated class files",
      "description": "During incremental compilation, AjState records classes generated from source \nfiles following the initial compile phase, but before weaving. (So that these \ncan be passed to the weaver on a subsequent iteration if we need to reweave the \nworld). During weaving of a given class file, the weaver may generate additional \nclass files (for e.g. around closures) that get written to the output. If the \norginal source file is deleted, these additional weaver generated classes are \nnot deleted from the output since AjState does not know about them."
    },
    "commit": {
      "diff": [
        "tests/incremental/initialTests/classWAroundClosureRemoved/AdviceOnIntroduced.delete.20.java",
        "weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java",
        "tests/incremental/initialTests/classWAroundClosureRemoved/AdviceOnIntroduced.java",
        "tests/incremental/initialTests/classWAroundClosureRemoved/Main.java"
      ]
    }
  },
  "797ec4d": {
    "bug_report": {
      "summary": "Bug 206732  [itds] Problem with ITDs appearing to be applied twice (and clashing) for binary types",
      "description": "As reported by Josh on the mailing list:\n\nI have the following 2 files:\n\n \n\nAdvised.aj:\n\n \n\npackage bugs;\n\n \n\npublic class Advised {}\n\naspect ITD {\n\n          public void Advised.f() {}\n\n}\n\n \n\nRef.aj:\n\n \n\npackage notbugs;\n\n \n\nimport bugs.Advised;\n\n \n\npublic class Ref {\n\n          public void g() {\n\n                   new Advised().f();\n\n          }\n\n}\n\n \n\nI am attempting to build Advised.aj into a jar, and refer to it from Ref.aj, using the following ant build.xml:\n\n \n\n<?xml version=\"1.0\"?>\n\n \n\n<project name=\"Bugs\" basedir=\"C:\\workplace\\imds\\Bugs\"\n\n          xmlns:aj=\"antlib:org.aspectj\">\n\n          <taskdef uri=\"antlib:org.aspectj\" resource=\"org/aspectj/antlib.xml\" classpath=\"./aspectjtools.jar\"/>\n\n          <target name=\"clean\">\n\n                   <delete dir=\"bugs\" includes=\"**/*.class\"/>\n\n                   <delete dir=\"notbugs\" includes=\"**/*.class\"/>\n\n          </target>\n\n          <target name=\"task1\">\n\n                   <aj:iajc srcdir=\".\" destdir=\".\" source=\"1.5\" target=\"1.5\">\n\n                             <classpath location=\".\\aspectjrt.jar\"/>\n\n                             <include name=\"bugs/Advised.aj\"/>\n\n                   </aj:iajc>\n\n          </target>\n\n          <target name=\"task2\">\n\n                   <aj:iajc source=\"1.5\" target=\"1.5\" srcdir=\".\">\n\n                             <classpath location=\".\\aspectjrt.jar\"/>\n\n                             <aspectpath location=\".\"/>\n\n                             <include name=\"notbugs/Ref.aj\"/>\n\n                   </aj:iajc>\n\n          </target>\n\n</project>\n\n \n\nFrom within Eclipse, there are no build errors because this is all one project.  On the command line, however, once I execute ant task2, I get the following marvelous error message which suggests that ajc is trying to ITD f into a class it already ITDd f into before:\n\n \n\n  [aj:iajc] error at C:\\workplace\\imds\\Bugs\\bugs\\Advised.aj:5::77 inter-type declaration from bugs.ITD conflicts with existing member: void bugs.Advised.f()\n\n  [aj:iajc] MessageHolder:  (8 info)  (1 error)\n\n  [aj:iajc] [error   0]: error at C:\\workplace\\imds\\Bugs\\bugs\\Advised.aj:5::77 inter-type declaration from bugs.ITD conflicts with existing member: void bugs.Advised.f()\n\n \n\nLet me also say that in my real use-case, the jar produced by task1 will contain aspects that should apply to clients thereof, and as such, that jar should indeed be in the aspectpath (not the classpath) for task2 (unless I am seriously misunderstanding something).\n\n \n\nHow to stop this duplicate attempt to ITD?\n\n \n\nJosh\n\n---\n\nJosh is correct that using aspectpath will pull in the aspects for application to other types, the problem is that when pulling in type Advised, we reapply known ITDs and it clashes with the one added in the original build of the type.\n\nTwo possible fixes that I am looking at:\n- don't reapply the ITDs (they are added to ensure type system is consistent) to binary types pulled in from the aspectpath\n- recognize the ITD is clashing with a member previously applied through the same ITD\n\nI am not sure we can determine it came from the aspectpath at the point the clash is detected.  I have option (2) already implemented, but I'll try a little more with option 1 before giving up ;)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/ResolvedType.java"
      ]
    }
  },
  "eac16ae": {
    "bug_report": {
      "summary": "Bug 49250  alias getCause for getWrappedThrowable in SoftException",
      "description": "SoftException should implement getCause():\n\n   public Throwable getCause() {\n       return inner;\n   }\n\n(As pointed out by Ramnivas, misc mail messages, code comments...)\n\nUsing getCause() means the chain should print as expected in 1.4+, esp. when\nSoftException is itself wrapped as a RemoteException.  Since getCause()\nreplicates getWrappedThrowable(), we could deprecate that, but we must continue\nto support it to maintain upwards binary compatibility in the runtime classes."
    },
    "commit": {
      "diff": [
        "runtime/src/org/aspectj/lang/SoftException.java"
      ]
    }
  },
  "c2ff74f": {
    "bug_report": {
      "summary": "Bug 388971  Double Synthetic attributes on some around advice members",
      "description": "Some of the support members in aspects were getting Synthetic attributes added twice (once when compiled, once when used as an aspect library).  Some JVMs appear to flag this as a verify error.  The fix is simply to check before adding to make sure the attribute isn't added twice."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"
      ]
    }
  },
  "3e59745": {
    "bug_report": {
      "summary": "Bug 41123  Weaving failure when using injars",
      "description": "Sample run that fails using injars:\nC:\\devel\\test\\libraryWeave>ajc ajee\\testing\\ExecutionMonitor.aj\n\nC:\\devel\\test\\libraryWeave>jar cf ajee.jar ajee\\testing\\*.class\n\nC:\\devel\\test\\libraryWeave>ajc -injars ajee.jar model\\BusObj.java \nmodel\\MonitorB\nusObj.java\nC:\\devel\\test\\libraryWeave\\model\\BusObj.java:3 Class must implement the \ninherite\nd abstract method ExecutionMonitor.MonitoredItem.ajc$interMethodDispatch2\n$ajee_t\nesting_ExecutionMonitor$record(String, String)\npublic class BusObj {\n             ^^^^^^\n\n1 error\n\nIt works in a single pass compilation:\nC:\\devel\\test\\libraryWeave>ajc ajee\\testing\\ExecutionMonitor.aj \nmodel\\BusObj.jav\na model\\MonitorBusObj.java\n\nC:\\devel\\test\\libraryWeave>\n\nSample source code:\npackage ajee.testing;\n\npublic aspect ExecutionMonitor {\n    public interface MonitoredItem {}\n    private void MonitoredItem.record(String eventType, String eventName) {}\n}         \n---\npackage model;\n\npublic class BusObj {\n\n}\n---\npackage model;\n\nimport ajee.testing.ExecutionMonitor;\n\npublic aspect MonitorBusObj {\n    declare parents: BusObj implements ExecutionMonitor.MonitoredItem;\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs/moreInterfaceLibrary/model/MonitorBusObj.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java",
        "tests/bugs/moreInterfaceLibrary/model/BusObj.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"
      ]
    }
  },
  "4e34477": {
    "bug_report": {
      "summary": "Bug 404594  Assertion failed at ResolvedType.java:614",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java"
      ]
    }
  },
  "dc53b77": {
    "bug_report": {
      "summary": "Bug 293457  NPE on multiple declare @methods",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc167/IntertypeTests.java",
        "tests/bugs167/pr293457/org/springmodules/cache/annotations/Cacheable.java",
        "tests/src/org/aspectj/systemtest/ajc167/Ajc167Tests.java"
      ]
    }
  },
  "735d94f": {
    "bug_report": {
      "summary": "Bug 114332  Reflection API not detecting ITD method correctly in all circumstances",
      "description": null
    },
    "commit": {
      "diff": [
        "aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeConstructorDeclarationImpl.java",
        "aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeDeclarationImpl.java",
        "aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeMethodDeclarationImpl.java",
        "aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeFieldDeclarationImpl.java",
        "tests/java5/reflection/ReflectBilling.java"
      ]
    }
  },
  "88fab6a": {
    "bug_report": {
      "summary": "Bug 324135  ArrayIndexOutOfBoundsException at AjState.java:1767",
      "description": "Build Identifier: 20100617-1415\n\nUsing AspectJ version: 1.6.10.20100817163700\n\nI hit the blow exception after saving a edited java file.\n\njava.lang.ArrayIndexOutOfBoundsException\nat org.aspectj.ajdt.internal.core.builder.AjState.hasStructuralChanges(AjState.java:1767)\nat org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile(AjState.java:1510)\nat org.aspectj.ajdt.internal.core.builder.AjState.noteResult(AjState.java:1322)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult(AjBuildManager.java:1049)\nat org.aspectj.ajdt.internal.compiler.AjPipeli ... b.run(AutoBuildJob.java:242)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n\nCompile error: ArrayIndexOutOfBoundsException thrown: 14\n\nReproducible: Didn't try"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"
      ]
    }
  },
  "a7e13f1": {
    "bug_report": {
      "summary": "Bug 112476  \"declare parents\" does not work with bytecode weaving",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs150/pr112476/case1/lib/C.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "tests/bugs150/pr112476/case1/lib/B.java",
        "tests/bugs150/pr112476/case1/lib/A.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/pr112476/case1/weaved/SuperC.java"
      ]
    }
  },
  "ae500c6": {
    "bug_report": {
      "summary": "Bug 120521  named pointcut not resolved in pertarget pointcut",
      "description": "Get incorrect error \"can't find pointcut ...\" when declaring pertarget pointcut using pointcut declared outside the aspect.  \n\nTrue of HEAD right now.  Not true of pointcuts declared inside the aspect or issingleton aspects.\n\nI thought this was reported and fixed, but I couldn't find the bug.  Sorry if it is a duplicate.\n\n-------------------------------------------------\npackage bugs;\n\npublic class PerTargetSubaspectError {\n\tpublic static void main(String[] args) {\n\t\tC.run();\n\t}\n\tstatic class C {\n\t\tstatic void run() {}\n\t}\n\tpointcut doit() : execution(void C.run());\n\n\t// no error if not pertarget\n\tstatic aspect CPT pertarget(pc()){ \n                // no error if doit() defined in CPT\n\t\tprotected pointcut pc() : doit(); // unexpected CE\n\t\tbefore() : doit() {} // no CE\n\t}\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs150/pr120521/PerTargetSubaspectError.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "b5e6307": {
    "bug_report": {
      "summary": "Bug 72150  AJC possible bug with static nested classes",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/TypeX.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java",
        "tests/bugs/java5/arrayCloning/A.java",
        "tests/bugs/java5/arrayCloning/C.java"
      ]
    }
  },
  "7b4c7d7": {
    "bug_report": {
      "summary": "Bug 83626  @AJ",
      "description": "Andy wants a patch format + a bugzilla for @AJ work due to some funny license issue.\nHere it is as drafted"
    },
    "commit": {
      "diff": [
        "bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java"
      ]
    }
  },
  "6b35ea4": {
    "bug_report": {
      "summary": "Bug 322039  Fully qualified ITD has incorrect handle identifier",
      "description": "In the following aspect:\n\npublic aspect Aspect {\n\tpublic void q2.ThisClass.something2() {}\n}\n\nIn aspectJ, the ITD has the following handle identifier (notice that the ITD name is not fully qualified):\n\n=AspectJ Project/src2<p*Aspect.aj'Aspect)ThisClass.something2\n\nHowever, it should be (with fully qualified name):\n\n=AspectJ Project/src2<p*Aspect.aj'Aspect)q2.ThisClass.something2\n\nThis means that fully qualified ITDs cannot be navigated to or searched.  I'm a little surprised that this doesn't work because I thought I had tests for it..."
    },
    "commit": {
      "diff": [
        "tests/multiIncremental/pr322039/base/src/q2/Code.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "tests/multiIncremental/pr322039/base/src/p/Azpect.java"
      ]
    }
  },
  "a303a09": {
    "bug_report": {
      "summary": "Bug 74952  before,after !(cflow(within(Trace*))) prints nothing",
      "description": "Reference: \"cflow(within(C)) vs (within(C)||cflowbelow(within(C)) in\naspectj-users mailing list.\n\nThe aspect TraceClass below doesn't print any message when the pointcut is\ndefined to \"!cflow(within(Trace*))\". The other defintion \"!(within(Trace*) ||\ncflowbelow(within(Trace*)))\" works fine. Wes Isberg in his reply explained that\ncflow should never be used alone but he thought \"there is a bug or two in here\"\n\nclass SomeClass \n{\n    static public void main (String [] args) {\n    }\n} // SomeClass\n\naspect TraceClass {\n\n    // members\n    static private int level = 0;\n\n    static private void offset() {\n        int i;\n        for (i = 0; i < level; ++i) {\n            System.out.print(\"  \");\n        }\n    } // offset\n\n    pointcut pc() : \n        !cflow(within(Trace*))\n//        !(within(Trace*) || cflowbelow(within(Trace*)))\n        ;\n    before () : pc() {\n        offset();\n        System.out.println(\"-> \" + thisJoinPoint);\n        ++level;\n    }\n    after  () : pc() {\n        --level;\n        offset();\n        System.out.println(\"<- \" + thisJoinPoint);\n    }\n} // TraceClass\n\nIn order to try to figure out what is happening within TraceClass, I added a\nsecond aspect, TraceTrace, just to trace TraceClass.\n\naspect TraceTrace {\n\n    // members\n    static private int level = 0;\n\n    static private void offset() {\n        int i;\n        for (i = 0; i < level; ++i) {\n            System.out.print(\"  \");\n        }\n    } // offset\n\n    pointcut pc() : within(TraceClass);\n    before () : pc() {\n        offset();\n        System.out.println(\"=> \" + thisJoinPoint);\n        ++level;\n    }\n    after  () : pc() {\n        --level;\n        offset();\n        System.out.println(\"<= \" + thisJoinPoint);\n    }\n} // TraceTrace\n\nHere is what TraceTrace prints when TraceClass uses \"!cflow(within(Trace*))\"\n\n=> staticinitialization(TraceClass.<clinit>)\n  => set(int TraceClass.level)\n  <= set(int TraceClass.level)\n  => preinitialization(TraceClass())\n    => initialization(TraceClass())\n      => execution(TraceClass())\n      <= execution(TraceClass())\n    <= initialization(TraceClass())\n  <= staticinitialization(TraceClass.<clinit>)\n\nThe after advice is not executed for preinitialization."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "tests/bugs/WhatsGoingOn.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "9de03b7": {
    "bug_report": {
      "summary": "Bug 211674  [ataspectj] after throwing annotation style is too sensitive to parameter positions",
      "description": "Reported on the list by Ashley Williams:\nHaving converted my aspects to use the @AspectJ style, I'm now getting a strange error message when a compile my tracing aspect,.\nFirst here is the section of code:\n\n\n        @Pointcut(\"execution(@Tracing * *(..)) && @annotation(tracing)\")\n        void annotatedMethods(Tracing tracing) {\n        }\n       \n        @AfterThrowing(pointcut = \"annotatedMethods(tracing)\", throwing = \"t\")\n        public void logException(JoinPoint thisJoinPoint, Tracing tracing,\n                        Throwable t) {\n                Level level = Level.toLevel(tracing.level());\n                if (logger.isEnabledFor(level)) {\n                        logger.log(level, formatter.formatSignatureThrowing(thisJoinPoint),\n                                        t);\n                }\n        }\n\nSo I am matching on all methods annotated with @Tracing and logging the subclass of Throwable that may have been thrown.\nHowever when I run my test case i get the following error:\n\njava.lang.VerifyError: (class: com/db/abfo/tracing/PojoOne, method: calculate signature: ()V) catch_type not a subclass of Throwable\n\nThis used to work when I used the aspectj after throwing language extention form:\n\n\n        pointcut annotatedMethods(Tracing tracing) : execution(@Tracing * *(..)) && @annotation(tracing);\n\n        after(Tracing tracing) throwing(Throwable t) : annotatedMethods(tracing) {\n                Level level = tracing.level().getLevel();\n                if (logger.isEnabledFor(level)) {\n                        logger.log(level, formatter.formatSignatureThrowing(thisJoinPoint),\n                                        t);\n                }\n        }"
    },
    "commit": {
      "diff": [
        "tests/bugs154/pr211674/Test.java",
        "tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java",
        "tests/bugs154/pr211674/Test2.java"
      ]
    }
  },
  "51c018d": {
    "bug_report": {
      "summary": "Bug 87282  Compilation error on generic member introduction",
      "description": "The compiler aborts with the following introduction code:\n\naspect introductionToA{\n \n  private ArrayList<B> A.m_Array = new ArrayList<B>();  \n\n  public void A.addB(B tmp){\n    m_Array.add(tmp);\n  }\n}\n\nThe error message is \"[error] The method add(E) in the type ArrayList<E> is not\napplicable for the arguments (B) m_Array.add(tmp)\"\n\nCompiling with AspectJ Development version (2005/02/18)."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java"
      ]
    }
  },
  "6d94d09": {
    "bug_report": {
      "summary": "Bug 118698  Not Allowing Access to Private ITD inside Nested Type",
      "description": "AspectJ is failing to allow access to a private ITD field from a type nested inside the aspect, which is inconsistent with Java's access rules.\n\nHere is the source. See also the follow up patch to tests that integrates it into the ajc150 test suite.\n\npublic aspect prUnknown {\n    private static interface Marker {}   \n\n    private class Foo implements Marker {\n\t\tpublic Foo() {\n            bar = null; // allowed\n            listener = null; // should also be allowed\n            this.listener = null; // so should this\n            Marker.this.listener = null; // and this\n            ((Marker)this).listener = null; // and this\n        }\n    }\n\n    private Object Marker.listener;\n    private Object bar;\n}"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "0a175d2": {
    "bug_report": {
      "summary": "Bug 32421  can't resolve nested public interfaces",
      "description": "This may be caused by the bug as 32399\n\nfile TransactionTest.java:\nimport sub.ExecutionMonitor;\n\npublic class TransactionTest {\n    static Transaction theTransaction;\n\n    private void assertCommitted() {\n        theTransaction.getCount(\"method-execution\", \"commit\");\n    }\n\n    static aspect MonitorTest {\n        declare parents: Transaction implements ExecutionMonitor.MonitoredItem;\n    }\n}\n\nclass Transaction {\n}\n\nfile sub/ExecutionMonitor.aj:\npackage sub;\n\npublic aspect ExecutionMonitor {\n    public interface MonitoredItem {\n        int getCount(String eventType, String eventName);\n    }\n\n    public int MonitoredItem.getCount(String eventType, String eventName) {\n            return 0;\n    } \n}         \n\nsample compilation:\nC:\\devel>ajc -1.4 TransactionTest.java sub\\ExecutionMonitor.aj\ncan't bind type name 'ExecutionMonitor$MonitoredItem'\nC:/devel/TransactionTest.java:7: The method getCount(java.lang.String, java.lang\n.String) is undefined for the type Transaction\ntheTransaction.getCount(\"method-execution\", \"commit\");\n               ^^^^^^^^\n\n2 errors"
    },
    "commit": {
      "diff": [
        "tests/bugs/interfaceNames/sub/ExecutionMonitor.java",
        "tests/bugs/InnerPointcut.java",
        "tests/bugs/interfaceNames/TransactionTest.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java",
        "tests/new/EachObjectInDeepPackage.java"
      ]
    }
  },
  "3e0650d": {
    "bug_report": {
      "summary": "Bug 145322  Failure of testCompareSubclassDelegates() on J9 1.5.0 SR1",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"
      ]
    }
  },
  "75852d7": {
    "bug_report": {
      "summary": "Bug 70619  compiler aborts with \"conflicting dominates orders\" with circular declare precedences",
      "description": "The following program causes ajc 1.2 to abort:\n\npublic class Conflict { public static void main(String[] args) { } }\n\naspect Conflict1 {\n  declare precedence: Conflict1, Conflict2;\n\n   before(): execution(* *(..)) { }\n}\n\naspect Conflict2 {\n  declare precedence: Conflict2, Conflict1;\n\n\n  after(): execution(* *(..)) { }\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs/bug70619/Precedence.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "tests/bugs/bug70619/Conflict.java"
      ]
    }
  },
  "5d2b5b8": {
    "bug_report": {
      "summary": "Bug 138384  java.lang.ClassFormatError: Invalid method Code length  83071 in class file org/eclipse/jdt/internal/compiler/impl/Constant",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs152/pr138384/BigMethod.java",
        "bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "cbb6f5a": {
    "bug_report": {
      "summary": "Bug 387718  RuntimeException when trying to compile broken code",
      "description": "java.lang.RuntimeException\nat org.aspectj.weaver.NameMangler.makeVisibilityName(NameMangler.java:297)\nat org.aspectj.weaver.NameMangler.interMethod(NameMangler.java:242)\nat org.aspectj.weaver.AjcMemberMaker.interMethod(AjcMemberMaker.java:538)\nat org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.methodMustOverride(AjProblemReporter.java:385)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(M ... dJob.java:241)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n\nCompile error: RuntimeException thrown: protected inter-types not allowed"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"
      ]
    }
  },
  "ae0ef30": {
    "bug_report": {
      "summary": "Bug 32239  Dumps assembly code if Object[] used in args (BcelRenderer.java:152)",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelRenderer.java",
        "weaver/src/org/aspectj/weaver/bcel/Utility.java"
      ]
    }
  },
  "299c3a4": {
    "bug_report": {
      "summary": "Bug 134371  ClassCastException in AjState.recordClassFile()",
      "description": "I got this exception while working on a static inner aspect. A full rebuild avoided the problem. \n\njava.lang.ClassCastException: org.aspectj.weaver.MissingResolvedTypeWithKnownSignature\n\tat org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile(AjState.java:774)\n\tat org.aspectj.ajdt.internal.core.builder.AjState.noteResult(AjState.java:627)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult(AjBuildManager.java:867)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:206)\n\tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:90)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:528)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:845)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:266)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168)\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\n\tat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"
      ]
    }
  },
  "be063b8": {
    "bug_report": {
      "summary": "Bug 376351  attribute problems with Java 7 compilation",
      "description": "From the mailing list, this goes wrong:\n\n***R.java***\npublic class R{ \n  public static void main(String[] args) {System.out.println(new R().getClass().getName());}\n}\n\n***R1.java***\npublic class R1 extends R {}\n\n***RAj.aj***\npublic aspect RAj\n{\n    private ThreadLocal<Object> inAspect = new ThreadLocal<Object>();\n    \n    pointcut createR() : execution(R.new());\n    Object around() : createR()\n    {\n        System.out.println(\"aspect:\" + inAspect.get() + \":\" + this);\n        if (inAspect.get() != null)\n        {\n            return proceed();\n        }\n        else\n        {\n            inAspect.set(this);\n            return new R1();\n        }\n    }\n}\n\n\ncompile command:\n/cygdrive/c/Program\\ Files/Java/aspectj-1.6.12/bin/ajc.bat -source 1.7 -outxml -outjar araj.jar -classpath \"aspectjrt.jar;.\" RAj.aj \n\nrun:\n\n/cygdrive/c/Program\\ Files/Java/aspectj-1.6.12/bin/aj5.bat  -classpath \".;./araj.jar\" R\n\nerrors:\nApr 06, 2012 1:37:40 PM org.aspectj.weaver.tools.Jdk14Trace error\nSEVERE: register definition failed\njava.lang.RuntimeException: Problem processing attributes in RAj\n    at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked(BcelObjectType.java:385)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java",
        "tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java",
        "tests/bugs170/pr376351/R1.java",
        "tests/bugs170/pr376351/RAj.java",
        "tests/bugs170/pr376351/R.java"
      ]
    }
  },
  "d856e4f": {
    "bug_report": {
      "summary": "Bug 123212  Skip subversion resources when copying files from input to output folders",
      "description": "Exception when compile a project under svn.\n\njava.io.FileNotFoundException\nat java.io.FileOutputStream.open(Native Method)\nat java.io.FileOutputStream.<init>(FileOutputStream.java:179)\nat java.io.FileOutputStream.<init>(FileOutputStream.java:131)\nat org.aspectj.util.FileUtil.makeOutputStream(FileUtil.java:1258)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource(AjBuildManager.java:466)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile(AjBuildManager.java:444)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination(AjBuildManager.java:386)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:298)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nFileNotFoundException thrown: /home/chomats/Fede/svn/fede-repos/Tool.Product.ProductServer/classes/.svn/format (Permission non accordee)"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "e9823aa": {
    "bug_report": {
      "summary": "Bug 229829  SourceTypeBinding.sourceStart() NPE",
      "description": "java.lang.NullPointerException\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.sourceStart(SourceTypeBinding.java:1514)\nat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodBinding.sourceStart(MethodBinding.java:988)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.fillDeclaredMembers(EclipseSourceType.java:243)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getDeclaredFiel ...                     IRETURN\n  end public boolean isTracingModifications()\n\nend public class com.centricsoftware.pi.core.data.reflection.Attribute"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"
      ]
    }
  },
  "7746fcb": {
    "bug_report": {
      "summary": "Bug 34858  Weaver crash",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs/CflowBindingOrig.java",
        "tests/bugs/CflowBinding.java",
        "weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"
      ]
    }
  },
  "a97f3b6": {
    "bug_report": {
      "summary": "Bug 59596  Null pointer exception while weaving java.awt.Label",
      "description": "I tried to add an Aspect to java.awt.Label. I compile the aspect via:\najc -inpath /usr/local/j2sdk_nb/j2sdk1.4.2/jre/lib/rt.jar Timestamp.java\n\nHere is the aspect Timestamp.java:\n\naspect Timestamp {\n\n    private int java.awt.Label._ts_read = 0;\n    private int java.awt.Label._ts_write = 0;\n\n    pointcut writeOp():\n    call (void java.awt.Label.setText (String));\n\n    pointcut readOp():\n    call (String java.awt.Label.getText());\n\t\n    after (java.awt.Label b) returning: readOp() && target (b)\n    {\n\tb._ts_read++;\n    }\n    \n    after (java.awt.Label b) returning: writeOp() && target (b)\n    {\n\tb._ts_write++;\n\tSystem.out.println (b._ts_write);\n    }\n\n    public static void main (String[] args)\n    {\n\tjava.awt.Label b1 = new java.awt.Label();\n\tb1.setText (\"abc\");\n    }\n}\n\nHere is the error message I get from ajc:\n\nnull\njava.lang.NullPointerException\n        at\norg.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeLocationContext(EclipseAdapterUtils.java:50)\n        at\norg.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeSourceLocation(EclipseAdapterUtils.java:120)\n        at\norg.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeMessage(EclipseAdapterUtils.java:129)\n        at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult(AjBuildManager.java:663)\n        at\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.acceptResult(AjCompilerAdapter.java:178)\n        at\norg.aspectj.ajdt.internal.compiler.WeaverAdapter.finishedWith(WeaverAdapter.java:203)\n        at\norg.aspectj.ajdt.internal.compiler.WeaverAdapter.weaveCompleted(WeaverAdapter.java:167)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:570)\n        at\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:239)\n        at\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:114)\n        at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376)\n        at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:600)\n        at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:160)\n        at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:94)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)\n        at org.aspectj.tools.ajc.Main.run(Main.java:280)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:217)\n        at org.aspectj.tools.ajc.Main.main(Main.java:79)\n\n\n1 fail|abort"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"
      ]
    }
  },
  "d1a295c": {
    "bug_report": {
      "summary": "Bug 118337  Use weaver's ClassLoader not the usingClassLoader in 1.5 factory",
      "description": "In ReflectionBasedReferenceTypeDelegateFactory this line (44) of code is breaking my use of the weaver for looking up bootstrap classes (where the classloader is null and the AspectJ weaver isn't accessible to the bootstrap loader). The commented out code works just fine for me. \n\nIs there a real need to resolve the AspectJ runtime from a different classloader than the one that was already used to load this class from the AspectJ runtime?\n\n\t\t\tClass delegateClass = Class.forName(\"org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate\",false,usingClassLoader);//ReflectionBasedReferenceTypeDelegate.class.getClassLoader());"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"
      ]
    }
  },
  "0521e79": {
    "bug_report": {
      "summary": "Bug 55341  error Type mismatch: cannot convert from java.lang.String to java.lang.String",
      "description": "When compiling a binary concrete aspect library (for later LTW) consisting of\nmore than one aspect that performs an ITD on a target class not exposed to the \nweaver I get the following error:\n\nerror Type mismatch: cannot convert from java.lang.String to java.lang.String\n\nThe error does not oocur if a complete build & weave is performed. Testcase \nattached."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java",
        "tests/bugs/StringToString/X.java",
        "weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java",
        "tests/bugs/StringToString/HW.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java"
      ]
    }
  },
  "b460597": {
    "bug_report": {
      "summary": "Bug 82340  Visibility selector ignored for pointcuts",
      "description": "Using ajdoc under AJDT 1.1.12 or AspectJ 1.2.1 at the commandline has the \nfollowing aspect has problems.\n\npublic abstract aspect Aspect {\n\n\tprivate pointcut privatePointcut ();\n\tprotected pointcut protectedPointcut ();\n\tpublic pointcut publicPointcut ();\n\t\n\tprivate void privateMethod () {\n\t\t\n\t}\n\t\n\tpublic void protectedMethod () {\n\t\t\n\t}\n\t\n\tpublic void publicMethod () {\n\t\t\n\t}\n}\n\n1. Asking for \"protected\" gives all pointcuts (public, protected _and_ private)\n2. The Aspect entry is wrong: \"public abstract class Aspect\"\n3. The \"Methods inherited ...\" section has a leading comma: \", clone, equals, \nfinalize, ...\""
    },
    "commit": {
      "diff": [
        "ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java",
        "ajdoc/testdata/coverage/foo/NoMembers.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/PointcutVisibilityTest.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java",
        "ajdoc/testdata/bug82340/Pointcuts.java"
      ]
    }
  },
  "c732808": {
    "bug_report": {
      "summary": "Bug 269912  wasted time building message context when it is only used for command line builds",
      "description": "The context for a message is created even when AspectJ is used inside AJDT - but the context only ever gets used when printing messages to System.out.  Under AJDT we ought to be able to 'switch it off'"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "bdc79f1": {
    "bug_report": {
      "summary": "Bug 47318  org.aspectj.asm.IRelationship.Kind.ALL does not contain all kinds",
      "description": "org.aspectj.asm.IRelationship.Kind.ALL is an array that should contain all kinds\nthat an IRelationship may have. There are three possible kinds defined in\nIRelationship.java: ADVICE, DECLARE and DECLARE_INTER_TYPE. The Kind[] ALL does\nonly contain ADVICE and DECLARE. This can lead to an ArrayIndexOutOfBoundsException."
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/IRelationship.java"
      ]
    }
  },
  "df1823b": {
    "bug_report": {
      "summary": "Bug 391123  Added support for more cache backing(s)",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/tools/cache/AbstractIndexedFileCacheBacking.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/FlatFileCacheBackingTest.java",
        "weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java",
        "weaver/src/org/aspectj/weaver/tools/cache/AsynchronousFileCacheBacking.java",
        "util/src/org/aspectj/util/LangUtil.java",
        "weaver/src/org/aspectj/weaver/tools/cache/FlatFileCacheBacking.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java",
        "weaver/src/org/aspectj/weaver/tools/cache/ZippedFileCacheBacking.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/AsynchronousFileCacheBackingTestSupport.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolverTest.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/CacheTests.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/SimpleClassCacheTest.java",
        "build/src/org/aspectj/internal/tools/ant/taskdefs/Checklics.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/AbstractCacheBackingTestSupport.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/ZippedFileCacheBackingTest.java"
      ]
    }
  },
  "a5ac5af": {
    "bug_report": {
      "summary": "Bug 117189  Contribution: reduce overhead when no aspects define",
      "description": "This patch to the ClassLoaderWeavingAdaptor adds two optimizations when enabled \nis false for the adaptor: it immediately returns false for accept and it also \navoids the overhead of constructing a weaver or world.\n\nIt also contains commented out code that was letting me improve performance by \nloading reflective proxies instead of creating BCEL objects for a resolution \nloader (which is currently broken since reflective proxies now require a \nReflectionWorld...)"
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"
      ]
    }
  },
  "319a0d1": {
    "bug_report": {
      "summary": "Bug 132591  Duplicate exception with aop.xml file on aspectpath",
      "description": null
    },
    "commit": {
      "diff": [
        "ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "ajde/testsrc/org/aspectj/ajde/OutxmlTest.java"
      ]
    }
  },
  "9abfc40": {
    "bug_report": {
      "summary": "Bug 120909  Test failures using IBM Java 5",
      "description": "1. ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates() \n\njunit.framework.AssertionFailedError: Errors:Couldn't find void java.util.HashMap.onEntry() in the bcel set \nCouldn't find void java.util.HashMap.onExit() in the bcel set \nCouldn't find void java.util.HashMap.transfer0(java.util.HashMap$Entry[]) in the bcel set \n\n        at junit.framework.Assert.fail(Assert.java:47) \n        at junit.framework.Assert.assertTrue(Assert.java:20) \n        at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates(ReflectionBasedReferenceTypeDelegateTest.java:278) \n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) \n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) \n        at java.lang.reflect.Method.invoke(Method.java:615) \n        at junit.framework.TestCase.runTest(TestCase.java:154) \n        at junit.framework.TestCase.runBare(TestCase.java:127) \n        at junit.framework.TestResult$1.protect(TestResult.java:106) \n        at junit.framework.TestResult.runProtected(TestResult.java:124) \n        at junit.framework.TestResult.run(TestResult.java:109) \n        at junit.framework.TestCase.run(TestCase.java:118) \n        at junit.framework.TestSuite.runTest(TestSuite.java:208) \n        at junit.framework.TestSuite.run(TestSuite.java:203) \n        at junit.framework.TestSuite.runTest(TestSuite.java:208) \n        at junit.framework.TestSuite.run(TestSuite.java:203) \n        at junit.framework.TestSuite.runTest(TestSuite.java:208) \n        at junit.framework.TestSuite.run(TestSuite.java:203) \n        at junit.framework.TestSuite.runTest(TestSuite.java:208) \n        at junit.framework.TestSuite.run(TestSuite.java:203) \n        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) \n        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) \n        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) \n\nThis failure occures because when we compare BeclWorld with ReflectionWorld we are still picking up the default (Sun) version of HashMap in JRE15_LIB for BCEL. The solution is to create both worlds with the same class loader.\n\n2. Ajc150Tests.testModifierOverrides() \n\njunit.framework.AssertionFailedError: Expecting output: \nexecution(void pr119749.C.m()): execMe[@pr119749$Me()] \nexecution(void pr119749.C.m()): execEx \nBut found output: \nexecution(void pr119749.C.m()): execMe[@pr119749.Me()] \nexecution(void pr119749.C.m()): execEx \n\nFirst difference is on line 1 \n\n        at junit.framework.Assert.fail(Assert.java:47) \n        at org.aspectj.testing.OutputSpec.matchAgainst(OutputSpec.java:58) \n        at org.aspectj.testing.RunSpec.execute(RunSpec.java:61) \n        at org.aspectj.testing.AjcTest.runTest(AjcTest.java:68) \n        at org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111) \n        at org.aspectj.systemtest.ajc150.Ajc150Tests.testModifierOverrides(Ajc150Tests.java:852) \n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) \n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) \n        at java.lang.reflect.Method.invoke(Method.java:615) \n        at junit.framework.TestCase.runTest(TestCase.java:154) \n        at junit.framework.TestCase.runBare(TestCase.java:127) \n        at junit.framework.TestResult$1.protect(TestResult.java:106) \n        at junit.framework.TestResult.runProtected(TestResult.java:124) \n        at junit.framework.TestResult.run(TestResult.java:109) \n        at junit.framework.TestCase.run(TestCase.java:118) \n        at junit.framework.TestSuite.runTest(TestSuite.java:208) \n        at junit.framework.TestSuite.run(TestSuite.java:203) \n        at junit.framework.TestSuite.runTest(TestSuite.java:208) \n        at junit.framework.TestSuite.run(TestSuite.java:203) \n        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) \n        at junit.extensions.TestSetup$1.protect(TestSetup.java:19) \n        at junit.framework.TestResult.runProtected(TestResult.java:124) \n        at junit.extensions.TestSetup.run(TestSetup.java:23) \n        at junit.framework.TestSuite.runTest(TestSuite.java:208) \n        at junit.framework.TestSuite.run(TestSuite.java:203) \n        at junit.framework.TestSuite.runTest(TestSuite.java:208) \n        at junit.framework.TestSuite.run(TestSuite.java:203) \n        at junit.framework.TestSuite.runTest(TestSuite.java:208) \n        at junit.framework.TestSuite.run(TestSuite.java:203) \n        at junit.framework.TestSuite.runTest(TestSuite.java:208) \n        at junit.framework.TestSuite.run(TestSuite.java:203) \n        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) \n        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) \n        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) \n\nThis failure is due a difference between JDKs in the implementation of toString() for annotations."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java",
        "weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java",
        "weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"
      ]
    }
  },
  "c6bc7a2": {
    "bug_report": {
      "summary": "Bug 102459  provide more detail in -showWeaveInfo messages",
      "description": "When advice is executed, the object you have to work with is the joinpoint. This\ncan then be queried to get various information out of it. It would be nice, if\nas part of the weaving you could get hold of the same information. \n\nThis is particularly useful in the case of writing a coverage tool. In order to\nmeasure where you've been, you have to know all the places you could possibly\ngo. The introduction of the -showWeaveInfo option means that we can record these\nplaces, however, this would be greatly enhanced by providing similar information\nas to that which is collected as the program is running.\n\nThe information which would be good is the same as that obtained from\n\nJoinPoint.StaticPart.getSignature().toLongString()."
    },
    "commit": {
      "diff": [
        "bridge/src/org/aspectj/bridge/WeaveMessage.java",
        "weaver/src/org/aspectj/weaver/Shadow.java",
        "tests/java5/ataspectj/ataspectj/ltwlog/MainVerboseAndShow.java"
      ]
    }
  },
  "a66e0a2": {
    "bug_report": {
      "summary": "Bug 59196  \"adviceexecution() && args()\" pcd does not pick up around advice execution because args() does not match the AroundClosure parameter.",
      "description": "In the following sample, the advice defined in \"other_aspect\" does not pick up \nthe execution of around advice defined in \"some_aspect\". It matches only \nagainst the before advice defined in \"some_aspect\".\n\nThe implicit AroundClosure parameter of an around advice seems to come in the \nway of args() matching. \n\n------------------------------------------------------ \naspect some_aspect {\n   pointcut call_m(int a, int b) : \n              call(int test.m(..)) && args(a, b);\n \n   before(int x, int y) : call_m(x, y) { ...  }\n   int around(int x, int y) : call_m(x, y) { ... }\n}\n \naspect other_aspect {\n   before(int x, int y) : \n       adviceexecution() && within(some_aspect) && \n                                       args(x, y){ \n         ...\n       }\n}\n--------------------------------------------------------\n\nAspectJ doc has to state this explicitly."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"
      ]
    }
  },
  "71771ab": {
    "bug_report": {
      "summary": "Bug 108816  AspectJ 1.5.0 Development Compiler Chokes on Advice with Cflow",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java"
      ]
    }
  },
  "727b0f5": {
    "bug_report": {
      "summary": "Bug 92837  [inc-compilation] Incremental Compilation Fails for ITD's on Aspects",
      "description": "On my project, when I save an aspect that calls an inter-type declaration \ndefined on itself, the incremental compiler gives a message like this:\nThe method logError(String, Exception) is undefined for the type Foo Foo.java\n\nRunning a full build clears the error.\n\nThis might be a compiler bug, or it might be AJDT (I never run command-line \nincremental compilation, so I don't know :-)).\n\nUnfortunately, simple test cases or extracts of just the 2 aspects aren't \nreproducing the issue, so let me know if you need me to spend some time trying \nto create a small isolated version of the issue."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "tests/multiIncremental/PR92837/base/sample/Holder.java",
        "tests/multiIncremental/PR92837/base/sample/AbstractDerived.java",
        "tests/multiIncremental/PR92837/inc1/sample/AbstractDerived.java"
      ]
    }
  },
  "8ce9dcf": {
    "bug_report": {
      "summary": "Bug 184447  AjLookupEnvironment.java:519",
      "description": "Build ID: Eclipse SDK\n\nVersion: 3.2.2\nM20070212-1330\n\nSteps To Reproduce:\nThis occured repeatedly when I saved a .aj file or a .java file that was boing advised.  A restart of eclipse made it go away and it has not happen again so I don't know how reproduce it. Sorry.\n\nAJDT version 1.4.2.200703020612\n\nMore information:\njava.lang.NullPointerException\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations(AjLookupEnvironment.java:803)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:592)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:519)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupE ... AutoBuildJob.run(AutoBuildJob.java:217)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)\n\nCompile error: NullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"
      ]
    }
  },
  "54f7bb4": {
    "bug_report": {
      "summary": "Bug 151845  NPE while building",
      "description": "Building of a large project fails while weaving. \nNPE in EclipseSourceContext.removeUnnecessaryProblems(..)\n\nThe project was just migrated to Eclipse 3.2\nEclipse newly installed with Eclipse SDK and via Update manager with\nAJDT, CDT, Web/J2EE tools, SubClipse, SpringIDE.\n\nSame Project workes in Eclipse 3.1.\nSimple Test AspectJ-Project workes OK\nBuilding with Ant/AspectJ compiler (as external Tools Launch in Eclipse)\nworks.\n\nI tried the following, but got the error anyway:\n - Checked out as a new AspectJ Project\n - upgraded to the developement Version of AJDT"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseSourceContext.java"
      ]
    }
  },
  "d43e74b": {
    "bug_report": {
      "summary": "Bug 118149  AspectJ compiler crahses possibly due to poincut context binding issue",
      "description": "I am using the latest version of AJDT (1.3.0.20051125115230).\n\n\nThe reason is not entirely clear, but I have a pointcut of form \n    public pointcut realPC(Common entity)\n    \t: pc1(entity) || pc2(entity);\n\nJust a few hours back, I used to get an error regarding incompatible binding\nof entity in the || poincut. When I got that error, Eclipse was frozen to the \npoint that clicking \"Details\" on exception report made Eclipse hang and \nhad to kill it using the task manager. So I modified the program to avoid\n|| expression in pointcut, after unsuccessfully trying various ways to \nexpress the pointcut. It was an ugly thing to do, since I essentially had to \nduplicate the advice for both pointcuts. Anyway...\n\nThen I tried to reproduce on a smaller project to provide a minimal\nprogram to reproduced the bug. However, it worked just fine on that project\n(and I couldn't see any material difference in the pointcuts or the classes\ninvolved). Encouraged by this, I retried the or-ed version of the pointcut\non the real project. This time, I get the crash and can acccess the stack\ntrace.\n\njava.lang.NullPointerException\nat org.aspectj.weaver.ast.Test.makeInstanceof(Test.java:78)\nat org.aspectj.weaver.patterns.IfPointcut.findResidueInternal(IfPointcut.java:181)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\nat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\nat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\nat org.aspectj.weaver.patterns.OrPointcut.findResidueInternal(OrPointcut.java:99)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\nat org.aspectj.weaver.patterns.OrPointcut.findResidueInternal(OrPointcut.java:99)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\nat org.aspectj.weaver.bcel.BcelAdvice.specializeOn(BcelAdvice.java:133)\nat org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:308)\nat org.aspectj.weaver.Shadow.implement(Shadow.java:404)\nat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1534)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1485)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1266)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1088)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:809)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic abstract class com.aspectivity.mgmt.web.entity.ManageEntity extends com.aspectivity.mgmt.web.TemplatePage:\n  public void <init>(com.aspectivity.mgmt.model.Entity, boolean, String, String, String, String, String)    org.aspectj.weaver.MethodDeclarationLineNumber: 19:557\n:\n                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 19)\n                    INVOKESPECIAL com.aspectivity.mgmt.web.TemplatePage.<init> ()V\n                    ALOAD_1\n                    ASTORE 9\n                    ILOAD_2\n                    ISTORE 10\n                    ALOAD_3\n                    ASTORE 11\n                    ALOAD 4\n                    ASTORE 12\n                    ALOAD 5\n                    ASTORE 13\n                    ALOAD 6\n                    ASTORE 14\n                    ALOAD 7\n                    ASTORE 15\n    constructor-execution(void com.aspectivity.mgmt.web.entity.ManageEntity.<init>(com.aspectivity.mgmt.model.Entity, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String))\n    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 23)\n    |               ALOAD_3     // java.lang.String pageTitle\n    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.setPageTitle (Ljava/lang/String;)V\n    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 25)\n    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this\n    |               ALOAD_1     // com.aspectivity.mgmt.model.Entity entity\n    |               ALOAD 5     // java.lang.String addEntityLinkText\n    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.getEntitiesListView (Lcom/aspectivity/mgmt/model/Entity;Ljava/lang/String;)Lwicket/markup/html/list/ListView;\n    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add (Lwicket/Component;)Lwicket/MarkupContainer;\n    |               POP\n    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 27)\n    |               LDC \"addEntityLink\"\n    |               ACONST_NULL\n    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.getEditLink (Ljava/lang/String;Lcom/aspectivity/mgmt/model/Entity;)Lwicket/markup/html/link/Link;\n    |               ASTORE 8\n    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 28)\n    |               ALOAD 8     // wicket.markup.html.link.Link addEntityLink\n    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add (Lwicket/Component;)Lwicket/MarkupContainer;\n    |               POP\n    |               ALOAD 8     // wicket.markup.html.link.Link addEntityLink   (line 29)\n    |               NEW wicket.markup.html.basic.Label\n    |               DUP\n    |               LDC \"addEntityLinkText\"\n    |               ALOAD 5     // java.lang.String addEntityLinkText\n    |               INVOKESPECIAL wicket.markup.html.basic.Label.<init> (Ljava/lang/String;Ljava/lang/String;)V\n    |               INVOKEVIRTUAL wicket.markup.html.link.Link.add (Lwicket/Component;)Lwicket/MarkupContainer;\n    |               POP\n    |               ILOAD_2     // boolean isInitialView   (line 31)\n    |               IFEQ L0\n    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 32)\n    |               NEW wicket.markup.html.basic.Label\n    |               DUP\n    |               LDC \"editEntity\"\n    |               LDC \"\"\n    |               INVOKESPECIAL wicket.markup.html.basic.Label.<init> (Ljava/lang/String;Ljava/lang/String;)V\n    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add (Lwicket/Component;)Lwicket/MarkupContainer;\n    |               POP\n    |               GOTO L1\n    |           L0: ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 34)\n    |               ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this\n    |               ALOAD_1     // com.aspectivity.mgmt.model.Entity entity\n    |               ILOAD_2     // boolean isInitialView\n    |               ALOAD 6     // java.lang.String addPanelTtile\n    |               ALOAD 7     // java.lang.String editPanelTitle\n    |               INVOKESPECIAL com.aspectivity.mgmt.web.entity.ManageEntity.getEditPanel (Lcom/aspectivity/mgmt/model/Entity;ZLjava/lang/String;Ljava/lang/String;)Lwicket/Component;\n    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add (Lwicket/Component;)Lwicket/MarkupContainer;\n    |               POP\n    |           L1: ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 37)\n    |               NEW wicket.markup.html.basic.Label\n    |               DUP\n    |               LDC \"listViewTitle\"\n    |               ALOAD 4     // java.lang.String listViewTitle\n    |               INVOKESPECIAL wicket.markup.html.basic.Label.<init> (Ljava/lang/String;Ljava/lang/String;)V\n    |               INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add (Lwicket/Component;)Lwicket/MarkupContainer;\n    |               POP\n    |               RETURN   (line 38)\n    constructor-execution(void com.aspectivity.mgmt.web.entity.ManageEntity.<init>(com.aspectivity.mgmt.model.Entity, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String))\n  end public void <init>(com.aspectivity.mgmt.model.Entity, boolean, String, String, String, String, String)\n\n  protected abstract com.aspectivity.mgmt.model.Entity createNewEntity()    org.aspectj.weaver.MethodDeclarationLineNumber: 40:1233\n;\n\n  protected abstract void removeEntity(com.aspectivity.mgmt.model.Entity)    org.aspectj.weaver.MethodDeclarationLineNumber: 41:1278\n;\n\n  protected abstract java.util.List getAllEntities()    org.aspectj.weaver.MethodDeclarationLineNumber: 42:1351\n;\n\n  protected abstract com.aspectivity.mgmt.web.entity.ManageEntity createNewPage(com.aspectivity.mgmt.model.Entity, boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 44:1406\n;\n\n  protected abstract wicket.Component createEditPanel(String, String, com.aspectivity.mgmt.model.Entity)    org.aspectj.weaver.MethodDeclarationLineNumber: 45:1490\n;\n\n  protected wicket.markup.html.list.ListView getEntitiesListView(com.aspectivity.mgmt.model.Entity, String)    org.aspectj.weaver.MethodDeclarationLineNumber: 47:1581\n:\n                    NEW com.aspectivity.mgmt.web.entity.EntityListView   (line 48)\n                    DUP\n                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this\n                    LDC \"entityList\"\n                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this\n                    INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.getAllEntities ()Ljava/util/List;\n                    ALOAD_1     // com.aspectivity.mgmt.model.Entity entity\n                    INVOKESPECIAL com.aspectivity.mgmt.web.entity.EntityListView.<init> (Lcom/aspectivity/mgmt/web/entity/ManageEntity;Ljava/lang/String;Ljava/util/List;Lcom/aspectivity/mgmt/model/Entity;)V\n                    ARETURN\n  end protected wicket.markup.html.list.ListView getEntitiesListView(com.aspectivity.mgmt.model.Entity, String)\n\n  protected wicket.markup.html.link.Link getEditLink(String, com.aspectivity.mgmt.model.Entity)    org.aspectj.weaver.MethodDeclarationLineNumber: 51:1743\n:\n                    NEW wicket.markup.html.link.PageLink   (line 52)\n                    DUP\n                    ALOAD_1     // java.lang.String name\n                    NEW com.aspectivity.mgmt.web.entity.ManageEntity$1\n                    DUP\n                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this\n                    ALOAD_2     // com.aspectivity.mgmt.model.Entity entity\n                    INVOKESPECIAL com.aspectivity.mgmt.web.entity.ManageEntity$1.<init> (Lcom/aspectivity/mgmt/web/entity/ManageEntity;Lcom/aspectivity/mgmt/model/Entity;)V\n                    INVOKESPECIAL wicket.markup.html.link.PageLink.<init> (Ljava/lang/String;Lwicket/markup/html/link/IPageLink;)V\n                    ARETURN\n  end protected wicket.markup.html.link.Link getEditLink(String, com.aspectivity.mgmt.model.Entity)\n\n  protected wicket.markup.html.link.Link getRemoveLink(String, wicket.markup.html.list.ListItem)    org.aspectj.weaver.MethodDeclarationLineNumber: 63:2013\n:\n                    NEW com.aspectivity.mgmt.web.entity.ManageEntity$2   (line 64)\n                    DUP\n                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this\n                    ALOAD_1     // java.lang.String id\n                    ALOAD_2     // wicket.markup.html.list.ListItem item\n                    INVOKESPECIAL com.aspectivity.mgmt.web.entity.ManageEntity$2.<init> (Lcom/aspectivity/mgmt/web/entity/ManageEntity;Ljava/lang/String;Lwicket/markup/html/list/ListItem;)V\n                    ARETURN\n  end protected wicket.markup.html.link.Link getRemoveLink(String, wicket.markup.html.list.ListItem)\n\n  private wicket.Component getEditPanel(com.aspectivity.mgmt.model.Entity, boolean, String, String)    org.aspectj.weaver.MethodDeclarationLineNumber: 75:2376\n:\n                    ALOAD_1     // com.aspectivity.mgmt.model.Entity entity   (line 77)\n                    IFNONNULL L0\n                    ALOAD_3     // java.lang.String addPanelTtile\n                    GOTO L1\n                L0: ALOAD 4     // java.lang.String editPanelTitle\n                L1: ASTORE 5\n                    ALOAD_1     // com.aspectivity.mgmt.model.Entity entity   (line 78)\n                    IFNONNULL L2\n                    ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 79)\n                    INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.createNewEntity ()Lcom/aspectivity/mgmt/model/Entity;\n                    ASTORE_1     // com.aspectivity.mgmt.model.Entity entity\n                L2: ALOAD_0     // com.aspectivity.mgmt.web.entity.ManageEntity this   (line 81)\n                    LDC \"editEntity\"\n                    ALOAD 5     // java.lang.String panelTitle\n                    ALOAD_1     // com.aspectivity.mgmt.model.Entity entity\n                    INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.createEditPanel (Ljava/lang/String;Ljava/lang/String;Lcom/aspectivity/mgmt/model/Entity;)Lwicket/Component;\n                    ARETURN\n  end private wicket.Component getEditPanel(com.aspectivity.mgmt.model.Entity, boolean, String, String)\n\nend public abstract class com.aspectivity.mgmt.web.entity.ManageEntity\n\nwhen implementing on shadow constructor-execution(void com.aspectivity.mgmt.web.entity.ManageEntity.<init>(com.aspectivity.mgmt.model.Entity, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String))\nwhen weaving type com.aspectivity.mgmt.web.entity.ManageEntity\nwhen weaving classes \nwhen weaving \nwhen batch building BuildConfig[C:\\work\\projects\\workspace\\.metadata\\.plugins\\org.eclipse.ajdt.core\\Aspectivity.generated.lst] #Files=87"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "8d793a3": {
    "bug_report": {
      "summary": "Bug 36936  Error when introducing members of type Class",
      "description": "Using AspectJ 1.1 RC1 \n \npublic aspect Asp { \n\tpublic Class Trg.member = String.class; \n} \n \npublic class Trg { \n\tpublic static void main(String args[]) { \n\t\tnew Trg(); \n\t\tSystem.out.println(\"All ok\"); \n\t} \n} \n \nCompiling with \"ajc Asp.java Trg.java\" and running Trg, prints \"All ok\", as it should. \n \nCompiling with \"ajc Trg.java Asp.java\" and running Trg gives: \nException in thread \"main\" java.lang.NoSuchFieldError: class$0 \n        at Asp.ajc$interFieldInit$Asp$Trg$member(Asp.java:2) \n        at Trg.<init>(Trg.java:1) \n        at Trg.main(Trg.java:3) \n \nNote, introduced field must be of type Class, or array of Classes, works fine else."
    },
    "commit": {
      "diff": [
        "tests/bugs/interSpecials/Asp.java",
        "tests/bugs/interSpecials/Trg.java"
      ]
    }
  },
  "7bbd1f4": {
    "bug_report": {
      "summary": "Bug 46280  compiler issues error on inner aspects when privilieged",
      "description": "The compiler complains that \"inner aspects must be static\" whenever I try to \nqualify an inner (and static) aspect as privileged, no matter what the \nenclosing type is (aspect, interface or class).\nI was using j2sdk1.4.0_02, AspectJ 1.1, eclipse 2.1 (with AJDT 1.1.3).\nTest case:\n------------------\nBASE CLASS:\npublic class Capsule {\n   private int hidden;\n   public int visible;\n   public Capsule(int priv, int pub) {\n      hidden = priv;\n      visible = pub;\n   }\n   public void doSomething() {\n      System.out.println(\"\"\" + hidden + \", \" + visible + \"\"\");\n   }\n   public static void main(String[] args) {\n      Capsule capsule = new Capsule(1, 1);\n      capsule.doSomething();\n   }\n}\n------------------\nASPECT:\npublic aspect Outer {\n   static //privileged <== JUST TRY TO UNCOMMENT THIS!\n   aspect Inner {\n      pointcut call2doSomething(Capsule capsule):\n         call(void Capsule.doSomething())\n         && target(capsule);\n      before(Capsule capsule): call2doSomething(capsule) {\n         capsule.visible++;\n         //capsule.hidden++;\n      }\n   }\n}\n------------------\nINTERFACE:\npublic interface Marker {\n   static //privileged <== JUST TRY TO UNCOMMENT THIS!\n   aspect Inner {\n      pointcut call2doSomething(Capsule capsule):\n         call(void Capsule.doSomething())\n         && target(capsule);\n      before(Capsule capsule): call2doSomething(capsule) {\n         capsule.visible++;\n         //capsule.hidden++;\n      }\n   }\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs/PrivilegedParsing.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/AjParser.java"
      ]
    }
  },
  "8cea30f": {
    "bug_report": {
      "summary": "Bug 113861  [generics] field-get problems when generic field is used.",
      "description": "Hi, \n\nWhen i'm compiling the following example, i'm getting this errors:\n\nTestAspect.aj:21 [error] incompatible return type applying to field-get\n(java.util.Set com.mprv.secsph.Test.intsSet)\n\nTest.java:18 [error] incompatible return type applying to field-get\n(java.util.Set com.mprv.secsph.Test.intsSet)\n\nHere is the example\n-------------------\n\nJava Code:\n\npackage com;\n\npublic class Test {\n\n\tSet<Integer> intsSet;\n\n\tpublic Set<Integer> foo() {\n18:         return intsSet;\n\t}\n}\n\nAspect:\n\npublic privileged aspect TestAspect {\n    pointcut gettingMember(Test t) :\n                target(t) &&\n                get(!public Set<Integer> com.*.*) &&\n                !within(TestAspect);\n\n21: Set<Integer> around(Test t) : gettingMemberCollection(t)  {\n        Set s =  proceed(t);\n        return s;\n    }\n}\n\nI've tried many kinds of workarounds, and the only thing which worked, is \ndefining the member field without using generics (regular Set) ... \n\nOne more disturbing is, that this fiture worked(!) in M2 release. \n\nThis is an example of the functionality that worked in my project (with M2), \nbut now, also reports the same error:\n\nJava code is the same, Aspect is:\n\npublic privileged aspect TestAspect {\n    pointcut gettingMember(Test t) :\n                target(t) &&\n                get(!public Set com.*.*) &&\n                !within(TestAspect);\n\n    Set around(Test t) : gettingMemberCollection(t)  {\n        Set s =  proceed(t);\n        return s;\n    }\n}\n\nIs it a bug? Or am i doing something wrong?\n\nThanks!\nMisha."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/MemberImpl.java",
        "tests/bugs150/pr113861/TestAspect.java",
        "weaver/src/org/aspectj/weaver/Member.java",
        "tests/bugs150/pr113861/Test.java",
        "weaver/src/org/aspectj/weaver/Advice.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "6e6658a": {
    "bug_report": {
      "summary": "Bug 101411  SerialVersionUID handling",
      "description": "from emails - needs a decision\n---------------\nHi Andy\n\nis there a way for the weaver to add to weaved classes the serial ver\nuid field based on the pre-weaved bytecode computation.\nRight now it issues lint warning when a Serializable class without\nserial ver uid is encountered and due to evil #75442 this is very\nannoying for LTW.\nA first step would be to at least deal with that when we had the\nperObbjectTypeMunger (then should not change any kind previous stuff).\n\nAlex\n\n------------\nAndy,\n\nGenerating the suid sounds like a nice idea but the code the JVM used is\nprivate inside ObjectStreamClass. Also we need to take care with ITD fields\nto ensure correct behaviour when sending and receiving from non-woven\nclasses. Basically the programmer needs to be engaged, it only affects\nserializable classes and in 1.5 there is a warning if you don't declare the\nfield so there is a strong hint to the programmer to solve the problem. For\nLTW we should make an enhancement to allow the user to configure Lint and\nother things. For example they may or may not be interested in advice not\nmatching.\n\nMatthew Webster\n\n----------------------\n\n\nAlex,\n\nWe should make a distinction between benign changes to suid and those that\naffect members. Generating suid when we add a static initializer (to\nsupport thisJoinPoint or the staticinitialization join point), accessor\nmethods for privileged aspects or transient per-fields is OK. Doing for\nITDs is more problematic.\n\nMatthew Webster"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "tests/features151/serialveruid/AnAspect.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "tests/features151/serialveruid/BigHorribleClass.java",
        "bcel-builder/src/org/aspectj/apache/bcel/generic/ClassGen.java",
        "tests/src/org/aspectj/systemtest/ajc151/AllTestsAspectJ151.java",
        "tests/features151/serialveruid/Basic.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java",
        "tests/src/org/aspectj/systemtest/ajc151/SerialVersionUIDTests.java",
        "weaver/src/org/aspectj/weaver/Lint.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "1da1f7c": {
    "bug_report": {
      "summary": "Bug 261808  iajc-Ant-Task fails \"type already defined\"",
      "description": null
    },
    "commit": {
      "diff": [
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"
      ]
    }
  },
  "9ebfc84": {
    "bug_report": {
      "summary": "Bug 62227  Load Time Weaving aborts on any kind of warning (declare/xlint)",
      "description": "The message handler in the weaving adapter for load time weaving says:\n\npublic boolean handleMessage(IMessage message) throws AbortException {\n  if (!isIgnoring(message.getKind())) {\n    if (verbose) System.err.println(message.getMessage());\n    throw new AbortException(message);\n  }\n  return true;\n}\n\nThis means for warnings it goes bang.  So, even a declare warning that is \nmeant to tell the user something informational during a LTW will cause the \ncode to blow up.  The fix is straightforward and simply to log warning \nmessages and only fail for error messages.  I am waiting for a testcase from \nMatthew before checking in the fix."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java",
        "weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java",
        "weaver/src/org/aspectj/weaver/WeavingURLClassLoader.java"
      ]
    }
  },
  "85a827a": {
    "bug_report": {
      "summary": "Bug 29769  Ajde does not support new AspectJ 1.1 compiler options",
      "description": "The org.aspectj.ajde.BuildOptionsAdapter interface does not yet support the new \nAspectJ 1.1 compiler options. These need to be added to the interface, any old \nor renamed options deprecated, and then the correct processing needs to happen \nwithin Ajde to pass these options to the compiler.\n\nThis enhancement is needed by the various IDE projects for there AspectJ 1.1\nsupport."
    },
    "commit": {
      "diff": [
        "ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java",
        "ajde/src/org/aspectj/ajde/ui/internal/AjcBuildOptions.java",
        "ajde/src/org/aspectj/ajde/BuildOptionsAdapter.java",
        "ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java",
        "ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java",
        "ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java",
        "ajde/testsrc/org/aspectj/ajde/BuildOptionsTest.java",
        "ajde/testsrc/org/aspectj/ajde/StructureModelTest.java",
        "ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java",
        "ajde/testdata/examples/figures-coverage/figures/Figure.java",
        "ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "ajde/testsrc/org/aspectj/ajde/AjdeTests.java",
        "ajde/testsrc/org/aspectj/ajde/NullIdeManager.java",
        "ajde/src/org/aspectj/ajde/internal/AspectJBuildManager.java"
      ]
    }
  },
  "df46c6f": {
    "bug_report": {
      "summary": "Bug 99125  Repetitive method name/signature in class file",
      "description": "This is what the VM sais:\n\njava.lang.ClassFormatError: Repetitive method name/signature in class file com/\nnetvisor/metadata_view/ComponentFactory\n        at java.lang.ClassLoader.defineClass1(Native Method)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:\n124)\n        at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n        at java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\n\nAnd this is why: I've got an interface (ComponentFactory) and an aspect that \nadds various ITD methods trough that interface. I've added some methods to both \nthe interface and the aspect, some other methods are only added trough the \naspect. (The situation is a bit more complex, I've got a base interface/aspect \nwith these two methods and the subaspects implement the problematic two methods\n.)\n\nAnd those methods that are both in the interface and the aspect are the ones \nthat get duplicated in the interface class file.\n\nThis is working fine in the old CVS branch (1.2.*).\n\nHope it helps, good luck!"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/pr99125/p/J.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "tests/bugs150/pr99125/p/I.java"
      ]
    }
  },
  "53284da": {
    "bug_report": {
      "summary": "Bug 112458  Property Editor still shows the properties of layout items when switch to Master page viewer.",
      "description": "Description:\nProperty Editor still shows the properties of layout items when switch to \nMaster page viewer.\n\nSteps to reproduce:\n1. New a report and insert a label.\n2. Select the label.(Property Editor shows label's properties)\n3. Switch to Master Page.\n\nExpected result:\nProperty Editor changs to reflect Master Page properties.\n\nActual result:\nIt still showed the label's properties. This will confuse customers if they \nthought it as Master Page Editor and set properties without click Master Page \nviewer at first."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/TypeFactory.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "tests/src/org/aspectj/systemtest/AllTests15.java",
        "tests/src/org/aspectj/systemtest/ajc151/AllTestsAspectJ151.java",
        "tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java"
      ]
    }
  },
  "a675b65": {
    "bug_report": {
      "summary": "Bug 81846  EclipseAdapterUtils.java:83",
      "description": "java.lang.ArrayIndexOutOfBoundsException: 3\n\nUnfortunately I can't provide much more information, please see the attached \ncompiler dump."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"
      ]
    }
  },
  "f236927": {
    "bug_report": {
      "summary": "Bug 34951  NPE compiling without aspectjrt.jar",
      "description": "Compiling spacewar without specifying aspectjrt.jar on the classpath causes a \nNPE.  Expected an error message \"aspectjrt.jar required\".\n\nSteps to reproduce\n1) install latest\n2) cd doc/examples\n3) java -jar ../../lib/aspectjtools.jar -verbose @spacewar/debug.lst\nRESULT:NPE in attached log"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "97520cf": {
    "bug_report": {
      "summary": "Bug 101407  NullPointerException when selecting Save As in top menu",
      "description": "The Steps of Reproduce:\n1. Open BIRT\n2. New a project\n3. In top menu of File, click New -> Report to create a report\n4. Drag a table element from Palette into the report of Layout view\n5. Save the report\n6. Drag mouse to select two cells in the table\n7. Select the report in Navigator view\n8. In the top menu, select Save As... \n9. In the Save As pop up dialog window, change the file name in the File name \nfield, then click OK button\n\n\nExpected Result:\n There is no error to click OK button\n\nActual Result:\n Error window pops up and the error log as follows:\njava.lang.NullPointerException\n\tat org.eclipse.gef.editparts.AbstractEditPart.getRoot\n(AbstractEditPart.java:587)\n\tat org.eclipse.gef.editparts.AbstractEditPart.getRoot\n(AbstractEditPart.java:587)\n\tat org.eclipse.gef.editparts.AbstractEditPart.getViewer\n(AbstractEditPart.java:637)\n\tat \norg.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableU\ntil.getSelectionCells(TableUtil.java:258)\n\tat \norg.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableE\nditPart.canMerge(TableEditPart.java:1244)\n\tat \norg.eclipse.birt.report.designer.internal.ui.editors.schematic.actions.MergeAct\nion.calculateEnabled(MergeAction.java:51)\n\tat org.eclipse.gef.ui.actions.WorkbenchPartAction.isEnabled\n(WorkbenchPartAction.java:111)\n\tat org.eclipse.ui.actions.RetargetAction.setActionHandler\n(RetargetAction.java:249)\n\tat org.eclipse.ui.actions.RetargetAction.partActivated\n(RetargetAction.java:144)\n\tat org.eclipse.ui.internal.PartListenerList$1.run\n(PartListenerList.java:49)\n\tat org.eclipse.core.internal.runtime.InternalPlatform.run\n(InternalPlatform.java:616)\n\tat org.eclipse.core.runtime.Platform.run(Platform.java:747)\n\tat org.eclipse.ui.internal.PartListenerList.firePartActivated\n(PartListenerList.java:47)\n\tat org.eclipse.ui.internal.WorkbenchPage.firePartActivated\n(WorkbenchPage.java:1370)\n\tat org.eclipse.ui.internal.WorkbenchPage.setActivePart\n(WorkbenchPage.java:2738)\n\tat org.eclipse.ui.internal.WorkbenchPage.requestActivation\n(WorkbenchPage.java:2415)\n\tat org.eclipse.ui.internal.PartPane.requestActivation\n(PartPane.java:304)\n\tat org.eclipse.ui.internal.EditorPane.requestActivation\n(EditorPane.java:127)\n\tat org.eclipse.ui.internal.PartPane.handleEvent(PartPane.java:284)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:796)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:820)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:801)\n\tat org.eclipse.swt.widgets.Shell.setActiveControl(Shell.java:935)\n\tat org.eclipse.swt.widgets.Control.sendFocusEvent(Control.java:1768)\n\tat org.eclipse.swt.widgets.Control.WM_SETFOCUS(Control.java:4139)\n\tat org.eclipse.swt.widgets.Canvas.WM_SETFOCUS(Canvas.java:239)\n\tat org.eclipse.swt.widgets.Control.windowProc(Control.java:3032)\n\tat org.eclipse.swt.widgets.Display.windowProc(Display.java:3338)\n\tat org.eclipse.swt.internal.win32.OS.SetFocus(Native Method)\n\tat org.eclipse.swt.widgets.Control.forceFocus(Control.java:607)\n\tat org.eclipse.swt.widgets.Control.setFocus(Control.java:2054)\n\tat org.eclipse.swt.widgets.Composite.setFocus(Composite.java:447)\n\tat org.eclipse.gef.ui.parts.GraphicalEditor.setFocus\n(GraphicalEditor.java:346)\n\tat org.eclipse.ui.part.MultiPageEditorPart.setFocus\n(MultiPageEditorPart.java:545)\n\tat org.eclipse.ui.part.MultiPageEditorPart.setFocus\n(MultiPageEditorPart.java:519)\n\tat org.eclipse.ui.part.MultiPageEditorPart.setFocus\n(MultiPageEditorPart.java:545)\n\tat org.eclipse.ui.part.MultiPageEditorPart.setFocus\n(MultiPageEditorPart.java:519)\n\tat org.eclipse.ui.part.MultiPageEditorPart.pageChange\n(MultiPageEditorPart.java:433)\n\tat org.eclipse.birt.report.designer.ui.editors.ReportEditor.pageChange\n(ReportEditor.java:1179)\n\tat \norg.eclipse.birt.report.designer.ui.editors.ReportEditor.rebuildReportDesign\n(ReportEditor.java:584)\n\tat org.eclipse.birt.report.designer.ui.editors.ReportEditor.setInput\n(ReportEditor.java:547)\n\tat \norg.eclipse.birt.report.designer.ui.editors.ReportEditor.performSaveAs\n(ReportEditor.java:870)\n\tat org.eclipse.birt.report.designer.ui.editors.ReportEditor.doSaveAs\n(ReportEditor.java:812)\n\tat org.eclipse.ui.internal.SaveAsAction.run(SaveAsAction.java:64)\n\tat org.eclipse.jface.action.Action.runWithEvent(Action.java:881)\n\tat \norg.eclipse.jface.action.ActionContributionItem.handleWidgetSelection\n(ActionContributionItem.java:915)\n\tat org.eclipse.jface.action.ActionContributionItem.access$2\n(ActionContributionItem.java:866)\n\tat org.eclipse.jface.action.ActionContributionItem$7.handleEvent\n(ActionContributionItem.java:785)\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:796)\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2772)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2431)\n\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1377)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1348)\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench\n(Workbench.java:254)\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:141)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run\n(IDEApplication.java:96)\n\tat org.eclipse.core.internal.runtime.PlatformActivator$1.run\n(PlatformActivator.java:335)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:273)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run\n(EclipseStarter.java:129)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat org.eclipse.core.launcher.Main.basicRun(Main.java:185)\n\tat org.eclipse.core.launcher.Main.run(Main.java:704)\n\tat org.eclipse.core.launcher.Main.main(Main.java:688)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LocalVariableTag.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "bcel-builder/src/org/aspectj/apache/bcel/generic/LocalVariableGen.java"
      ]
    }
  },
  "a9ef1b0": {
    "bug_report": {
      "summary": "Bug 122417  [waiting-on-website-doc-refresh] Typo in org.aspectj.lang.JoinPoint String constant symbolic name",
      "description": "Methinks the  n_a_m_e  of the preinitialization constant is misspelled\n\nJoinPoint.PREINTIALIZATION    is lacking an \"I\" between the N and the T\nJoinPoint.PREINITIALIZATION   might be the correct version\n\nNote: The value of the constant (\"preinitialization\") is spelled correctly.\n\nSorry for the inconvenience.\nHarald"
    },
    "commit": {
      "diff": [
        "runtime/src/org/aspectj/lang/JoinPoint.java",
        "weaver/src/org/aspectj/weaver/Shadow.java"
      ]
    }
  },
  "6d2abc1": {
    "bug_report": {
      "summary": "Bug 42515  NPE When compiling intertype declaration",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs/caseSensitivity/uniqueId/Numbered.java"
      ]
    }
  },
  "b29f839": {
    "bug_report": {
      "summary": "Bug 288198  LangUtils JVM version detection cannot handle Java 7",
      "description": "User-Agent:       Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-GB; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2\nBuild Identifier: 1.6.4\n\nThe JVM detection in LangUtils is currently unable to handle Java7, whilst this is naturally an unreleased version of the JVM, the fix is trivial.\n\nReproducible: Always\n\nSteps to Reproduce:\nAttempt to use the LangUtils java version support on java7"
    },
    "commit": {
      "diff": [
        "util/src/org/aspectj/util/LangUtil.java"
      ]
    }
  },
  "1e502f5": {
    "bug_report": {
      "summary": "Bug 36803  BCException thrown by AspectJ 1.1rc1",
      "description": "[iajc] expected state: resolved got: concrete\n     [iajc] expected state: resolved got: concrete\n     [iajc] org.aspectj.weaver.BCException: expected state: resolved got: \nconcrete\n     [iajc]     at org.aspectj.weaver.patterns.Pointcut.assertState\n(Pointcut.java:236)\n     [iajc]     at org.aspectj.weaver.patterns.Pointcut.concretize\n(Pointcut.java:126)\n     [iajc]     at org.aspectj.weaver.patterns.CflowPointcut.concretize1\n(CflowPointcut.java:143)\n     [iajc]     at org.aspectj.weaver.patterns.NotPointcut.concretize1\n(NotPointcut.java:94)\n     [iajc]     at org.aspectj.weaver.patterns.AndPointcut.concretize1\n(AndPointcut.java:88)\n     [iajc]     at org.aspectj.weaver.patterns.ReferencePointcut.concretize1\n(ReferencePointcut.java:270)\n     [iajc]     at org.aspectj.weaver.patterns.AndPointcut.concretize1\n(AndPointcut.java:88)\n     [iajc]     at org.aspectj.weaver.patterns.ReferencePointcut.concretize1\n(ReferencePointcut.java:270)\n     [iajc]     at org.aspectj.weaver.patterns.Pointcut.concretize\n(Pointcut.java:127)\n     [iajc]     at org.aspectj.weaver.patterns.Pointcut.concretize\n(Pointcut.java:120)\n     [iajc]     at org.aspectj.weaver.Advice.concretize(Advice.java:207)\n     [iajc]     at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger\n(CrosscuttingMembers.java:78)\n     [iajc]     at org.aspectj.weaver.CrosscuttingMembers.addShadowMungers\n(CrosscuttingMembers.java:72)\n     [iajc]     at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers\n(ResolvedTypeX.java:328)\n     [iajc]     at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect\n(CrosscuttingMembersSet.java:54)\n     [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave\n(BcelWeaver.java:164)\n     [iajc]     at org.aspectj.weaver.bcel.BcelWeaver.weave\n(BcelWeaver.java:214)\n     [iajc]     at \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFile\ns(AjBuildManager.java:394)\n     [iajc]     at \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:149)\n     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand\n(AjdtCommand.java:55)\n     [iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:216)\n     [iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:155)\n     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.execute\n(AjcTask.java:646)\n     [iajc]     at org.apache.tools.ant.UnknownElement.execute\n(UnknownElement.java:193)\n     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:341)\n     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:309)\n     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:336)\n     [iajc]     at org.apache.tools.ant.Project.executeTarget\n(Project.java:1339)\n     [iajc]     at org.apache.tools.ant.Project.executeTargets\n(Project.java:1255)\n     [iajc]     at org.apache.tools.ant.Main.runBuild(Main.java:609)\n     [iajc]     at org.apache.tools.ant.Main.start(Main.java:196)\n     [iajc]     at org.apache.tools.ant.Main.main(Main.java:235)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java",
        "tests/bugs/CflowConcrete.java",
        "weaver/src/org/aspectj/weaver/patterns/Pointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"
      ]
    }
  },
  "6eb77c5": {
    "bug_report": {
      "summary": "Bug 117614  ajc crashes on common-logging-1.0.4.jar",
      "description": "--- Dump Properties ---\nDump file: ajcore.20051122.152749.326.txt\nDump reason: org.aspectj.weaver.BCException\nDump on exception: true\nDump at exit condition: abort\n---- Exception Information ---\norg.aspectj.weaver.BCException: bad resolve of void org.apache.log4j.Category.log(java.lang.String, org.apache.log4j.Level, java.lang.Object, java.lang.Throwable)\n\tat org.aspectj.weaver.World.getModifiers(World.java:216)\n\tat org.aspectj.weaver.Member.getModifiers(Member.java:406)\n\tat org.aspectj.weaver.patterns.KindedPointcut.warnOnConfusingSig(KindedPointcut.java:109)\n\tat org.aspectj.weaver.patterns.KindedPointcut.match(KindedPointcut.java:69)\n\tat org.aspectj.weaver.patterns.OrPointcut.match(OrPointcut.java:44)\n\tat org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:43)\n\tat org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:43)\n\tat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:62)\n\tat org.aspectj.weaver.Advice.match(Advice.java:91)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1126)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:1115)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:987)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:827)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:348)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:83)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:742)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:707)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:634)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:577)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:243)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:118)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:383)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:680)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:168)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:102)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:109)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:291)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "weaver/src/org/aspectj/weaver/Lint.java",
        "weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"
      ]
    }
  },
  "387c3ac": {
    "bug_report": {
      "summary": "Bug 152979  Optimization: Reference Use and URL Caching in ClassLoader Repository",
      "description": "I have found that a lot of memory can get pinned by the BCEL ClassLoaderRepository. For example, on a test configuration of Glassbox with WebLogic over 40 megabytes were pinned in memory due to this loader. (*)\n\nI also notice that some of the time spent with loading and parsing redundant classes for shared weaving configuration could be reduced by having a global cache of bytes for URL's instead, i.e., the ClassLoaderRepository is local to a loader, so even if the same class on disk is resolved multiple times in different loaders, it isn't read from cache. This latter issue will be reduced if loading types from a parent loader use reflection delegates instead but BCEL still has to be used for aspects on <1.5 VM's... \n\nThe attached patch has some metrics in it to measure what's happening and it also uses SoftReferences to cache without pinning the reference types and uses a two-step look up process to maintain a global URL cache. When I run this on WebLogic 9.2 with Glassbox and view their admin console and some smaller apps I get this output:\n\nBCEL repository total load time: 7733 ms, in url: 6029 ms for 1427 url cache hits = 1683 missEvicted = 0 missUrlEvicted= 0 all misses = 1427, loader hits = 0\n\nOn Tomcat 5.5 with some different sample apps:\nBCEL repository total load time: 4945 ms, in url: 4319 ms for 636 url cache hits = 548 missEvicted = 0 missUrlEvicted= 190 all misses= 446, loader hits = 3\n\nSo at least in my configuration the URL-based cache is quite effective (with almost a 50% hit rate) whereas the loader-based cache provides little value. From what I've seen, it's worth considering not even using the loader-based BCEL cache at all but others may have configurations where it helps.\n\n(*) This test was on a development build of AspectJ which I had modified so that the LTWWorld evicts classes after loading"
    },
    "commit": {
      "diff": [
        "bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/AllTests.java",
        "bcel-builder/src/org/aspectj/apache/bcel/util/ClassLoaderRepository.java",
        "bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/ClassloaderRepositoryTest.java"
      ]
    }
  },
  "28f8c69": {
    "bug_report": {
      "summary": "Bug 124654  Capture method annotation in generic aspect does not compile",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs151/pr124654/GenericAnnotation.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java",
        "tests/bugs151/pr124654/TestSubAspect.java"
      ]
    }
  },
  "0a8dbde": {
    "bug_report": {
      "summary": "Bug 36564  Internal compiler error",
      "description": "Eclipse: 2.1.0, 200302211557\nAspectJ: 1.1.1\n\n\nI get the following internal error when using \"thisJoinPoint.getStaticPart()\" \nin around advice at a call joinpoit (source below). Using just \"thisJoinPoint\" \nis fine.\n\njava.lang.NullPointerException\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode\n(MessageSend.java:40)\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode\n(MessageSend.java:44)\n\tat \norg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analyseCode\n(AbstractMethodDeclaration.java:106)\n\tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode\n(TypeDeclaration.java:445)\n\tat \norg.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode\n(CompilationUnitDeclaration.java:76)\n\tat org.eclipse.jdt.internal.compiler.Compiler.process\n(Compiler.java:539)\n\tat org.aspectj.ajdt.internal.compiler.AjCompiler.process\n(AjCompiler.java:65)\n\tat org.eclipse.jdt.internal.compiler.Compiler.compile\n(Compiler.java:340)\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile\n(AbstractImageBuilder.java:232)\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile\n(AbstractImageBuilder.java:171)\n\tat \norg.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.run\n(AjBuildManager.java:655)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:139)\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile\n(CompilerAdapter.java:92)\n\tat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run\n(AspectJBuildManager.java:213)\n\tExceptions.java\tAspectJ Bugs/src/compiler\t\n\nSource:\n\npackage compiler;\n\nimport java.io.*;\n\n/**\n * @author websterm\n *\n * To change this generated comment go to \n * Window>Preferences>Java>Code Generation>Code and Comments\n */\npublic class Test {\n\n\tpublic static void main(String[] args) throws Exception{\n\t\tFileInputStream in = new FileInputStream(\"test\");\n\t}\n}\n\n/*\n * Created on 14-Apr-03\n *\n * To change this generated comment go to \n * Window>Preferences>Java>Code Generation>Code and Comments\n */\npackage compiler;\n\nimport java.io.*;\n\nimport org.aspectj.lang.*;\n\n/**\n * @author websterm\n *\n * To change this generated comment go to \n * Window>Preferences>Java>Code Generation>Code and Comments\n */\npublic aspect Exceptions {\n\t\n\tpointcut exceptionMethods () :\n\t\tcall(* java.io.*.*(..) throws IOException);\n\t\t\n\tObject around () throws IOException : exceptionMethods() && !within\n(Exceptions) {\n\t\tObject obj = proceed();\n\t\tSystem.out.println(thisJoinPoint.getStaticPart());\n\t\treturn obj;\t\n\t}\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs/tjpStaticPart/Test.java",
        "tests/bugs/tjpStaticPart/Exceptions.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java"
      ]
    }
  },
  "41f1f3a": {
    "bug_report": {
      "summary": "Bug 130837  Exception while trying to edit Annotation based Aspect Class  (normal Java class)",
      "description": "java.lang.NullPointerException\nat org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.buildFormalAdviceBindingsFrom(ValidateAtAspectJAnnotationsVisitor.java:417)\nat org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.resolveAndSetPointcut(ValidateAtAspectJAnnotationsVisitor.java:364)\nat org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.validateAdvice(ValidateAtAspectJAnnotationsVisitor.java:336)\nat org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.visit(ValidateAtAspectJAnnotationsVisitor.java:186)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing(AjCompilerAdapter.java:154)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_aspectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d(CompilerAdapter.aj:101)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:517)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:824)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:234)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:189)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:164)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java"
      ]
    }
  },
  "f631ad6": {
    "bug_report": {
      "summary": "Bug 323417  Sometimes StackOverflow is got while weaving",
      "description": "Build Identifier: 1.6.10\n\nWhile weaving LifeRay 6.0.5 over tomcat 6.0.26 sometimes the next exceptions appear:\n\njava.lang.StackOverflowError\n        at java.lang.String.indexOf(String.java:1521)\n        at org.aspectj.weaver.TypeFactory.createTypeFromSignature(TypeFactory.java:199)\n        at org.aspectj.weaver.UnresolvedType.forSignature(UnresolvedType.java:375)\n        at org.aspectj.weaver.UnresolvedType.getRawType(UnresolvedType.java:533)\n        at org.aspectj.weaver.ResolvedType.getRawType(ResolvedType.java:2400)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:430)\n        at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)\n...\n\n\n\n\nReproducible: Sometimes"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/World.java"
      ]
    }
  },
  "85fd25d": {
    "bug_report": {
      "summary": "Bug 321641  No way to exclude Proxool classes although excluded from AOP. Causing Veryfy error.",
      "description": "Build Identifier: 20100218-1602\n\nFor aspectJ 1.6.7 the setup works, however exactly the same setup but changing the aspectJ version to 1.6.8 or 1.6.9 derive to the same error: a piece of code excluded from the aop.xml is woven causing a Verify Error.\n\nWe are using Proxool, proxy setup which in fact uses CGLIB to create a EnhancerProxy class. In order to avoid VerifyError exceptions the Proxool classes are excluded from aop.xml exactly in the same way the CGLIB workarround is commented in the aspectJ FAQ:\n\n\t\t<exclude within=\"*..*Proxool*\"/>\n\n\nThis is the error we got when we upgrade our 1.6.7 aspejctweaver.jar to 1.6.8. The same is got when using 1.6.9:\n\njvm 3    | 2010/08/03 16:42:53 | java.lang.VerifyError: (class: oracle/jdbc/internal/OracleConnection$$EnhancerByProxool$$7f6320a8, method: getTdoCState signature: (Ljava/lang/String;Ljava/lang/String;)J) Inconsistent stack height 1 != 0\njvm 3    | 2010/08/03 16:42:53 | \tat java.lang.Class.getDeclaredMethods0(Native Method)\njvm 3    | 2010/08/03 16:42:53 | \tat java.lang.Class.privateGetDeclaredMethods(Class.java:2427)\njvm 3    | 2010/08/03 16:42:53 | \tat java.lang.Class.getDeclaredMethod(Class.java:1935)\njvm 3    | 2010/08/03 16:42:53 | \tat org.logicalcobwebs.cglib.proxy.Enhancer.getCallbacksSetter(Enhancer.java:627)\njvm 3    | 2010/08/03 16:42:53 | \tat org.logicalcobwebs.cglib.proxy.Enhancer.setCallbacksHelper(Enhancer.java:615)\njvm 3    | 2010/08/03 16:42:53 | \tat org.logicalcobwebs.cglib.proxy.Enhancer.setThreadCallbacks(Enhancer.java:609)\njvm 3    | 2010/08/03 16:42:53 | \tat org.logicalcobwebs.cglib.proxy.Enhancer.createUsingReflection(Enhancer.java:631)\njvm 3    | 2010/08/03 16:42:53 | \tat org.logicalcobwebs.cglib.proxy.Enhancer.firstInstance(Enhancer.java:538)\njvm 3    | 2010/08/03 16:42:53 | \tat org.logicalcobwebs.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:225)\njvm 3    | 2010/08/03 16:42:53 | \tat org.logicalcobwebs.cglib.proxy.Enhancer.createHelper(Enhancer.java:377)\njvm 3    | 2010/08/03 16:42:53 | \tat org.logicalcobwebs.cglib.proxy.Enhancer.create(Enhancer.java:285)\n....\n\nAs far as the Verify Error is got while deploying one of the applications that run on the serve we are no able to use the new versions of aspectJ because the application is not properly started up.\n\nThank you very much in advance,\n\nBest regards.\n\nReproducible: Always\n\nSteps to Reproduce:\n1.Exclude Proxool classes from aop.xml using aspectj 1.6.7. It works\n2.Upgrade to 1.6.8: it does not work.\n3.Upgrade to 1.6.9: it does not work."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java",
        "loadtime/testsrc/testdata/MessageService$$EnhancerByCGLIB$$6dd4e683.java"
      ]
    }
  },
  "061395c": {
    "bug_report": {
      "summary": "Bug 44191  Need better error message for \"can't find type\"",
      "description": "I have experienced situations where IAJC outputs a message like this at the \nend of compilation.\n\n    [iajc] can't find type org.xxx.SomeTest\n\nIn my case this was one time highly confusing since I did not expect the class \nin question to be referred anywhere in the project (I have to date still not \nlocated the reference). \n\nFor such cases, it would be extremely nice if the error message would display \nWHY it need the class (i.e. the name of the refering class(es) or aspect(es) \npossibly with a reasonable cutoff as there is seldom need to list all \nreferals). So I would like a message like this:\n\n    [iajc] can't find type org.xxx.SomeTest referred by \norg.yyy.SomeClass,org.yy.SomeOtherClass ..."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareParents.java"
      ]
    }
  },
  "14a6eac": {
    "bug_report": {
      "summary": "Bug 359332  NPE in AjBuildManager.java:528 after non-Java/AJ file was renamed",
      "description": "Build Identifier: \n\nUpon using Eclipse's \"Rename Resource\" dialog to rename my project's \"src/main/resources/META-INF/spring/email.properties\" file to \"scheduler.properties\" in the same directory, Eclipse displayed the \"AspectJ Internal Compiler Error\" dialog with this stack trace: \n\njava.io.FileNotFoundException\nat java.io.FileInputStream.open(Native Method)\nat java.io.FileInputStream.<init>(FileInputStream.java:120)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile(AjBuildManager.java:528)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination(AjBuildManager.java:466)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:363)\n ... e error: FileNotFoundException thrown: /Users/aswan/projects/foo/src/main/resources/META-INF/spring/email.properties (No such file or directory)\n\nReproducible: Couldn't Reproduce\n\nSteps to Reproduce:\nN/A"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "e6cb508": {
    "bug_report": {
      "summary": "Bug 407017  Stack trace being printed, but want to mute it",
      "description": "In org.aspectj.ajdt.internal.core.builder.AjState.getDelegate(ReferenceType), there is a call to printStackTrace().  On the AJDT build server, this exception is being printed and causing some noise.  Can you replace that call with a call to the IMessageHandler for the build?"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"
      ]
    }
  },
  "fe049ea": {
    "bug_report": {
      "summary": "Bug 318397  Caching in EclipseSourceType is too aggressive",
      "description": "In fixing a recent Roo related issue (where annotations are resolved too early, before declare parents are done) a cache was introduced into EclipseSourceType (see ensureAnnotationTypesResolved()).  The cache needs to be cleared if the set of annotation declarations changes - this can occur even after parsing because declare annotation can change them."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"
      ]
    }
  },
  "551b446": {
    "bug_report": {
      "summary": "Bug 121395  invalid aspectj path throws filenotfoundexception",
      "description": "An invalid aspectj path (missing jar file) throws an filenotfoundexception:\n\njava.io.FileNotFoundException\nat java.io.FileInputStream.open(Native Method)\nat java.io.FileInputStream.<init>(FileInputStream.java:106)\nat org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromJarFile(BcelWeaver.java:202)\nat org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile(BcelWeaver.java:192)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld(AjBuildManager.java:623)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:209)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nFileNotFoundException thrown: /Users/frankstolle/Documents/workspace/lib_aspects/deploy/lib_aspects.jar (No such file or directory)\n\n\n\nshould generate an problem entry in the problems-list."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java"
      ]
    }
  },
  "3707411": {
    "bug_report": {
      "summary": "Bug 68494  ajdoc does not support .aj files",
      "description": "In addition to accepting .java source files ajdoc needs to accept .aj files."
    },
    "commit": {
      "diff": [
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java",
        "ajdoc/testdata/coverage/foo/UseThisAspectForLinkCheck.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/Main.java"
      ]
    }
  },
  "df49b5c": {
    "bug_report": {
      "summary": "Bug 238666  Allow the ltw configuration to be directly specified rather than discovered on the classpath",
      "description": "Currently the property:\n\norg.aspectj.weaver.loadtime.configuration\n\ncan be set to name the ltw configuration file that the loadtime weaver searches for.  The default value is:\n\nMETA-INF/aop.xml;META-INF/aop-ajc.xml;org/aspectj/aop.xml\n\nand the weaver searches the classpath for .xml files matching any of those three possibilities.\n\nA typical override might therefore be:\n\n-Dorg.aspectj.weaver.loadtime.configuration=META-INF/overhere.xml\n\nhowever the weaver will still only look for it on the classpath.\n\nIn some environments the ltw user may just want to name the aop config file to use, and not be forced to include it on the classpath.\n\nWe have had the suggestion to make it protocol based, which i like, but for now I would just allow support for 'file:'.  If file: is the prefix, it will be treated as direct reference to the file to use, otherwise it will be searched for.\n\nThis change would mean all existing uses of the override will be fine, but new users will be all to exploit the flexibility of naming their configuration directly."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"
      ]
    }
  },
  "026b272": {
    "bug_report": {
      "summary": "Bug 39993  ajc stack trace on declaring hashcode() method in aspect",
      "description": "From an email sent to the user's list 6/26/2003:\n------------------------------------------\najc 1.1 NPE when an aspect declares hashcode() as follows:\n\n     interface Identifiable {\n         void setId(Id id);\n         Id getId();\n     }\n \n     aspect IdentifiableAspect {\n         private Id Identifiable.id = null;\n         public Id Identifiable.getId() {\n \t\treturn this.id;\n \t  }\n         public void Identifiable.setId(Id id) {\n             this.id = id;\n         }\n \n         public int Identifiable.hashCode() {\n             return (this.getId() == null)\n                 ? super.hashCode()\n                 : this.getId().hashCode();\n         }\n     }\n\nA workaround for callers the compiler controls is to replace the declaration\nwith around advice:\n\n     int around(Identifiable i): target(i)\n         && call(public int hashCode())\n     {\n         return (i.getId() == null)\n             ? proceed(i)\n             : i.getId().hashCode();\n     }"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperReference.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "tests/bugs/MultipleSuperCf.java",
        "tests/bugs/OverridingInterfaceObjectMethod.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java"
      ]
    }
  },
  "573741c": {
    "bug_report": {
      "summary": "Bug 64331  java.lang.NullPointerException  in WeaverMessageHandler class",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs/abstractITDs/A.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java",
        "tests/bugs/abstractITDs/C.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"
      ]
    }
  },
  "6bdb87d": {
    "bug_report": {
      "summary": "Bug 224962  AjcTask doesn't work with Java6",
      "description": "Although support for Java6 has been added in the last milestone, you can't use it from ant because AjcTask doesn't recognize the \"source=1.6\" and \"target=1.6\" parameters.\n\nIt's easy to fix by modifying AjcTask.java and adding the missing constants:\n\n     static final String[] TARGET_INPUTS = new String [] \n    { \"1.1\", \"1.2\", \"1.3\", \"1.4\", \"1.5\", \"1.6\" };\n    static final String[] SOURCE_INPUTS = new String [] \n    { \"1.3\", \"1.4\", \"1.5\", \"1.6\" };\n    static final String[] COMPLIANCE_INPUTS = new String [] \n    { \"-1.3\", \"-1.4\", \"-1.5\", \"-1.6\" };\n\nThanks."
    },
    "commit": {
      "diff": [
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"
      ]
    }
  },
  "a75b7fa": {
    "bug_report": {
      "summary": "Bug 118781  [waiting-on-build]VerifyError in AspectJ",
      "description": "I'm fairly new to AspectJ, so this is probably not going to be well explained. I've started working on a project that was working fine. Then I added methods to classes that take a 2-dimensional string array parameter and suddenly I'm getting a VerifyError exception.\n\njava.lang.VerifyError: (class: com/drkw/cpds/obligor/facades/version_1_00/ObligorDetailFacade_1_00, method: searchForObligorSummariesByGroup_aroundBody24 signature: (Lcom/drkw/cpds/obligor/facades/version_1_00/ObligorDetailFacade_1_00;[[[Ljava/lang/String;Ljava/lang/String;LjavaA(&#130;\n\tat com.drkw.cpds.obligor.facades.version_1_00.obligor.ObligorManager.<clinit>(ObligorManager.java:48)\n\tat com.drkw.cpds.obligor.integration.version_1_00.obligor.GetObligorDetailsGroupingTest.testGetObligorDetailsUsingGroups(GetObligorDetailsGroupingTest.java:45)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)"
    },
    "commit": {
      "diff": [
        "tests/bugs150/pr118781/MyClass.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/pr118781/MyAspect.java",
        "tests/bugs150/pr118781/MyMain.java",
        "weaver/src/org/aspectj/weaver/World.java"
      ]
    }
  },
  "c9f311a": {
    "bug_report": {
      "summary": "Bug 147711  Add an option to generate aj-synthetics with true synthetic flag",
      "description": "In a number of cases tools are getting confused over generated aj members that are  \"aj-synthetic\" but not marked with the synthetic attribute (because in the past, this has upset other tools). The most recent example was a JAXB posting on the list - by having a perthis() clause in an aspect that matched a type with JAXB 2 annotations the user was no longer able to use JAXB. This is a serious issue, and will prevent the usage of JAXB 2 with any type into which we introduce properties as aj-synthetic members. The JAXB 2 solution to ignore such fields is to annotate them with @XmlTransient, but since the field does not exist in the user program they can't even do this!"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "weaver/src/org/aspectj/weaver/NameMangler.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "e7ac54f": {
    "bug_report": {
      "summary": "Bug 57430  exception printing",
      "description": "Exceptions thrown from the compiler used to be printed once, with the submit-bug\nheader.  Now they are printed twice, without and with the header.  True of CVS\nversion."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java"
      ]
    }
  },
  "55ebaa1": {
    "bug_report": {
      "summary": "Bug 384401  NPE when no pointcut in afterthrowing annotation style advice",
      "description": "From the mailing list:\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Aspect;\n\n@Aspect\npublic class X {\n//\t@AfterThrowing(pointcut=\"execution(* *(..))\",throwing = \"e\")\n\t@AfterThrowing(throwing = \"e\")\n    public void bizLoggerWithException(JoinPoint thisJoinPoint,Throwable e) {\n  //  .....// do some stuff\n    }\n\n}\n\nclass BizLoggable {}"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java",
        "tests/bugs171/pr384401/X.java",
        "tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java"
      ]
    }
  },
  "906c849": {
    "bug_report": {
      "summary": "Bug 222437  MANIFEST.MF copying is not always reliable",
      "description": "Sometimes an AJDT project gets into a state where it has a meta-inf/manifest.mf - and this file fails to make it out to the destination folder."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "f9eebd4": {
    "bug_report": {
      "summary": "Bug 84312  Finish implementation of *runtime* retention checking",
      "description": "See FIXME in BindingAnnotationTypePattern.resolveBinding() and\nEclipseSourceType.getAnnotationTypes()"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java",
        "weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java"
      ]
    }
  },
  "f90186c": {
    "bug_report": {
      "summary": "Bug 86789  annotations and \"circularity in declare precedence\"",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"
      ]
    }
  },
  "a4a9090": {
    "bug_report": {
      "summary": "Bug 77076  Weaving into jar fails if some of the referred classes are unavailable",
      "description": "I am trying to profile JDBC access in a Spring-based application.\nSince all the JDBC interaction is performed through Spring classes,\nI need to weave into spring.jar. However, many of the classes \nreferred by spring.jar aren't available to me (I am not using \nthe functionality implemented by many of the classes). When I \ntry to weave into spring.jar I get errors complaining that it \ncan't find types for those classes.\n\nI expected that ajc would ignore unknown classes unless weaving\nwould be affected by content/API of those classes.\n\nUsing jar files that refer to foreign classes that one may\nnever have/need is a common scenario. For example, spring.jar\nrefers to Velocity, Struts, JDO, Hibernate, Quartz classes;\nI am unlikely to use all of these referred frameworks in an\napplication. This bug/limitation prevents using AspectJ with\nsuch jars.\n\nTo reproduce the bug in a controlled environment, I created\nthe following aspect which should make the weaving process\na pass-thru filter (no join point is matched by the pointcut)\n\nclass TemporaryClass {\n}\n\npublic aspect NoWeaveAspect {\n    before() : call(* TemporaryClass.*(..)) && within(org.spring..*) {\n    }\n}\n\nWeaving this aspect with spring.jar should result in logically\nidentical jar file. However, when I compile using the following\ncommand (or equivalent ant task), I get the following errors:\n\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes>ajc -version\nAspectJ Compiler 1.2.1rc1 built on Friday Oct 22, 2004 at 13:31:47 GMT\n\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes>ajc -injars spring.jar -outjar s\npring-woven.jar NoWeaveAspect.java\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.quartz.xml.JobSchedulingDataProcessor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.quartz.StatefulJob\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.quartz.SimpleTrigger\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe freemarker.cache.TemplateLoader\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.quartz.CronTrigger\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.quartz.JobDetail\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.quartz.Job\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.quartz.impl.jdbcjobstore.JobStoreCMT\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.struts.action.PlugIn\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.velocity.tools.generic.NumberTool\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.struts.action.Action\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.struts.tiles.TilesRequestProcessor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.struts.action.RequestProcessor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.velocity.runtime.resource.loader.ResourceLoader\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.velocity.runtime.log.LogSystem\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe javax.faces.el.VariableResolver\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.velocity.tools.generic.DateTool\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.commons.attributes.AttributeRepositoryClass\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe net.sf.cglib.proxy.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.commons.pool.PoolableObjectFactory\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe net.sf.cglib.proxy.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe net.sf.cglib.proxy.Dispatcher\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInvocation\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe net.sf.cglib.proxy.CallbackFilter\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe net.sf.cglib.proxy.NoOp\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe net.sf.hibernate.transaction.TransactionManagerLookup\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe net.sf.hibernate.connection.ConnectionProvider\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe net.sf.hibernate.UserType\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.apache.ojb.broker.accesslayer.ConnectionFactoryManagedImpl\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe net.sf.cglib.proxy.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe net.sf.cglib.proxy.CallbackFilter\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInterceptor\n(no source information available)\nC:\\work\\aop\\bugs\\injar-with-nonexisting-classes\\spring.jar [error] can't find ty\npe org.aopalliance.intercept.MethodInterceptor\n(no source information available)\n\n41 errors"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java",
        "weaver/src/org/aspectj/weaver/JoinPointSignature.java",
        "weaver/src/org/aspectj/weaver/JoinPointSignatureIterator.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "weaver/src/org/aspectj/weaver/MemberImpl.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "weaver/src/org/aspectj/weaver/ResolvedType.java",
        "weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/TypePatternList.java",
        "weaver/src/org/aspectj/weaver/Member.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "weaver/src/org/aspectj/weaver/ReferenceType.java",
        "weaver/src/org/aspectj/weaver/WeaverMessages.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelAccessForInlineMunger.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/OutjarTest.java"
      ]
    }
  },
  "b3b1eec": {
    "bug_report": {
      "summary": "Bug 36234  out of memory error when compiling",
      "description": "Getting an out of memory error when compiling with Ajc 1.1 RC1. \nI know this is not very descriptive, but maybe you can point me into a \ndirection of getting more output.\n\nhere some additional information though:\nCode base is medium size (about 1500 classfiles)\nI removed all my aspects and still receive the error.\nRunning it from the command line: ajc -classpath whateveritis -sourceroots \nwhateveritis -d whateveritis"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"
      ]
    }
  },
  "f239f2a": {
    "bug_report": {
      "summary": "Bug 152873  Optimize shouldWeaveAnnotationStyleAspect with Patch",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/java5/ataspectj/ataspectj/bugs/NotAspect.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java",
        "testing/newsrc/org/aspectj/testing/AntSpec.java",
        "weaver/src/org/aspectj/weaver/tools/IsAtAspectAnnotationVisitor.java",
        "tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"
      ]
    }
  },
  "5d73494": {
    "bug_report": {
      "summary": "Bug 52394  inter-type declarations cause JRockit Crash",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java"
      ]
    }
  },
  "93b7bed": {
    "bug_report": {
      "summary": "Bug 233497  StringIndexOutOfBoundsException thrown in BcelWeaver",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"
      ]
    }
  },
  "7b40e7e": {
    "bug_report": {
      "summary": "Bug 161502  UnsupportedOperationException thrown: unable to parameterize unresolved type: Pjava/util/List<+Ljava/lang/Object; >;",
      "description": "Generic parameters (like List<? extends T>) in pointcuts throw UnsupportedOperationException.\n\njava.lang.UnsupportedOperationException\nat org.aspectj.weaver.UnresolvedType.parameterize(UnresolvedType.java: 220)\nat org.aspectj.weaver.patterns.ExactTypePattern.parameterizeWith (ExactTypePattern.java:244)\nat org.aspectj.weaver.patterns.SignaturePattern.parameterizeWith (SignaturePattern.java:265)\nat org.aspectj.weaver.patterns.KindedPointcut.parameterizeWith (KindedPointcut.java:381)\nat org.aspectj.weaver.bcel.BcelAdvice.parameterizeWith (BcelAdvice.java:93)\nat org.aspectj.weaver.ResolvedType.getDeclaredAdvice (ResolvedType.java:710)\nat org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers (ResolvedType.java:739)\nat org.aspectj.weaver.ResolvedType.collectShadowMungers (ResolvedType.java:575)\nat org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers (ResolvedType.java:504)\nat org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (CrosscuttingMembersSet.java:68)\nat org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (CrosscuttingMembersSet.java:57)\nat org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java: 450)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave (AjCompilerAdapter.java:299)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling (AjCompilerAdapter.java:192)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc $afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2 $f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation (AjBuildManager.java:887)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:244)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile (CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run (AspectJBuildManager.java:191)\n\nUnsupportedOperationException thrown: unable to parameterize unresolved type: Pjava/util/List<+Ljava/lang/Object;>;\n\nTo reproduce this exception compile the following code snippet.\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\n\npublic class Main {\n\n  public List<? extends Element> getElements() {\n    return new ArrayList<Element>();\n  }\n\n  class Element {};\n\n  @Aspect\n  static abstract class Base<T> {\n    @Around(\"call(List<? extends T> *.*(..))\")\n    public List<? extends T> elementList(ProceedingJoinPoint thisJoinPoint) {\n      try {\n        return (List<? extends T>)thisJoinPoint.proceed();\n      } catch (Throwable e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n  @Aspect\n  static class Concrete extends Base<Element> {}\n\n  public static void main(String[] args) {\n    new Main().getElements();\n  }\n\t\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java",
        "weaver/src/org/aspectj/weaver/patterns/Declare.java",
        "weaver/src/org/aspectj/weaver/patterns/HasMemberTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareParents.java",
        "weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/PerObject.java",
        "weaver/src/org/aspectj/weaver/patterns/OrPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java",
        "weaver/src/org/aspectj/weaver/patterns/PerCflow.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "weaver/src/org/aspectj/weaver/patterns/TypePatternList.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java",
        "weaver/src/org/aspectj/weaver/patterns/PerSingleton.java",
        "weaver/src/org/aspectj/weaver/ReferenceType.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java",
        "weaver/src/org/aspectj/weaver/BoundedReferenceType.java",
        "weaver/src/org/aspectj/weaver/TypeVariableReferenceType.java",
        "weaver/src/org/aspectj/weaver/patterns/TypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java",
        "weaver/src/org/aspectj/weaver/TypeVariable.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java",
        "weaver/src/org/aspectj/weaver/ResolvedType.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/NotPointcut.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java",
        "tests/bugs153/pr161502/Main2.java",
        "weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java",
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/AndPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/Pointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java",
        "tests/bugs153/pr161502/Main.java",
        "weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java",
        "weaver/src/org/aspectj/weaver/Checker.java",
        "weaver/src/org/aspectj/weaver/internal/tools/PointcutDesignatorHandlerBasedPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java"
      ]
    }
  },
  "a39f595": {
    "bug_report": {
      "summary": "Bug 108120  Complete implemenation of runtime pointcut parsing and matching",
      "description": "The weaver API for runtime pointcut parsing and matching needs extending for all\nof the new pointcuts we have added in AJ5. Recommended approach is to implement\nJavaLangReflectObjectType as a new ReferenceTypeDelegate, and a\nJavaLangReflectWorld in place of BcelWorld."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java",
        "weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java",
        "weaver/src/org/aspectj/weaver/tools/PointcutPrimitive.java",
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/tools/JoinPointMatch.java",
        "weaver/src/org/aspectj/weaver/patterns/TypePatternList.java",
        "weaver/testsrc/BcweaverModuleTests15.java",
        "weaver/src/org/aspectj/weaver/tools/PointcutExpression.java",
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java",
        "weaver/src/org/aspectj/weaver/reflect/JoinPointMatchImpl.java",
        "weaver/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java",
        "weaver/src/org/aspectj/weaver/patterns/PointcutExpressionMatching.java",
        "weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java",
        "weaver/src/org/aspectj/weaver/internal/tools/PointcutExpressionImpl.java",
        "weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/HandlerTestCase.java",
        "weaver/src/org/aspectj/weaver/Shadow.java",
        "aspectj5rt/java5-src/org/aspectj/lang/reflect/Pointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/HasMemberTypePattern.java",
        "weaver/testsrc/reflect/tests/C.java",
        "weaver/src/org/aspectj/weaver/tools/ShadowMatch.java",
        "bcel-builder/src/org/aspectj/apache/bcel/classfile/JavaClass.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/KindedTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/TypePattern.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/PatternsTests.java",
        "weaver/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java",
        "weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionBasedResolvedMemberImpl.java",
        "weaver/src/org/aspectj/weaver/patterns/PerObject.java",
        "weaver/src/org/aspectj/weaver/patterns/PerSingleton.java",
        "aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "weaver/src/org/aspectj/weaver/reflect/ShadowMatchImpl.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java",
        "weaver/src/org/aspectj/weaver/reflect/PointcutParameterImpl.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java",
        "weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java",
        "tests/java5/ataspectj/annotationGen/RuntimePointcuts.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java",
        "weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/ArgsTestCase.java",
        "weaver/src/org/aspectj/weaver/tools/PointcutParser.java",
        "weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/NotPointcut.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AtAspectJAnnotationFactory.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "weaver/src/org/aspectj/weaver/patterns/AndPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/PerClause.java",
        "weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/Pointcut.java",
        "bcel-builder/src/org/aspectj/apache/bcel/generic/Type.java",
        "weaver/src/org/aspectj/weaver/tools/PointcutParameter.java",
        "weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/AndOrNotTestCase.java",
        "weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/PointcutTestCase.java",
        "weaver/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java",
        "tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjAnnotationGenTests.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionVar.java",
        "weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/OrPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/PerCflow.java",
        "weaver/testsrc/org/aspectj/weaver/tools/PointcutExpressionTest.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java",
        "weaver/src/org/aspectj/weaver/reflect/AnnotationFinder.java",
        "aspectj5rt/java5-src/org/aspectj/lang/annotation/Pointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/WithinCodeTestCase.java",
        "aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/PointcutImpl.java",
        "bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/GetReflectMembersTest.java",
        "weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java",
        "weaver/src/org/aspectj/weaver/UnresolvedType.java"
      ]
    }
  },
  "82eae55": {
    "bug_report": {
      "summary": "Bug 72531  declare warning warns at wrong points",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs/pr72531/de/rohith/PrinterWorld.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java",
        "tests/bugs/pr72531/de/rohith/HelloWorldAspect.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java",
        "tests/bugs/pr72531/de/rohith/HelloWorld.java"
      ]
    }
  },
  "a31b3de": {
    "bug_report": {
      "summary": "Bug 193348  NPE on attempt to compile",
      "description": "I can't really pinpoint any code that trigger this. It happens on for an incremental, and only some of the time. If I do a full build of the project then I do not get the error and all seems to work.\n\n----\n\njava.lang.NullPointerException\nat org.aspectj.weaver.bcel.BcelWeaver.raiseUnboundFormalError(BcelWeaver.java:833)\nat org.aspectj.weaver.bcel.BcelWeaver.validateSingleBranch(BcelWeaver.java:688)\nat org.aspectj.weaver.bcel.BcelWeaver.validateBindings(BcelWeaver.java:627)\nat org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts(BcelWeaver.java:556)\nat org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:484)\nat org.aspectj.ajd ... oBuildJob.run(AutoBuildJob.java:235)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)\n\nCompile error: NullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"
      ]
    }
  },
  "752f895": {
    "bug_report": {
      "summary": "Bug 269867  Non synchronized access to WeakHashMap causes infinite loop",
      "description": "The non synchronized access from AjTypeSystem.getAjType(clazz) to a static instance of WeakHashMap may cause an infinite loop at start up in a multi threaded system. The thread dump shows that 32 of 33 threads of the application stuck in WeakHashMap.get(Object) line 355:\n\n\"BundleStarterThreadQcCtrl24\" prio=3 tid=0x00957c00 nid=0x39 runnable [0xd42fb000..0xd42ffa70]\n   java.lang.Thread.State: RUNNABLE\n\tat java.util.WeakHashMap.get(WeakHashMap.java:355)\n\tat org.aspectj.lang.reflect.AjTypeSystem.getAjType(AjTypeSystem.java:37)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.initialize(Java15ReflectionBasedReferenceTypeDelegate.java:66)\n\tat org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.create15Delegate(ReflectionBasedReferenceTypeDelegateFactory.java:56)\n\tat org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:42)\n\tat org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:111)\n\tat org.aspectj.weaver.World.resolveToReferenceType(World.java:388)\n\tat org.aspectj.weaver.World.resolve(World.java:279)\n\tat org.aspectj.weaver.World.resolve(World.java:199)\n\tat org.aspectj.weaver.World.resolve(World.java:348)\n\tat org.aspectj.weaver.reflect.ReflectionWorld.resolve(ReflectionWorld.java:103)\n\tat org.aspectj.weaver.reflect.ReflectionWorld.resolve(ReflectionWorld.java:93)\n\tat org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.toResolvedTypeArray(ReflectionBasedReferenceTypeDelegateFactory.java:214)\n\tat org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMethod(ReflectionBasedReferenceTypeDelegateFactory.java:107)\n\tat org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMember(ReflectionBasedReferenceTypeDelegateFactory.java:98)\n\tat org.aspectj.weaver.reflect.ReflectionShadow.makeExecutionShadow(ReflectionShadow.java:53)\n\tat org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:100)\n\tat org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:92)\n\tat org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:370)"
    },
    "commit": {
      "diff": [
        "aspectj5rt/java5-src/org/aspectj/lang/reflect/AjTypeSystem.java"
      ]
    }
  },
  "a778ac4": {
    "bug_report": {
      "summary": "Bug 121385  around advice does not work when LTW",
      "description": "I defined a aop.xml and a aspect, I have already copy aspectjweaver.jar D:\\work\\BTM\\lib\\aspectjweaver.jar, and added -javaagent:D:\\work\\BTM\\lib\\aspectjweaver.jar option to the JVM in Eclipse, it works fine if there are before and after advice in aspect, but it will be wrong once I used around advice. if I use compile-time weaving, this around advice works fine.\nmy Eclipse env: eclipse 3.0.2 + AJDT 1.2.1 RC1 release + Sun JDK 1.5.0.\n\naspect file:\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.JoinPoint;\npublic abstract aspect World { \n    //private Object result;\n\tpointcut greeting() : execution(* Hello.sayWorld(..)); \n    \n\tObject around(): greeting() {\n    \tSystem.out.println(\"around start!\");\n    \tObject result = proceed();\n    \tSystem.out.println(\"around end!\");\n    \treturn result;\n\t}\n    \n//    before() : greeting() { \n//    \tSignature signature = thisJoinPoint.getSignature();\n//        System.out.println(\"before \" + signature.getName()); \n//    } \n    \n//    after() returning () : greeting() { \n//    \tSignature signature = thisJoinPoint.getSignature();\n//        System.out.println(\"after \" + signature.getName()); \n//    } \n\n} \n\naop.xml file:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<aspectj>\n\t<aspects>\n\t\t<aspect name=\"World\"/>\n\t\t<concrete-aspect name=\"World1\" extends=\"World\">\n          <pointcut name=\"greeting\" expression=\"execution(* Hello.sayWorld(..)) ||\n          execution(* Hello.sayHello(..))\"/>\n        </concrete-aspect>\n\t</aspects>\n\t<weaver options=\"-Xreweavable -verbose -XlazyTjp -showWeaveInfo\">\n\t\t<include within=\"Hello\"/>\n\t</weaver>\n</aspectj>\n\naround advice error message in eclipse console as below:\ninfo register aspect World\ninfo generating class 'World1'\ninfo weaving 'Hello'\ninfo weaver operating in reweavable mode.  Need to verify any required types exist.\nabort trouble in: \npublic class Hello extends java.lang.Object:\n  public void <init>():\n                    ALOAD_0     // Hello this   (line 2)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void Hello.<init>())\n    |               RETURN\n    constructor-execution(void Hello.<init>())\n  end public void <init>()\n\n  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 7:75\n:\n                    INVOKESTATIC Hello.sayHello ()V   (line 9)\n                    RETURN   (line 10)\n  end public static void main(String[])\n\n  public static void sayHello()    org.aspectj.weaver.MethodDeclarationLineNumber: 12:180\n:\n  end public static void sayHello()\n\n  public static int sayWorld()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:268\n:\n    method-execution(int Hello.sayWorld())\n    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 18)\n    |               LDC \"World\"\n    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    |               ICONST_0   (line 19)\n    |               IRETURN\n    method-execution(int Hello.sayWorld())\n  end public static int sayWorld()\n\n  static final void sayHello_aroundBody0():\n                    GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 13)\n                    LDC \"Hello\"\n                    INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n                    INVOKESTATIC Hello.sayWorld ()I   (line 14)\n                    POP\n                    RETURN   (line 15)\n  end static final void sayHello_aroundBody0()\nend public class Hello\n\npublic class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:\n  public void <init>(Object[]):\n                    ALOAD_0\n                    ALOAD_1\n                    INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.<init> ([Ljava/lang/Object;)V\n                    RETURN\n  end public void <init>(Object[])\n\n  public Object run(Object[]):\n                    ALOAD_0\n                    GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;\n                    ASTORE_2\n                    INVOKESTATIC Hello.sayHello_aroundBody0 ()V\n                    ACONST_NULL\n                    ARETURN\n  end public Object run(Object[])\nend public class Hello$AjcClosure1\n -- (NullPointerException) null\nnull\njava.lang.NullPointerException\n\tat org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup(BcelAdvice.java:457)\n\tat org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure(BcelShadow.java:2685)\n\tat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:230)\n\tat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:588)\n\tat org.aspectj.weaver.Shadow.implement(Shadow.java:405)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:263)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:196)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:122)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\nMessage: abort trouble in: \npublic class Hello extends java.lang.Object:\n  public void <init>():\n                    ALOAD_0     // Hello this   (line 2)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void Hello.<init>())\n    |               RETURN\n    constructor-execution(void Hello.<init>())\n  end public void <init>()\n\n  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 7:75\n:\n                    INVOKESTATIC Hello.sayHello ()V   (line 9)\n                    RETURN   (line 10)\n  end public static void main(String[])\n\n  public static void sayHello()    org.aspectj.weaver.MethodDeclarationLineNumber: 12:180\n:\n  end public static void sayHello()\n\n  public static int sayWorld()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:268\n:\n    method-execution(int Hello.sayWorld())\n    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 18)\n    |               LDC \"World\"\n    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    |               ICONST_0   (line 19)\n    |               IRETURN\n    method-execution(int Hello.sayWorld())\n  end public static int sayWorld()\n\n  static final void sayHello_aroundBody0():\n                    GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 13)\n                    LDC \"Hello\"\n                    INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n                    INVOKESTATIC Hello.sayWorld ()I   (line 14)\n                    POP\n                    RETURN   (line 15)\n  end static final void sayHello_aroundBody0()\nend public class Hello\n\npublic class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:\n  public void <init>(Object[]):\n                    ALOAD_0\n                    ALOAD_1\n                    INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.<init> ([Ljava/lang/Object;)V\n                    RETURN\n  end public void <init>(Object[])\n\n  public Object run(Object[]):\n                    ALOAD_0\n                    GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;\n                    ASTORE_2\n                    INVOKESTATIC Hello.sayHello_aroundBody0 ()V\n                    ACONST_NULL\n                    ARETURN\n  end public Object run(Object[])\nend public class Hello$AjcClosure1\n -- (NullPointerException) null\nnull\njava.lang.NullPointerException\n\tat org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup(BcelAdvice.java:457)\n\tat org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure(BcelShadow.java:2685)\n\tat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:230)\n\tat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:588)\n\tat org.aspectj.weaver.Shadow.implement(Shadow.java:405)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:263)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:196)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:122)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\norg.aspectj.bridge.AbortException: trouble in: \npublic class Hello extends java.lang.Object:\n  public void <init>():\n                    ALOAD_0     // Hello this   (line 2)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void Hello.<init>())\n    |               RETURN\n    constructor-execution(void Hello.<init>())\n  end public void <init>()\n\n  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 7:75\n:\n                    INVOKESTATIC Hello.sayHello ()V   (line 9)\n                    RETURN   (line 10)\n  end public static void main(String[])\n\n  public static void sayHello()    org.aspectj.weaver.MethodDeclarationLineNumber: 12:180\n:\n  end public static void sayHello()\n\n  public static int sayWorld()    org.aspectj.weaver.MethodDeclarationLineNumber: 17:268\n:\n    method-execution(int Hello.sayWorld())\n    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 18)\n    |               LDC \"World\"\n    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    |               ICONST_0   (line 19)\n    |               IRETURN\n    method-execution(int Hello.sayWorld())\n  end public static int sayWorld()\n\n  static final void sayHello_aroundBody0():\n                    GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 13)\n                    LDC \"Hello\"\n                    INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n                    INVOKESTATIC Hello.sayWorld ()I   (line 14)\n                    POP\n                    RETURN   (line 15)\n  end static final void sayHello_aroundBody0()\nend public class Hello\n\npublic class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure:\n  public void <init>(Object[]):\n                    ALOAD_0\n                    ALOAD_1\n                    INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.<init> ([Ljava/lang/Object;)V\n                    RETURN\n  end public void <init>(Object[])\n\n  public Object run(Object[]):\n                    ALOAD_0\n                    GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object;\n                    ASTORE_2\n                    INVOKESTATIC Hello.sayHello_aroundBody0 ()V\n                    ACONST_NULL\n                    ARETURN\n  end public Object run(Object[])\nend public class Hello$AjcClosure1\n\n\tat org.aspectj.bridge.MessageWriter.handleMessage(MessageWriter.java:47)\n\tat org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage(WeavingAdaptor.java:395)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1554)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:263)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:196)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:122)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\nHello\nWorld"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "tests/bugs150/pr121385/A.java",
        "tests/bugs150/pr121385/WorldAt.java",
        "tests/bugs150/pr121385/Hello.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "639b4fd": {
    "bug_report": {
      "summary": "Bug 83935  @AJ and formal binding impl",
      "description": "Some notes on formal binding impl for @AJ\n\nIn code style, the advice signature is always looking the same\n(..bindings.., org.aspectj.lang.Part thisJoinPointStaticPart, JoinPoint\nthisJoinPoint, org.aspectj.lang.Part thisEnclosingJoinPointStaticPart)\n\nIn @ style, it is user defined.\n\nThe current impl is handling the formal binding in a way that only\nargs/this/target can be bound.\nI had to add some conditionals to handles cases like that:\nvoid myAdvice(JoinPoint jp, Object target) {..}\nwhere target() binding is at index 1, while the index 0 is not an unbound but\nactually \"virtually\" bound to the joinpoint.\n\nPointcut are thus having a virtuallyBoundedNames String[] that is the list of\narguments for which we don't want any complain if it not bound.\nThis one is populated during  @ extraction, and Pointcut.concretize() make sure\nthe info is not lost when composition occurs (with PerClause f.e.)\n\nThe only issue is that currently, binding JP/SJP/ESJP themselves is not possible\nf.e. \"... && args(jp)\" myAdvice(JoinPoint jp, JoinPoint currentJp)\nIs that a big issue ?\nMay be impact adviceexecution() and could impact some use cases around mock testing."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java",
        "tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java",
        "tests/java5/ataspectj/ataspectj/MultipleBindingTest.java"
      ]
    }
  },
  "c6fb752": {
    "bug_report": {
      "summary": "Bug 353100  Need to demote \"warning ignoring duplicate definition\" from warning to debug",
      "description": "Build Identifier: 1.6.11\n\nThis kind of problem can occur for complex class loader hierarchies, and since it is not really a problem, we should make it debug level message so as not to write log messages un-necessarily.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Create an application that has some weaved class loaders hierarchy - recommend some URLClassLoader derived ones\n2. Add the same(!) JAR with only an aop.xml file to more than one loader along the hierarchy\n3. Make the loader the default context thread loader and start running some code."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"
      ]
    }
  },
  "3e4b59a": {
    "bug_report": {
      "summary": "Bug 43783  AJDT not very stable when confronted with java/aspect errors.",
      "description": "AJDT is not very stable when an eclipse project contains errors like\nmissing classes, wrong package statements etc. etc. This may occurs when\nrefactoring a project (sometimes by changing the source outside eclipse).\n\nNote I am using Eclipse 2.1.1, AJDT 1.1.4 + incremental compilation.\n\nGenerally a lot of exceptions will occur (mostly nullpointer). Here are some \nof them:\n\nI:\njava.lang.NullPointerException\n\tat org.aspectj.asm.internal.ProgramElement.toLinkLabelString\n(ProgramElement.java:403)\n\tat org.eclipse.ajdt.internal.core.AJDTStructureViewNode.getLabel\n(AJDTStructureViewNode.java:171)\n\tat org.eclipse.ajdt.internal.core.AJDTStructureViewNodeAdapter.getLabel\n(AJDTStructureViewNodeAdapter.java:89)\n\tat org.eclipse.ui.model.WorkbenchLabelProvider.getText\n(WorkbenchLabelProvider.java:142)\n\nII:\njava.lang.NullPointerException\n\tat org.eclipse.ajdt.internal.ui.editor.AspectJEditor$1.run\n(AspectJEditor.java:242)\n\tat org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)\n\nIII:\njava.lang.NullPointerException\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile\n(CompilerAdapter.java:79)\n\tat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run\n(AspectJBuildManager.java:165)\n!"
    },
    "commit": {
      "diff": [
        "ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"
      ]
    }
  },
  "f2cd94f": {
    "bug_report": {
      "summary": "Bug 131933  grotty ClassCastException on referring to pointcut in generic type",
      "description": "import java.util.List;\n\npublic aspect Slide71 {\n\tbefore(): GenericType<String>.foo() {}\n\tbefore(): GenericType<MyList>.foo() {}\n\t//before(): GenericType.foo() {}\n}\n\t\nclass GenericType<T> {\n\tpublic pointcut foo(): execution(* T.*(..));\n}\n\nthat programs gives:  (because MyList is not a known type)\n\njava.lang.ClassCastException\nat org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:193)\nat org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:130)\nat org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:194)\nat org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.finishResolveTypes(PointcutDesignator.java:84)\nat org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements(AdviceDeclaration.java:118)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:400)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1088)\nat org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:116)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1137)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:514)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:843)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:268)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nClassCastException thrown: org.aspectj.weaver.patterns.WildTypePattern"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/TypePattern.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"
      ]
    }
  },
  "767bb85": {
    "bug_report": {
      "summary": "Bug 317743  import handling and type lookup issues",
      "description": "Raised by Peter Melnikov on the mailing list.\n\nTwo problems: \n1) the binding scope being used for annotation style aspects accumulates lots of duplicate import prefixes in the SimpleScope object.\n2) SimpleScope.lookupType tries the prefixes even if the type is already fully qualified. \n\nThe combination of these issues causes a terrible mess.  Lots of class lookup failures.  Since the type cannot be 'partially qualified' it is silly to use the prefixes if the type is fully qualified."
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/patterns/IScope.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/BindingScope.java",
        "org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/SimpleScopeTests.java",
        "org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/patterns/SimpleScope.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PatternsTests.java"
      ]
    }
  },
  "c9a60e5": {
    "bug_report": {
      "summary": "Bug 133307  declare parents implementing generic interface referencing same type",
      "description": "I have the following construct:\n\npublic interface TestIF<T extends TestIF> {}\n\npublic class TestClass {}\n\npublic aspect TestAspect {\n\n    declare parents: TestClass implements TestIF<TestClass>; \n\n}\n\n\n\nThe later aspect does not compile, although \n\npublic class TestClass implements TestIF<TestClass> {\n\n}\nis a valid class."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/IVerificationRequired.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"
      ]
    }
  },
  "84e4e53": {
    "bug_report": {
      "summary": "Bug 62642  proper handling of ExceptionInIntializer inside <clinit> in presence of after throwing advice",
      "description": "When a <clinit> of a class contains after throwing advice that may catch\nExceptionInInitializer errors due to an embedded advice aspectOf() that\nfails,  the ExceptionInIntializer error does not get properly reported.\n\nFor the example below:\n\npublic class Main {\n  static int x = 13;\n  int y;\n\n  public Main() {\n     y= 14;\n  }\n\n  public static void main(String args[])\n    { Main m = new Main();\n      m.y = 3;\n      System.out.println(\"hi\");\n    }\n}\n\n\naspect Aspect {\n\n  before () :  within(*)\n    { System.out.println(\"BEFORE \" + thisJoinPointStaticPart.getKind() +\n                         \" at \" + thisJoinPointStaticPart.getSourceLocation());\n    }\n\n  after ()  : within(*)\n    { System.out.println(\"AFTER \" + thisJoinPointStaticPart.getKind() +\n                         \" at \" + thisJoinPointStaticPart.getSourceLocation());\n    }\n}\n\n\n....  \n\nwhen compiled with ajc, and then run,  the following exception is given,\n\nException in thread \"main\" java.lang.NoClassDefFoundError\n        at Main.<clinit>(Main.java:1)\n\nwhen really one wants the following:\n\nException in thread \"main\" java.lang.ExceptionInInitializerError\n        at Main. ...\nCaused by: org.aspectj.lang.NoAspectBoundException: Aspect\n        at Aspect.aspectOf ..\n        \n\n-------------\n\nHere is a fix ... I give the decompiled <clinit> for Main.java and indicate with\ncomments,\n  look for ***LJH ****,  what can be woven to fix it.   Basically, the catch\nblock for after throwing,  when in <clinit>,  should first check if the\ncaught exception if a ExceptionInInitializerError, and if so just throw it.\n\n----------- static\n    {\n        org.aspectj.runtime.reflect.Factory r1;\n        java.lang.Throwable r2, r31;\n        int $i0;\n\n        r1 = new Factory(\"Main.java\", Class.forName(\"Main\"));\n        ajc$tjp_0 = r1.makeSJP(\"field-set\", r1.makeFieldSig(\"8-x-Main-int-\"), 2);\n        ajc$tjp_1 = r1.makeSJP(\"staticinitialization\",\nr1.makeInitializerSig(\"8--Main-\"), 2);\n        ajc$tjp_10 = r1.makeSJP(\"preinitialization\",\nr1.makeConstructorSig(\"1--Main----\"), 5);\n        ajc$tjp_2 = r1.makeSJP(\"field-set\", r1.makeFieldSig(\"0-y-Main-int-\"), 6);\n        ajc$tjp_3 = r1.makeSJP(\"constructor-execution\",\nr1.makeConstructorSig(\"1--Main----\"), 6);\n        ajc$tjp_4 = r1.makeSJP(\"constructor-call\",\nr1.makeConstructorSig(\"1--Main----\"), 10);\n        ajc$tjp_5 = r1.makeSJP(\"field-set\", r1.makeFieldSig(\"0-y-Main-int-\"), 11);\n        ajc$tjp_6 = r1.makeSJP(\"field-get\",\nr1.makeFieldSig(\"19-out-java.lang.System-java.io.PrintStream-\"), 12);\n        ajc$tjp_7 = r1.makeSJP(\"method-call\",\nr1.makeMethodSig(\"1-println-java.io.PrintStream-java.lang.String:-arg0:--void-\"),\n12);\n        ajc$tjp_8 = r1.makeSJP(\"method-execution\",\nr1.makeMethodSig(\"9-main-Main-[Ljava.lang.String;:-args:--void-\"), 10);\n        ajc$tjp_9 = r1.makeSJP(\"initialization\",\nr1.makeConstructorSig(\"1--Main----\"), 6);\n\n try\n        {\n            Aspect.aspectOf().ajc$before$Aspect$1$36f01b1c(ajc$tjp_1);\n            $i0 = 13;\n\n            try\n            {\n                Aspect.aspectOf().ajc$before$Aspect$1$36f01b1c(ajc$tjp_0);\n                x = $i0;\n            }\n            catch (Throwable $r30)\n            {\n                /*** LJH insert here *****/\n                if ($r30 instanceof ExceptionInIntializerError) //***\n                  throw($r30); //***\n                /***********/\n                r31 = $r30;\n                Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_0);\n                throw r31;\n            }\n\n            Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_0);\n        }\n        catch (Throwable $r36)\n        {\n           /*** LJH insert here *****/\n           if ($r36 instanceof ExceptionInIntializerError) //***\n           throw($r36); //***\n           /***********/\n            r2 = $r36;\n            Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_1);\n            throw r2;\n        }\n\n        Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_1);\n    }"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "tests/bugs/pr62642.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "2f36e7f": {
    "bug_report": {
      "summary": "Bug 266602  Problem with incremental itd compilation",
      "description": "Reproduceable from Roo code - commenting out a field after a successful build results in this exception. The underlying cause may also apply to ITD methods (and maybe constructors).\n\norg.aspectj.weaver.BCException: Couldn't find ITD init member 'void com.springsource.petclinic.domain.Visit_Roo_Entity_Itd.ajc$interFieldInit$com_springsource_petclinic_domain_Visit_Roo_Entity_Itd$com_springsource_petclinic_domain_Visit$id(com.springsource.petclinic.domain.Visit)' on aspect com.springsource.petclinic.domain.Visit_Roo_Entity_Itd\nwhen type munging with (BcelTypeMunger ResolvedTypeMunger(Field, java.lang.Long com.springsource.petclinic.domain.Visit.id))\nwhen weaving type com.springsource.petclinic.domain.Visit\nwhen weaving classes \nwhen weaving \nwhen incrementally building with classpath: C:\\temp\\petclinic\\target\\classes;E:/jvms/jdk1.6.0_06/jre/lib/resources.jar;E:/jvms/jdk1.6.0_06/jre/lib/rt.jar;E:/jvms/jdk1.6.0_06/jre/lib/jsse.jar;E:/jvms/jdk1.6.0_06/jre/lib/jce.jar;E:/jvms/jdk1.6.0_06/jre/lib/charsets.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/dnsns.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/localedata.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunjce_provider.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunmscapi.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunpkcs11.jar;C:/Users/Andy/.m2/repository/org/antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar;C:/Users/Andy/.m2/repository/com/thoughtworks/xstream/com.springsource.com.thoughtworks.xstream/1.3.0/com.springsource.com.thoughtworks.xstream-1.3.0.jar;C:/Users/Andy/.m2/repository/edu/emory/mathcs/backport/com.springsource.edu.emory.mathcs.backport/3.1.0/com.springsource.edu.emory.mathcs.backport-3.1.0.jar;C:/Users/Andy/.m2/repository/edu/oswego/cs/concurrent/com.springsource.edu.oswego.cs.dl.util.concurrent/1.3.4/com.springsource.edu.oswego.cs.dl.util.concurrent-1.3.4.jar;C:/Users/Andy/.m2/repository/org/jboss/javassist/com.springsource.javassist/3.3.0.ga/com.springsource.javassist-3.3.0.ga.jar;C:/Users/Andy/.m2/repository/javax/annotation/com.springsource.javax.annotation/1.0.0/com.springsource.javax.annotation-1.0.0.jar;C:/Users/Andy/.m2/repository/javax/persistence/com.springsource.javax.persistence/1.0.0/com.springsource.javax.persistence-1.0.0.jar;C:/Users/Andy/.m2/repository/javax/servlet/com.springsource.javax.servlet/2.4.0/com.springsource.javax.servlet-2.4.0.jar;C:/Users/Andy/.m2/repository/javax/servlet/com.springsource.javax.servlet.jsp.jstl/1.2.0/com.springsource.javax.servlet.jsp.jstl-1.2.0.jar;C:/Users/Andy/.m2/repository/javax/transaction/com.springsource.javax.transaction/1.1.0/com.springsource.javax.transaction-1.1.0.jar;C:/Users/Andy/.m2/repository/net/sourceforge/cglib/com.springsource.net.sf.cglib/2.1.3/com.springsource.net.sf.cglib-2.1.3.jar;C:/Users/Andy/.m2/repository/net/sourceforge/ehcache/com.springsource.net.sf.ehcache/1.4.1/com.springsource.net.sf.ehcache-1.4.1.jar;C:/Users/Andy/.m2/repository/net/sourceforge/jsr107cache/com.springsource.net.sf.jsr107cache/1.0.0/com.springsource.net.sf.jsr107cache-1.0.0.jar;C:/Users/Andy/.m2/repository/org/antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar;C:/Users/Andy/.m2/repository/org/aopalliance/com.springsource.org.aopalliance/1.0.0/com.springsource.org.aopalliance-1.0.0.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-3.2.0.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.dbcp/1.2.2.osgi/com.springsource.org.apache.commons.dbcp-1.2.2.osgi.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.pool/1.3.0/com.springsource.org.apache.commons.pool-1.3.0.jar;C:/Users/Andy/.m2/repository/org/apache/log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-1.2.15.jar;C:/Users/Andy/.m2/repository/org/apache/taglibs/com.springsource.org.apache.taglibs.standard/1.1.2/com.springsource.org.apache.taglibs.standard-1.1.2.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.runtime/1.6.2.RELEASE/com.springsource.org.aspectj.runtime-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.tools/1.6.2.RELEASE/com.springsource.org.aspectj.tools-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.weaver/1.6.2.RELEASE/com.springsource.org.aspectj.weaver-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-1.6.1.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate/3.2.6.ga/com.springsource.org.hibernate-3.2.6.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.annotations/3.3.1.ga/com.springsource.org.hibernate.annotations-3.3.1.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.annotations.common/3.3.0.ga/com.springsource.org.hibernate.annotations.common-3.3.0.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.ejb/3.3.2.GA/com.springsource.org.hibernate.ejb-3.3.2.GA.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.validator/3.0.0.GA/com.springsource.org.hibernate.validator-3.0.0.GA.jar;C:/Users/Andy/.m2/repository/org/hsqldb/com.springsource.org.hsqldb/1.8.0.9/com.springsource.org.hsqldb-1.8.0.9.jar;C:/Users/Andy/.m2/repository/org/jboss/util/com.springsource.org.jboss.util/2.0.4.GA/com.springsource.org.jboss.util-2.0.4.GA.jar;C:/Users/Andy/.m2/repository/org/junit/com.springsource.org.junit/4.4.0/com.springsource.org.junit-4.4.0.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm/2.2.3/com.springsource.org.objectweb.asm-2.2.3.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm.attrs/1.5.3/com.springsource.org.objectweb.asm.attrs-1.5.3.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm.commons/2.2.3/com.springsource.org.objectweb.asm.commons-2.2.3.jar;C:/Users/Andy/.m2/repository/org/xmlpull/com.springsource.org.xmlpull/1.1.3.4-O/com.springsource.org.xmlpull-1.1.3.4-O.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.aop/3.0.0.M1/org.springframework.aop-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.aspects/3.0.0.M1/org.springframework.aspects-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.beans/3.0.0.M1/org.springframework.beans-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.context/3.0.0.M1/org.springframework.context-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.core/3.0.0.M1/org.springframework.core-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.expression/3.0.0.M1/org.springframework.expression-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.jdbc/3.0.0.M1/org.springframework.jdbc-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.orm/3.0.0.M1/org.springframework.orm-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.test/3.0.0.M1/org.springframework.test-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.transaction/3.0.0.M1/org.springframework.transaction-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.web/3.0.0.M1/org.springframework.web-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.web.servlet/3.0.0.M1/org.springframework.web.servlet-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/roo/roo-core/0.2.0-SNAPSHOT/roo-core-0.2.0-SNAPSHOT.jar;F:/eclipse/e342/eclipse/plugins/org.aspectj.runtime_1.6.4.20090205161900/aspectjrt.jar;f:\\jvms\\jdk1.6.0_06\\jre\\lib\\ext\\dnsns.jar;f:\\jvms\\jdk1.6.0_06\\jre\\lib\\ext\\localedata.jar;f:\\jvms\\jdk1.6.0_06\\jre\\lib\\ext\\sunjce_provider.jar;f:\\jvms\\jdk1.6.0_06\\jre\\lib\\ext\\sunmscapi.jar;f:\\jvms\\jdk1.6.0_06\\jre\\lib\\ext\\sunpkcs11.jar;f:\\eclipse\\e342\\eclipse\\\\plugins\\org.eclipse.equinox.launcher_1.0.101.R34x_v20081125.jar;\n\n\n\tat org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewField(BcelTypeMunger.java:1638)\n\n\tat org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:90)\n\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:441)\n\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:103)\n\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1732)\n\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1693)\n\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1458)\n\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1272)\n\n\tat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:435)\n\n\tat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:371)\n\n\tat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:358)\n\n\tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)\n\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:652)\n\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)\n\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:977)\n\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:301)\n\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:183)\n\n\tat org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild(AjdeCoreBuildManager.java:127)\n\n\tat org.aspectj.ajde.core.AjCompiler.build(AjCompiler.java:88)\n\n\tat org.eclipse.ajdt.core.builder.AJBuilder.build(AJBuilder.java:223)\n\n\tat org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:633)\n\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:170)\n\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:201)\n\n\tat org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:253)\n\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:256)\n\n\tat org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:309)\n\n\tat org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:341)\n\n\tat org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:140)\n\n\tat org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:238)\n\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"
      ]
    }
  },
  "ade32bc": {
    "bug_report": {
      "summary": "Bug 114744  NPE at CaptureBinding.java on wildcard in intertype field type",
      "description": "When compiling this program with ajc -1.5\n\npublic aspect Wildcard {\n    Class<? extends Wildcard> Wildcard.cl;\n\n    void foo() throws Exception {\n\tWildcard ci = cl.newInstance();\n    }\n}\n\najc throws this exception\n\njava.lang.NullPointerException\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.lookup.CaptureBinding.initializeBounds(CaptureBinding.java:75)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.capture(ParameterizedTypeBinding.java:105)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference.resolveType(SingleNameReference.java:772)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:293)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:199)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:422)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:178)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:400)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1076)\n        at\norg.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:114)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1125)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:514)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\n        at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:759)\n        at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:225)\n        at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:151)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n        at org.aspectj.tools.ajc.Main.run(Main.java:326)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:240)\n        at org.aspectj.tools.ajc.Main.main(Main.java:83)"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"
      ]
    }
  },
  "cffe291": {
    "bug_report": {
      "summary": "Bug 249710  [compiling] Problem with -XterminateAfterCompilation",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java",
        "tests/bugs163/pr249710/Foo.java"
      ]
    }
  },
  "5c67166": {
    "bug_report": {
      "summary": "Bug 51322  Introduce Unknown Type to class causes Null pointer exception",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs/Pr51322.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"
      ]
    }
  },
  "bc2f36f": {
    "bug_report": {
      "summary": "Bug 149293  declare annotation problem: AIOOBE at ProblemReporter.java:2992",
      "description": "This has been happening a lot, but I'm having trouble figuring out why it's happening.  It's always \"5\".  It happens both in Eclipse and from the command line.\n\njava.lang.ArrayIndexOutOfBoundsException\nat org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.invalidType(ProblemReporter.java:2992)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.reportInvalidType(TypeReference.java:170)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:136)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:123)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation.resolveType(Annotation.java:214)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(ASTNode.java:436)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getAnnotationTypes(EclipseSourceType.java:443)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.isAnnotationStyleAspect(EclipseSourceType.java:123)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.isAspect(EclipseSourceType.java:108)\nat org.aspectj.weaver.ReferenceType.isAspect(ReferenceType.java:159)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.verifyAnyTypeParametersMeetBounds(AjLookupEnvironment.java:269)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:228)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nArrayIndexOutOfBoundsException thrown: 5"
    },
    "commit": {
      "diff": [
        "tests/multiIncremental/PR149293_1/base/src/mypackage/MyBaseClass.java",
        "tests/multiIncremental/PR149293_1/base/src/mypackage/MyInterface.java",
        "tests/multiIncremental/PR149293_1/inc1/src/mypackage/MySubclass.java",
        "tests/multiIncremental/PR149293_1/base/src/mypackage/MyAbstractClass.java",
        "tests/multiIncremental/PR149293_1/base/src/mypackage/MyAspect.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"
      ]
    }
  },
  "2f2f568": {
    "bug_report": {
      "summary": "Bug 148972  problems with binary weaving declare parents in mixed environment.",
      "description": "These have been reported to me on a large system doing some intricate weaving where some classes are 1.2, some 1.4, some 1.5 and the VM is 1.5.  Binary weaving declare parents sometimes refuses to allow the modification of the hierarchy because it sees a clash between two methods when there is none.  The two cases I'm fixing are:\n  1. sometimes the signatures of the return types differ with the '.' or '/' problem (fix == be consistent)\n  2. sometimes the syntheticness of the methods in the relationship isn't determined correctly"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"
      ]
    }
  },
  "6d906dc": {
    "bug_report": {
      "summary": "Bug 216067  Typo in point example",
      "description": null
    },
    "commit": {
      "diff": [
        "docs/dist/doc/examples/introduction/Point.java"
      ]
    }
  },
  "6c54db9": {
    "bug_report": {
      "summary": "Bug 222987  More NPEs in Java15AnnotationFinder",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"
      ]
    }
  },
  "952dda9": {
    "bug_report": {
      "summary": "Bug 91053  Generics problem with Set - does not compile with AspectJ 5",
      "description": "I tried different things to remove compiler warnings about generics which you\nget when you switch to JDK 5 and use collections. At last I fall back to JDK\n1.4. The following code compiles with AspectJ 5 and JDK compliance level 1.4:\n\npublic aspect SubjectAspect {\n    \n    private Set Subject.observers = new HashSet();\n\n    public void Subject.addObserver(SubjectObserver observer) {\n        observers.add(observer);\n    }\n    ...\n}\n\nAfter switching to compliance level 5.0 I get an error message\n\"The method add(E) in the type Set<E> is not applicable for the arguments\n(SubjectObserver)\".\nI don't know if it is a similar problem like #87550 but I means for older\nprojects which use collections that they can't switch to JDK 1.5"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/World.java",
        "weaver/src/org/aspectj/weaver/TypeX.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java"
      ]
    }
  },
  "b2cd5fa": {
    "bug_report": {
      "summary": "Bug 419279  ajc option to change -Xlint level per-message without Xlintfile",
      "description": "The -Xlintfile option is not a great fit for controlling message across multiple build projects, specifically in my case from the pluginManagement section of a maven parent pom. The problem is that you need a local file to configure the per-message output levels (ignore/warning/error) when you really want to specify it in the build script or in a shared file.\n\nAs an alternative to -Xlintfile, it would be handy to be able to change an Xlint warning level per message using command line options.\n\nFor example:\n\najc -Xlint:adviceDidNotMatch=ignore\n\nwould override the XlintDefault.properties file for the adviceDidNotMatch message.\n\nWith Regards\nRob"
    },
    "commit": {
      "diff": [
        "tests/bugs174/pr419279/Code.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/Lint.java",
        "tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java",
        "testing/newsrc/org/aspectj/testing/CompileSpec.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "0c83343": {
    "bug_report": {
      "summary": "Bug 48091  Lazy instantiation of thisJoinPoint",
      "description": "In cases where the body of advice refers to a non-statically evaluable portion \nof thisJoinPoint (so that it can't be optimized by the compiler to \nthisJoinPointStaticPart), the JoinPoint object is currently always created \nbefore entering the advice body - even if the JoinPoint object would never \nactually be accessed (because of a test within the advice for example). Since\na) thisJoinPoint is often used in tracing applications\nb) tracing applications tend to be very pervasive,\nc) they must have low overhead when tracing is disabled, and \nd) creation of thisJoinPoint objects is expensive (v. expensive compared to just \ntesting a flag)\nit would be nice if there was a way to create JoinPoint objects lazily on first \nactual reference within the advice body."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "runtime/src/org/aspectj/runtime/reflect/Factory.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/PerformanceTestCase.java",
        "weaver/src/org/aspectj/weaver/Lint.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/CommandTestCase.java"
      ]
    }
  },
  "554e733": {
    "bug_report": {
      "summary": "Bug 103051  Declare Soft not Affecting Explicit Adviceexecution",
      "description": "The following aspect should compile successfully:\n\nimport java.io.IOException;\n\npublic aspect SoftenAdvice {\n    declare soft: IOException: within(SoftenAdvice) && adviceexecution();\n\n    before() : execution(* main(..)) {\n        throw new IOException(\"test\");\n    }\n\n    public static void main(String args[]) {\n    }\n}\n\nBut both 1.5.0M2 and HEAD (from 2 days ago) give this output:\n\nC:\\devel\\scratch\\err>ajc SoftenAdvice.aj\nC:\\devel\\scratch\\err\\SoftenAdvice.aj:7 [error] Unhandled exception type \nIOExcept\nion\nthrow new IOException(\"test\");\n^^^^^^^^^^^^^^^^^^^^\n\n1 error\n\nHowever if you change the declare soft to be the following, it correctly \nsoftens at the advice execution join point.\n\n    declare soft: IOException: within(SoftenAdvice) && !withincode(* *(..));"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"
      ]
    }
  },
  "b23cc1a": {
    "bug_report": {
      "summary": "Bug 270033  [incremental] Incremental compilation with aspects on an incoming classpath/aspectpath",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"
      ]
    }
  },
  "08d6a5d": {
    "bug_report": {
      "summary": "Bug 109042  parameter ajc_aroundclosure is never read",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "b75cd93": {
    "bug_report": {
      "summary": "Bug 65319  ajc crashes when compiling the following program (binding this() and target())",
      "description": "class Test\n{  \n\tpublic static void main(String args[])\n\t{\t\t\n\t\tnew Test().method();\n\t}\n\tpublic void method()\n\t{\n\t\tnew Test2().method2();\n\t}\n}\nclass Test2 {\n\tpublic void method2() {}\n}\naspect Plain {\n\tbefore(Test x):  call(void *.* (..)) && (this(x) || target(x))\n\t{\n\t}\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java",
        "tests/bugs/oxford/PR65319.java",
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "weaver/src/org/aspectj/weaver/patterns/ExposedState.java"
      ]
    }
  },
  "8a64fa2": {
    "bug_report": {
      "summary": "Bug 73895  unnecessary cast causing problems",
      "description": "class: org.aspectj.weaver.ResolvedTypeX$Name\nmethod: isCoerceableFrom(..)\n\nI am having trouble with the line:\n\nResolvedMember[] b = ((Name)other).getDeclaredMethods(); //??? is this cast\nalways safe\n\nAs the comment suggests this cast is NOT always safe. In my case the cast is not\nsafe because I have some additional implementations for ResolvedTypeX (some\noptimizations).\n\nSolution: just remove the cast since the method \"getDeclaredMethods\" is already\ndefined abstract in the type of \"other\" (ResolvedTypeX). So the cast seems to be\nobsolete anyway."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java"
      ]
    }
  },
  "e8ef5bf": {
    "bug_report": {
      "summary": "Bug 353349  NPE in deleteNewAndDup",
      "description": "java.lang.NullPointerException\n        at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup(BcelShadow.java:179)\n        at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:303)\n        at org.aspectj.weaver.Shadow.implement(Shadow.java:543)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:3147)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:490)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:100)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1687)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1631)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1394)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1180)\n        at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:467)\n        at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:318)\n        at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:96)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"
      ]
    }
  },
  "728ecb8": {
    "bug_report": {
      "summary": "Bug 310144  java.lang.RuntimeException at AsmManager.java:1143",
      "description": "Build Identifier: Eclipse AspectJ Development Tools  Version: 2.0.3.e35x-20100419-1200 AspectJ version: 1.6.9.20100416110000\n\njava.lang.RuntimeException\nat org.aspectj.asm.AsmManager.removeSingleNode(AsmManager.java:1143)\nat org.aspectj.asm.AsmManager.removeRelationshipsTargettingThisType(AsmManager.java:798)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1173)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:455)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter. ...  for handle =xstm/stm<com.argilsoft.xstm.core{TKeyed.java[TKeyed[Visitor?field-set(java.util.ArrayList com.argilsoft.xstm.core.Visitor._continueStack)\n\nReproducible: Sometimes\n\nSteps to Reproduce:\nRandom exception popup in Eclipse"
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/AsmManager.java"
      ]
    }
  },
  "357bbe9": {
    "bug_report": {
      "summary": "Bug 150671  declare error on set of volatile field does not work",
      "description": "When an aspect has a declare error statement involving a pointcut that captures the setting of a volatile field, a compilation error is not produced.  \n\nThis bug can be reproduced as follows.  Consider the following class:\n\nclass A {\n   private volatile int state;\n\n   public void foo() {\n      state = 0;\n   }\n}\n\nNow consider this aspect:\n\naspect FSM {\n   declare error: set(* A.state): \"Changing state\";\n}\n\nThe setting of the state field in method foo() does not result in a compilation error as expected.  \n\nI originally noticed this bug when using AJDT 1.4 with Eclipse 3.2.  However this has been reproduced and confirmed with the aspectj 1.5.2 compiler."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "9a3cc2b": {
    "bug_report": {
      "summary": "Bug 389967  Weaved aspects mechanism does not take into account modified classes",
      "description": "The current caching mechanism assumes that if the same class is encountered then its cached weaved version can be used. However, the mechanism uses only the (fully qualified) class name to identify the class and does not take into account the fact that the class bytes may have changed (e.g., the user re-compiled and re-deployed some changes to the same class)."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "weaver/src/org/aspectj/weaver/tools/cache/CacheStatistics.java",
        "weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolver.java",
        "weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java",
        "weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheFactory.java",
        "weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java",
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java",
        "util/src/org/aspectj/util/LangUtil.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java",
        "weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/tools/GeneratedClassHandler.java",
        "loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java",
        "weaver/src/org/aspectj/weaver/tools/cache/CachedClassReference.java",
        "weaver/src/org/aspectj/weaver/tools/cache/GeneratedCachedClassHandler.java",
        "weaver/src/org/aspectj/weaver/tools/cache/CacheBacking.java",
        "weaver/src/org/aspectj/weaver/tools/cache/CachedClassEntry.java"
      ]
    }
  },
  "4b43dc6": {
    "bug_report": {
      "summary": "Bug 308093  incremental build problem when mixing up ITDs and declare parents",
      "description": "reported by Rod Johnson.  He had a sophisticated aspect doing a mix of ITDs and declare parents.  On doing an incremental build he was receiving errors that looked like the declare parents hadn't applied on the secondary build.\n\nWhat was actually happening is that when a class file was brought in as a BinaryTypeBinding, the existing World representation wasn't being cleaned up properly.  Without the cleanup the declare parents thought it was still in effect, but it was not.  With proper cleanup the declare parents applies on the secondary build and all is well. Change is in AjLookupEnviroment.weaveInterTypeDeclarations where the onType.clearInterTypeMungers() must be paired with an onType.ensureConsistent() call."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"
      ]
    }
  },
  "f2af562": {
    "bug_report": {
      "summary": "Bug 104024  combining varargs and inner classes crashes the parser",
      "description": "class Outer {\n  public class Inner {}\n}\n\n\npublic class Bug {\n  public void varargs(Object... varargs) {}\n\n  public void test() {\n    Outer.Inner inner = new Outer().new Inner();\n    varargs(inner); // works\n    varargs(new Outer().new Inner()); // crashes\n  }\n}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "047173e": {
    "bug_report": {
      "summary": "Bug 99136  xlint advice not applied appears twice with cflows",
      "description": "////////////// in the following code\naspect A{\n  before(): call(* *(..)) && cflow(execution(* *(..))) {}\n}\n////////////////////////////////////\n\ntwo \"advice not appied\" xlint messages are produced, one for the before advice\nand one for the cflow within the before advice."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "tests/bugs150/pr105479/ReturnTypeTester.java",
        "tests/src/org/aspectj/systemtest/xlint/XLintTests.java",
        "tests/bugs150/pr105479/Driver.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/harness/XLintcflow.java"
      ]
    }
  },
  "a9ca915": {
    "bug_report": {
      "summary": "Bug 109124  VerifyError with inner classes",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelField.java"
      ]
    }
  },
  "9b68a31": {
    "bug_report": {
      "summary": "Bug 192877  [ataspectj] @AspectJ style inter-type declaration causes false compiler error during incremental build",
      "description": "Build ID: M20070212-1330\n\nSteps To Reproduce:\nUse @DeclareParents to introduce a default interface implementation to an existing type.  \n\nA full build compiles cleanly and works as expected.  An incremental build causes the following type of compile error: \"The type FooImpl must implement the inherited abstract method Test.methodA()\".  \n\nIn this example FooImpl is the class we are introducing a default implementation of the Test interface which defines the method \"methodA\".\n\n\nMore information:\nSee attached zip for a complete set of files to reproduce.\n\nI can repoduce this bug with AJDT 1.4.2.200705221209 for Eclipse 3.2.2 as well as AJDT 1.5RC1 for Eclipse 3.3RC1"
    },
    "commit": {
      "diff": [
        "tests/multiIncremental/PR192877/base/src/DefaultTestImpl.java",
        "tests/multiIncremental/PR192877/base/src/Foo.java",
        "tests/multiIncremental/PR192877/base/src/TestAspect.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "tests/multiIncremental/PR192877/base/src/Test.java",
        "tests/multiIncremental/PR192877/inc1/src/Test.java",
        "tests/multiIncremental/PR192877/base/src/FooImpl.java"
      ]
    }
  },
  "743566f": {
    "bug_report": {
      "summary": "Bug 98646  parser cannot parse varargs correctly",
      "description": "the following cannot be parsed:\n\ncall(* *(int, Integer...))\n\nsee in modules/weaver/.../PointcutVisitorTest (uncomment the testTemp())\nSee \"FIXME AV for Adrian\" comments in PatternParser. Half fix but then fails for\nother tests.\n\nAdrian can you have a look at it ?\nThanks"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/PatternParser.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/VisitorTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/BasicTokenSource.java"
      ]
    }
  },
  "5f8d2cd": {
    "bug_report": {
      "summary": "Bug 119451  AJDoc produces incorrect warning for package accessed aspects",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java",
        "ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"
      ]
    }
  },
  "0af658e": {
    "bug_report": {
      "summary": "Bug 264563  [handles] Remove trailing '/' from source path handles",
      "description": null
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java"
      ]
    }
  },
  "85a4b0a": {
    "bug_report": {
      "summary": "Bug 101047  Weaver produces wrong local variable table bytecode",
      "description": "AspectJ version: DEVELOPMENT (also observed in 1.2.1)\nWhen weaving with a before or after advice, the generated local variable table \nwill, on branch instructions, offset the \"length\" field of a local variable \nwrongly by one instruction. Also, the weaver will mix up local variables with \nthe same name, thus violating the java VM specification:\n\n// Test.aj\naspect Test {\n\tbefore() : ( execution(* Foo.foo(..) ) ) {\n\t\tSystem.out.println(\"before\");\n\t\t\n\t}\n// Foo.java\npublic class Foo {\n    private String myString = \"A String\";\n    public static void main(String[] args) {\n        new Foo().foo();  \n    }\n    private void foo() { \n        String myLocal = myString;\n        if (myLocal.endsWith(\"X\")) {\n      \t   String local1 = \"local1\";\n             System.out.println(local1);\n        } else if (myLocal.endsWith(\"Y\")) {\n             String local2 = \"local2\";\n             System.out.println(local2);\n        } else {\n      \t  String local1 = \"local3\";\n            System.out.println(local1);\n        }\n      }\n}\n---\nWe compilw with ajc -sourceroots . and dumps Foo with javap:\njavap -c -l -s -private Foo\n....\n....\nprivate void foo();\n  Signature: ()V\n  Code:\n   0:   invokestatic    #65; //Method Test.aspectOf:()LTest;\n   3:   invokevirtual   #68; //Method Test.ajc$before$Test$1$f0485e90:()V\n   6:   aload_0\n   7:   getfield        #15; //Field myString:Ljava/lang/String;\n   10:  astore_1\n   11:  aload_1\n   12:  ldc     #30; //String X\n   14:  invokevirtual   #36; //Method java/lang/String.endsWith:\n(Ljava/lang/String;)Z\n   17:  ifeq    33\n   20:  ldc     #38; //String local1\n   22:  astore_2\n   23:  getstatic       #44; //Field java/lang/System.out:Ljava/io/PrintStream;\n   26:  aload_2\n   27:  invokevirtual   #50; //Method java/io/PrintStream.println:\n(Ljava/lang/String;)V\n   30:  goto    65\n   33:  aload_1\n   34:  ldc     #52; //String Y\n   36:  invokevirtual   #36; //Method java/lang/String.endsWith:\n(Ljava/lang/String;)Z\n   39:  ifeq    55\n   42:  ldc     #54; //String local2\n   44:  astore_2\n   45:  getstatic       #44; //Field java/lang/System.out:Ljava/io/PrintStream;\n   48:  aload_2\n   49:  invokevirtual   #50; //Method java/io/PrintStream.println:\n(Ljava/lang/String;)V\n   52:  goto    65\n   55:  ldc     #56; //String local3\n   57:  astore_2\n   58:  getstatic       #44; //Field java/lang/System.out:Ljava/io/PrintStream;\n   61:  aload_2\n   62:  invokevirtual   #50; //Method java/io/PrintStream.println:\n(Ljava/lang/String;)V\n   65:  return\n\n  LineNumberTable: \n   line 7: 6\n   line 8: 11\n   line 9: 20\n   line 10: 23\n   line 11: 33\n   line 12: 42\n   line 13: 45\n   line 15: 55\n   line 16: 58\n   line 18: 65\n  LocalVariableTable: \n   Start  Length  Slot  Name   Signature\n   6      60      0    this       LFoo;\n   11      55      1    myLocal       Ljava/lang/String;\n   45      12      2    local2       Ljava/lang/String;\n   23      43      2    local1       Ljava/lang/String;\n\nWe see that the two occurences of the \"local1\" variable erroneously have been \ncombined into one entry, starting at byte 23 and ending at byte 66. This is \nobviously wrong, since \"local1\" has no value in the \"local2\" block. Secondly, \nthe \"local2\" variable end is wrongly offset by one instruction offset."
    },
    "commit": {
      "diff": [
        "bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java"
      ]
    }
  },
  "438e61c": {
    "bug_report": {
      "summary": "Bug 49743  performance improvements for runtime library",
      "description": "I am heavily using the runtime signature information from\nthisJoinPoint.getSignature() and the toString() method of it. This causes heavy\nString operations each time the toString method is called. Would it be possible\nto cache the resulting string for example in MethodSignatureImpl and similar\nclasses for other signatures?"
    },
    "commit": {
      "diff": [
        "runtime/src/org/aspectj/runtime/reflect/CatchClauseSignatureImpl.java",
        "runtime/src/org/aspectj/runtime/reflect/SourceLocationImpl.java",
        "runtime/src/org/aspectj/runtime/reflect/FieldSignatureImpl.java",
        "runtime/src/org/aspectj/runtime/reflect/AdviceSignatureImpl.java",
        "runtime/src/org/aspectj/runtime/reflect/MethodSignatureImpl.java",
        "runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java",
        "runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java",
        "runtime/src/org/aspectj/runtime/reflect/Factory.java",
        "runtime/testsrc/org/aspectj/runtime/reflect/RuntimePerformanceTest.java",
        "runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java",
        "runtime/src/org/aspectj/runtime/reflect/ConstructorSignatureImpl.java",
        "runtime/src/org/aspectj/runtime/reflect/StringMaker.java",
        "runtime/testsrc/RuntimeModuleTests.java"
      ]
    }
  },
  "bf767a9": {
    "bug_report": {
      "summary": "Bug 104720  VerifyError after weaving around trivial switch statement",
      "description": "After compiling the attached source file and class file with\n\najc -inpath . -outjar t.jar Tracer.aj\n\n(on any of 1.2.1, 1.5.0M2 or the June 2005 snapshot) and then attempting to run\nit with\n\ngij -classpath ./t.jar:$CLASSPATH Test\n\nthe following error is obtained:\n\nException in thread \"main\" java.lang.VerifyError: verification failed at PC 1 in\nTest:newTest_aroundBody2((I)LTest;): branch out of range\n   at java.lang.VMClassLoader.resolveClass(java.lang.Class)\n(/usr/lib/libgcj.so.6.0.0)\n   at java.lang.Class.initializeClass() (/usr/lib/libgcj.so.6.0.0)\n   at java.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader)\n(/usr/lib/libgcj.so.6.0.0)\n   at gnu.java.lang.MainThread.run() (/usr/lib/libgcj.so.6.0.0)\n\nAn excerpt from the output of\n\njavap -private -classpath t.jar -c Test\n\nshows that the generated switch is indeed bogus:\n\nprivate static final Test newTest_aroundBody2(int);\n  Code:\n   0:   iload_0\n   1:   tableswitch{ //0 to 0\n                0: -1157627302;\n                default: 16 }\n   20:  invokespecial   #3; //Method \"<init>\":()V\n   23:  areturn"
    },
    "commit": {
      "diff": [
        "bcel-builder/src/org/aspectj/apache/bcel/generic/SWITCH.java",
        "bcel-builder/src/org/aspectj/apache/bcel/generic/TABLESWITCH.java"
      ]
    }
  },
  "b59b036": {
    "bug_report": {
      "summary": "Bug 148911  NPR compiling Spring",
      "description": "The Spring 2.0 RC1 project contains two directories with aspects. Since the eclipse project does not compile cleanly with just the java nature, I decided to try adding the aspectj nature and giving the aspectj builder a shot. \n\nI don't have any idea what might be the trigger to the problem, but simply checking out Spring 2.0 RC1 and adding the aspectj nature should be able to reproduce. If I learn more I will add to this bug.\n\n----\n\njava.lang.NullPointerException\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding(SingleTypeReference.java:39)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:132)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:123)\nat org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.setParameters(AsmElementFormatter.java:311)\nat org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind(AsmElementFormatter.java:258)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:392)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1250)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:392)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse(LocalDeclaration.java:242)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:212)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:145)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:87)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:941)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:210)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:91)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"
      ]
    }
  },
  "70888dd": {
    "bug_report": {
      "summary": "Bug 113511  LTW enhancements",
      "description": "Alex, here is the basic patch that is working well before you leave for the\nweekend ;-) I'll let Matthew post it officially to bugzilla since it was his\nidea. The earlier return from !enabled is a small addition I made that seems\nto help further. It would be great to have this in HEAD so I can report\nperformance numbers based on it in part 2 of my article on developerworks\n;-)\n\nHope you are enjoying your new addition!\n\nThanks!\n\nIndex: ClassLoaderWeavingAdaptor.java\n===================================================================\nRCS file:\n/home/technology/org.aspectj/modules/loadtime/src/org/aspectj/weaver/loadtim\ne/ClassLoaderWeavingAdaptor.java,v\nretrieving revision 1.18\ndiff -u -r1.18 ClassLoaderWeavingAdaptor.java\n--- ClassLoaderWeavingAdaptor.java      19 Oct 2005 13:11:36 -0000      1.18\n+++ ClassLoaderWeavingAdaptor.java      21 Oct 2005 16:04:41 -0000\n@@ -107,8 +107,13 @@\n\n        // register the definitions\n        registerDefinitions(weaver, loader);\n+        if (!enabled) {\n+               return;\n+        }\n        messageHandler = bcelWorld.getMessageHandler();\n\n+\nbcelWorld.setResolutionLoader((ClassLoader)null);//loader.getParent());\n+\n        // after adding aspects\n        weaver.prepareForWeave();\n    }\n@@ -148,7 +153,11 @@\n                           definitions.add(DocumentParser.parse(xml));\n                       }\n               }\n-\n+               if (definitions.isEmpty()) {\n+                       enabled = false;\n+                       return;\n+               }\n+\n            // still go thru if definitions is empty since we will\nconfigure\n            // the default message handler in there\n            registerOptions(weaver, loader, definitions);"
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "loadtime/src/org/aspectj/weaver/loadtime/Aj.java"
      ]
    }
  },
  "26a8a86": {
    "bug_report": {
      "summary": "Bug 143930  create constructor ipe in same was as method ipes",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "bed3f4e": {
    "bug_report": {
      "summary": "Bug 228633  AST Support for PointcutDesignators",
      "description": "I would like an enhancement to be able to match two PointcutDesignators (called 'pointcut definitions' in the AJ5 quick reference). Currently, the following test fails:\n\n---------------AjASTMatcherTest.java---------------\npublic void testMatchDefaultPointcut() {\n  AjAST ast = AjAST.newAjAST(AST.JLS3);\n  DefaultPointcut dp1 = ast.newDefaultPointcut();\n  DefaultPointcut dp2 = ast.newDefaultPointcut();\n  dp1.setDetail(\"call(* *.foo(..)\");\n  dp2.setDetail(\"call(* *.bar(..)\");\n  assertFalse(dp1.subtreeMatch(new AjASTMatcher(), dp2));\n}\n---------------------------------------------------\n\nThe reason is that there are no implementations for the many different kinds of pointcut definitions of AspectJ. Instead, DefaultPointcut simply contains the pointcut definition in a String-field \"detail\" as shown in the test case. The same is true for DefaultTypePattern and SignaturePattern. Additionally, in the current implementation a DefaultPointcut, DefaultTypePattern, and SignaturePattern node will always match another AST node if that node is of the same type (instanceof).\n\nFrom what I see, it is necessary to \n1) add types for every possible pointcut definition,\n2) extend the current implementation of type name patterns and \n3) signature patterns,\n4) extend the parser (internal and external?) to create nodes for the pointcut definitions,\n5) extend the converter to convert the new node types, and finally\n6) extend the matcher to be able to match two pointcut definitions.\n\nImplementation is already done for combinations of poincuts using and (&&), or (||), not (!), cflow, and reference pointcuts (without parameters).\n\nPlease comment on the task list as it is just an initial overview resulting from my limited knowledge on this field."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTMatcher.java"
      ]
    }
  },
  "bebb364": {
    "bug_report": {
      "summary": "Bug 151938  Handle Duplicate -javaagent entries more gracefully",
      "description": "If you start a java 5 VM with AspectJ's load-time weaver specified more than once using the -javaagent flag, if there is an aop.xml file defined, it chokes badly: it tries to reweave the woven AspectJ code and emits massive amounts of bytecode. It would be better if AspectJ detected that it was specified more than once and gave a warning then disabled all but one of the agents. Failing that, it would be better to fail and give an error message than emit the bytecode.\n\nThis issue came up for our automated installer, which adds a -javaagent flag to VM startup commands. If the script is wrapped twice, it can generate a duplicate. We are making our scripts more intelligent to avoid this issue, but we are probably not the only people who will hit this issue (e.g., if someone manually edits both setclasspath.bat and catalina.bat to add the flag for a Tomcat instance...)"
    },
    "commit": {
      "diff": [
        "loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java",
        "tests/java5/ataspectj/HelloWorld.java",
        "tests/java5/ataspectj/MessageHandler.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "f743fb2": {
    "bug_report": {
      "summary": "Bug 120356  @AJ decl err/warn does not show cross structure view",
      "description": "Perhaps an issue in the ASM struct for DEOW\nsince cross struct. is empty in AJDT , despite error / warning gutter and message is ok."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java",
        "tests/bugs151/pr120356/A.java",
        "tests/bugs151/pr120356/C.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"
      ]
    }
  },
  "21e06a6": {
    "bug_report": {
      "summary": "Bug 148727  Can't call synthetic aspectOf method on aspect in library jar",
      "description": "Separate compilation of the following program breaks on 1.5.2rc1 because of the recent change to marking aspect methods as synthetic:\n\npublic aspect Asp {\n}\n\npublic class Client {\n    public static void main(String argz[]) {\n        System.out.println(\"Can call aspectOf? \"+Asp.aspectOf());\n    }\n}\n\nC:\\devel\\scratch\\synthetic>ajc -classpath asp.jar;%CLASSPATH% Client.java\nC:\\devel\\scratch\\synthetic\\Client.java:3 [error] The method aspectOf() is undefi\nned for the type Asp\nSystem.out.println(\"Can call aspectOf? \"+Asp.aspectOf());\n\n\n1 error\n\nC:\\devel\\scratch\\synthetic>javac -classpath asp.jar;%CLASSPATH% Client.java\nClient.java:3: cannot find symbol\nsymbol  : method aspectOf()\nlocation: class Asp\n        System.out.println(\"Can call aspectOf? \"+Asp.aspectOf());\n                                                    ^\n1 error\n\nClearly it's vital that external users of a library be able to call API methods like aspectOf on library aspects.\n\nThis works:\n\nC:\\devel\\scratch\\synthetic>ajc *.aj Client.java\n\nC:\\devel\\scratch\\synthetic>java Client\nCan call aspectOf? Asp@b89838\n\nPatch with test integrated into CVS tree to follow..."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/NameMangler.java",
        "tests/bugs152/pr148727/Client.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "8b294d9": {
    "bug_report": {
      "summary": "Bug 103157  after returning should not bind \"null\" as return value",
      "description": "Today I found out the following. When writing an advice as...\n\n    after() returning(Object o): staticinitialization(*) {\n        System.out.println(o);\n    }\n\nThis advice is indeed executed every time a type returns from \nstaticinitialization. However, since there is no returned object, o is bound to \n\"null\".\n\nI think this is inconsistent with the fact where we have something like:\n\n    after() returning(T o): call(Object Foo.bar()) {\n        System.out.println(o);\n    }\n\nHere, AFAIK the advice would not execute in cases where the returned object is \nnot an instance of T.\n\nThus, I would propose that the first advice should only execute at joinpoints \nwhere a return value is available."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/Shadow.java",
        "tests/new/OddConstructors.java",
        "weaver/src/org/aspectj/weaver/Advice.java",
        "tests/new/ConstructorExecInit.java",
        "tests/new/AfterReturningParam.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "64183c3": {
    "bug_report": {
      "summary": "Bug 68991  intertype initialisers should match field set pointcuts",
      "description": "/* initialisers of intertype fields should match field set pointcuts.\n\n   In the example below, the output should be\n\nset field set(int C.n)\nset field set(int C.m)\nget field get(int C.n)\nset field set(int C.n)\n\n   but the first field set (of C.n) is not picked up.\n*/\n\n\n\naspect Aspect {\n\n    private int C.n = 13;\n\n    before() : get(* C.*) {\n\tSystem.out.println(\"get field \"+thisJoinPointStaticPart);\n    }\n\n    before() : set(* C.*)  {\n\tSystem.out.println(\"set field \"+thisJoinPointStaticPart);\n    }\n\n    public void C.foo() {\n\tn++;\n    }\n\n}\n\nclass C {\n    int m = 20;\n}\n\npublic class ITFieldsAdvice {\n\n    public static void main(String[] args) {\n\tC c = new C();\n\tc.foo();\n    }\n\n}"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java",
        "tests/bugs/PR68991/Oxford.java",
        "tests/bugs/PR68991/Simple.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "2b23e91": {
    "bug_report": {
      "summary": "Bug 78261  field pattern with \"void\" type should be compile-time error",
      "description": "We really should barf early on\n\n  get(void i)\n\nas opposed to just compiling through and treating it as something that'll never\nmatch.  I rated this as minor since this is just an error message issue."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "0e1bb19": {
    "bug_report": {
      "summary": "Bug 104957  NullPointerException when running ajc on gij",
      "description": "When running ajc 1.2.1 on the GNU Interpreter for Java 4.0.1, I received this error:\n\njava.lang.NullPointerException\n   at\norg.aspectj.apache.bcel.generic.InstructionComparator$1.equals(org.aspectj.apache.bcel.generic.Instruction,\norg.aspectj.apache.bcel.g\neneric.Instruction) (/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at org.aspectj.apache.bcel.generic.Instruction.equals(java.lang.Object)\n(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at java.util.AbstractMap.equals(java.lang.Object, java.lang.Object)\n(/usr/lib/libgcj.so.6.0.0)\n   at java.util.HashMap.put(java.lang.Object, java.lang.Object)\n(/usr/lib/libgcj.so.6.0.0)\n   at java.util.HashSet.add(java.lang.Object) (/usr/lib/libgcj.so.6.0.0)\n   at\norg.aspectj.apache.bcel.generic.InstructionHandle.addTargeter(org.aspectj.apache.bcel.generic.InstructionTargeter)\n(/tmp/cache/local/\naspectj1.2/lib/aspectjweaver.jar.so)\n   at\norg.aspectj.apache.bcel.generic.BranchInstruction.notifyTarget(org.aspectj.apache.bcel.generic.InstructionHandle,\norg.aspectj.apache.\nbcel.generic.InstructionHandle,\norg.aspectj.apache.bcel.generic.InstructionTargeter)\n(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at\norg.aspectj.apache.bcel.generic.BranchInstruction.setTarget(org.aspectj.apache.bcel.generic.InstructionHandle)\n(/tmp/cache/local/aspe\nctj1.2/lib/aspectjweaver.jar.so)\n   at org.aspectj.apache.bcel.generic.BranchInstruction.BranchInstruction(short,\norg.aspectj.apache.bcel.generic.InstructionHandle) (/tmp/c\nache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at org.aspectj.apache.bcel.generic.Select.Select(short, int[],\norg.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.b\ncel.generic.InstructionHandle)\n(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at org.aspectj.apache.bcel.generic.LOOKUPSWITCH.LOOKUPSWITCH(int[],\norg.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apa\nche.bcel.generic.InstructionHandle)\n(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at org.aspectj.apache.bcel.generic.SWITCH.SWITCH(int[],\norg.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.bcel.gen\neric.InstructionHandle, int) (/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at org.aspectj.apache.bcel.generic.SWITCH.SWITCH(int[],\norg.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.bcel.gen\neric.InstructionHandle) (/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at\norg.aspectj.weaver.bcel.Utility.copyInstruction(org.aspectj.apache.bcel.generic.Instruction)\n(/tmp/cache/local/aspectj1.2/lib/aspectj\nweaver.jar.so)\n   at\norg.aspectj.weaver.bcel.LazyMethodGen.packBody(org.aspectj.apache.bcel.generic.MethodGen)\n(/tmp/cache/local/aspectj1.2/lib/aspectjwea\nver.jar.so)\n   at org.aspectj.weaver.bcel.LazyMethodGen.pack()\n(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at org.aspectj.weaver.bcel.LazyMethodGen.getMethod()\n(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at\norg.aspectj.weaver.bcel.LazyClassGen.writeBack(org.aspectj.weaver.bcel.BcelWorld)\n(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.\nso)\n   at\norg.aspectj.weaver.bcel.LazyClassGen.getJavaClass(org.aspectj.weaver.bcel.BcelWorld)\n(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.j\nar.so)\n   at\norg.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(org.aspectj.weaver.bcel.LazyClassGen)\n(/tmp/cache/local/aspectj1.2/lib/aspectjwea\nver.jar.so)\n   at\norg.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(org.aspectj.weaver.bcel.UnwovenClassFile,\norg.aspectj.weaver.bcel.BcelObjectType, o\nrg.aspectj.weaver.IWeaveRequestor)\n(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so)\n   at\norg.aspectj.weaver.bcel.BcelWeaver.weave(org.aspectj.weaver.IClassFileProvider)\n(/tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so\n)\n   at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave() (Unknown Source)\n   at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling()\n(Unknown Source)\n   at\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit[])\n(Unknown Source)\n   at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(java.util.List)\n(Unknown Source)\n   at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(org.aspectj.ajdt.internal.core.builder.AjBuildConfig,\norg.aspectj.bridg\ne.IMessageHandler, boolean) (Unknown Source)\n   at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(org.aspectj.ajdt.internal.core.builder.AjBuildConfig,\norg.aspectj.br\nidge.IMessageHandler) (Unknown Source)\n   at\norg.aspectj.ajdt.ajc.AjdtCommand.doCommand(org.aspectj.bridge.IMessageHandler,\nboolean) (Unknown Source)\n   at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(java.lang.String[],\norg.aspectj.bridge.IMessageHandler) (Unknown Source)\n   at org.aspectj.tools.ajc.Main.run(java.lang.String[],\norg.aspectj.bridge.IMessageHolder) (Unknown Source)\n   at org.aspectj.tools.ajc.Main.runMain(java.lang.String[], boolean) (Unknown\nSource)\n   at org.aspectj.tools.ajc.Main.main(java.lang.String[]) (Unknown Source)\n   at gnu.java.lang.MainThread.call_main() (/usr/lib/libgcj.so.6.0.0)\n   at gnu.java.lang.MainThread.run() (/usr/lib/libgcj.so.6.0.0)\n\nUnfortunately, the above stack trace contains no line number information;\nhowever, by running the program under the gdb debugger, I was able to get a\nbacktrace with line numbers for the relevant part of the stack trace:\n\n(gdb) bt\n#0  0x011a0246 in\norg.aspectj.apache.bcel.generic.InstructionComparator$1.equals(org.aspectj.apache.bcel.generic.Instruction,\norg.aspectj.apache.bcel.generic.Instruction) (this=@5c71ea8, i1=@610fe70,\ni2=@610fc60) at org/aspectj/apache/bcel/generic/InstructionComparator.java:79\n#1  0x011a004e in\norg.aspectj.apache.bcel.generic.Instruction.equals(java.lang.Object)\n(this=@610fe70, that=@610fc60)\n    at org/aspectj/apache/bcel/generic/Instruction.java:499\n#2  0x031b5f9b in java.util.AbstractMap.equals(java.lang.Object,\njava.lang.Object) (o1=@610fe70, o2=@610fc60)\n    at ../../../libjava/java/util/AbstractMap.java:603\n#3  0x031cc0ae in java.util.HashMap.put(java.lang.Object, java.lang.Object)\n(this=@6483690, key=@610fe70, value=@2dfc0)\n    at ../../../libjava/java/util/HashMap.java:349\n#4  0x031cca00 in java.util.HashSet.add(java.lang.Object) (this=null,\no=@610fe70) at ../../../libjava/java/util/HashSet.java:151\n#5  0x011b30ad in\norg.aspectj.apache.bcel.generic.InstructionHandle.addTargeter(org.aspectj.apache.bcel.generic.InstructionTargeter)\n(\n    this=@6949d20, t=@610fe70) at\norg/aspectj/apache/bcel/generic/InstructionHandle.java:208\n#6  0x011861e6 in\norg.aspectj.apache.bcel.generic.BranchInstruction.notifyTarget(org.aspectj.apache.bcel.generic.InstructionHandle,\norg.aspectj.apache.bcel.generic.InstructionHandle,\norg.aspectj.apache.bcel.generic.InstructionTargeter) (old_ih=null, new_ih=@6949d20,\n    t=@610fe70) at org/aspectj/apache/bcel/generic/BranchInstruction.java:217\n#7  0x01186133 in\norg.aspectj.apache.bcel.generic.BranchInstruction.setTarget(org.aspectj.apache.bcel.generic.InstructionHandle)\n(\n    this=@610fe70, target=@6949d20) at\norg/aspectj/apache/bcel/generic/BranchInstruction.java:205\n#8  0x011857ef in\norg.aspectj.apache.bcel.generic.BranchInstruction.BranchInstruction(short,\norg.aspectj.apache.bcel.generic.InstructionHandle) (this=@610fe70, opcode=171,\ntarget=@6949d20) at org/aspectj/apache/bcel/generic/BranchInstruction.java:86\n#9  0x011d3489 in org.aspectj.apache.bcel.generic.Select.Select(short, int[],\norg.aspectj.apache.bcel.generic.InstructionHandle[],\norg.aspectj.apache.bcel.generic.InstructionHandle) (this=@610fe70, opcode=171,\nmatch=@6f63b90, targets=@6eeabe0, target=@6949d20)\n    at org/aspectj/apache/bcel/generic/Select.java:106\n#10 0x011c3152 in\norg.aspectj.apache.bcel.generic.LOOKUPSWITCH.LOOKUPSWITCH(int[],\norg.aspectj.apache.bcel.generic.InstructionHandle[],\norg.aspectj.apache.bcel.generic.InstructionHandle) (this=@610fe70,\nmatch=@6f63b90, targets=@6eeabe0, target=@6949d20)\n    at org/aspectj/apache/bcel/generic/LOOKUPSWITCH.java:80\n#11 0x011d4f94 in org.aspectj.apache.bcel.generic.SWITCH.SWITCH(int[],\norg.aspectj.apache.bcel.generic.InstructionHandle[],\norg.aspectj.apache.bcel.generic.InstructionHandle, int) (this=@6a20978,\nmatch=@5b1ccd0, targets=@6eeac08, target=@6949d20, max_gap=1)\n    at org/aspectj/apache/bcel/generic/SWITCH.java:104\n#12 0x011d5002 in org.aspectj.apache.bcel.generic.SWITCH.SWITCH(int[],\norg.aspectj.apache.bcel.generic.InstructionHandle[],\norg.aspectj.apache.bcel.generic.InstructionHandle) (this=@6a20978,\nmatch=@5b1ccd0, targets=@6eeac08, target=@6949d20)\n    at org/aspectj/apache/bcel/generic/SWITCH.java:109\n#13 0x01332eb6 in\norg.aspectj.weaver.bcel.Utility.copyInstruction(org.aspectj.apache.bcel.generic.Instruction)\n(i=@610fc60)\n    at org/aspectj/weaver/bcel/Utility.java:474\n#14 0x01326f66 in\norg.aspectj.weaver.bcel.LazyMethodGen.packBody(org.aspectj.apache.bcel.generic.MethodGen)\n(this=@6d98000, gen=@6d983c0)\n    at org/aspectj/weaver/bcel/LazyMethodGen.java:813\n#15 0x01326d08 in org.aspectj.weaver.bcel.LazyMethodGen.pack() (this=@6d98000)\nat org/aspectj/weaver/bcel/LazyMethodGen.java:790\n#16 0x01324c81 in org.aspectj.weaver.bcel.LazyMethodGen.getMethod()\n(this=@6d98000) at org/aspectj/weaver/bcel/LazyMethodGen.java:336\n#17 0x0131b502 in\norg.aspectj.weaver.bcel.LazyClassGen.writeBack(org.aspectj.weaver.bcel.BcelWorld)\n(this=@610ff00, world=@5642d20)\n    at org/aspectj/weaver/bcel/LazyClassGen.java:418\n#18 0x0131b95e in\norg.aspectj.weaver.bcel.LazyClassGen.getJavaClass(org.aspectj.weaver.bcel.BcelWorld)\n(this=@610ff00, world=@5642d20)\n    at org/aspectj/weaver/bcel/LazyClassGen.java:446\n#19 0x01311589 in\norg.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(org.aspectj.weaver.bcel.LazyClassGen)\n(this=@a33c0, clazz=@610ff00)\n<snip>\n\nIt might be difficult for me to provide a reproducable test case (it might\ndepend on the gij version, but I can try if wanted). However, happily, having\nexamined the bytecode of the BCEL classes from the first few lines of the stack\ntrace, I think I can explain why this exception occurs without needing to\nprovide a test case.\n\nIt's very simple. Whoever wrote the BCEL code in question, obviously never ran\nit with a data set and on a virtual machine where a hash collision in the\nHashSet would occur. Because, with this BCEL snapshot, if a hash collision does\noccur, the object being added to the HashSet is *guaranteed* to cause a\nNullPointerException in the Comparator method. This can be seen merely by\nexamining the code path described by this stack trace. The field \"targets\" in\nthe LOOKUPSWITCH object has not been initialized when notifyTarget is called, so\nif there is a hash collision in the HashSet, the InstructionComparator will be\ncalled - and it is guaranteed to call getTargets () and access its array length,\nwhich will cause a NullPointerException.\n\nI hope this explanation is sufficiently clear. If not, I will be happy to\nprovide further details."
    },
    "commit": {
      "diff": [
        "bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionComparator.java"
      ]
    }
  },
  "33d8ee9": {
    "bug_report": {
      "summary": "Bug 31460  Weaving class loader",
      "description": "Hi!\n\nAs discussed on the mailing list a few days ago I implemented a weaving class\nloader to enable bytecode based weaving at class loading time. The class loader\nis based on the URLClassLoader and can be used like any other URLClassLoader. In\naddition to that you can add aspects to the weaving loader. These aspects got\nwoven into each class that is loaded. The test cases for the class loader aren't\nimplemented yet, I am still thinking about how to implement them. I will\ncontribute them later, okay?\n\n-Martin"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/testdata/src1/ltw/LTWPackageTest.java",
        "weaver/testsrc/BcweaverModuleTests.java",
        "org.aspectj.ajdt.core/testdata/src1/LTWHelloWorld.java",
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java",
        "weaver/src/org/aspectj/weaver/tools/WeavingClassLoader.java",
        "weaver/src/org/aspectj/weaver/ExtensibleURLClassLoader.java",
        "weaver/testsrc/org/aspectj/weaver/BcweaverTests.java",
        "util/src/org/aspectj/util/FileUtil.java",
        "weaver/src/org/aspectj/weaver/WeavingURLClassLoader.java",
        "weaver/src/org/aspectj/weaver/tools/GeneratedClassHandler.java",
        "weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"
      ]
    }
  },
  "8553b30": {
    "bug_report": {
      "summary": "Bug 352389  overweaving can attribute duplicate attributes, one of which will not deserialize correctly",
      "description": "When overweaving it is possible that a class will get a second WeaverState attribute.  This second one will not be valid (it hasn't been correctly configured).  This isn't normally a problem because the next thing that happens is that the class is defined to the VM.  But if *another* weave step occurs, the malformed attribute will cause that weave to fail with this kind of message:\n\nbad WeaverState.Kind: -115\n\nThe solution is to avoid adding the duplicate when overweaving."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"
      ]
    }
  },
  "e2703cf": {
    "bug_report": {
      "summary": "Bug 131932  structure model bug: generic method ITD",
      "description": "import java.util.List;\n\npublic aspect Slide74 {\n\n\tpublic X Bar<X>.getFirst() {\n\t\treturn lts.get(0);\n\t}\n\t\n\tstatic class Bar<T> {\n\t\tList<T> lts;\n\t}\n}\n\nin AJDT, this program incorrectly shows the relationship from the TYPE to the Bar class rather than from the ITD to the Bar class."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/NewFieldTypeMunger.java",
        "weaver/src/org/aspectj/weaver/NewConstructorTypeMunger.java",
        "weaver/src/org/aspectj/weaver/NewMethodTypeMunger.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"
      ]
    }
  },
  "e0e1330": {
    "bug_report": {
      "summary": "Bug 320468  ModifiersPattern.getModifierFlag() is not thread safe",
      "description": "Build Identifier: org.aspectj.weaver_1.6.0.20080423100000.jar\n\nModifiersPattern.getModifierFlag() is a non-synchronized static method using the static Map modifierFlags. This can lead to a ConcurrentModificationException when this code is executed in a multi-threaded environment. A stack trace showing the erroneous behavior is appended at the end of this bug report.\n\nIn our case multithreading is introduced by using Spring DM. This leads to many application contexts being initialized in parallel. Each of them can contain pointcut expression, which are processed in independent threads. Spring AOP enters the \"AspectJ world\" calling PointcutParser.parsePointcutExpression().\n\nSince there is no guarantee that a ConcurrentModificationException is thrown it is also possible that concurrent read/write accesses to the modifierFlags map are not recognized and incorrect values are used.\n\n\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactoryProxy': Post-processing of the FactoryBean's object failed; nested exception is java.util.ConcurrentModificationException: concurrent access to HashMap attempted by Thread[SpringOsgiExtenderThread-43,5,spring-osgi-extender[6dee6dee]-threads]\n\tat org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:142)\n\tat java.security.AccessController.doPrivileged(AccessController.java:219)\n\tat org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116)\n\tat org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:91)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1288)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:217)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:425)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)\n\tat org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$1600(AbstractDelegatedExecutionApplicationContext.java:69)\n\tat org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:355)\n\tat org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)\n\tat org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)\n\tat org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)\n\tat java.lang.Thread.run(Thread.java:811)\nCaused by: java.util.ConcurrentModificationException: concurrent access to HashMap attempted by Thread[SpringOsgiExtenderThread-43,5,spring-osgi-extender[6dee6dee]-threads]\n\tat java.util.HashMap.onEntry(HashMap.java:214)\n\tat java.util.HashMap.transfer(HashMap.java:686)\n\tat java.util.HashMap.resize(HashMap.java:676)\n\tat java.util.HashMap.addEntry(HashMap.java:1049)\n\tat java.util.HashMap.put(HashMap.java:561)\n\tat org.aspectj.weaver.patterns.ModifiersPattern.getModifierFlag(ModifiersPattern.java:87)\n\tat org.aspectj.weaver.patterns.PatternParser.parseModifiersPattern(PatternParser.java:1169)\n\tat org.aspectj.weaver.patterns.PatternParser.parseMethodOrConstructorSignaturePattern(PatternParser.java:1248)\n\tat org.aspectj.weaver.patterns.PatternParser.parseKindedPointcut(PatternParser.java:603)\n\tat org.aspectj.weaver.patterns.PatternParser.parseSinglePointcut(PatternParser.java:317)\n\tat org.aspectj.weaver.patterns.PatternParser.parseAtomicPointcut(PatternParser.java:295)\n\tat org.aspectj.weaver.patterns.PatternParser.parsePointcut(PatternParser.java:256)\n\tat org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:328)\n\tat org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:309)\n\tat org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:206)\n\tat org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:193)\n\tat org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:174)\n\tat org.springframework.aop.support.AopUtils.canApply(AopUtils.java:195)\n\tat org.springframework.aop.support.AopUtils.canApply(AopUtils.java:250)\n\tat org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:284)\n\tat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:113)\n\tat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:85)\n\tat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:66)\n\tat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:362)\n\tat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:325)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:361)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean(AbstractAutowireCapableBeanFactory.java:1429)\n\tat org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:139)\n\t... 15 more\n\nReproducible: Sometimes"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/patterns/ModifiersPattern.java"
      ]
    }
  },
  "3021284": {
    "bug_report": {
      "summary": "Bug 111915  illegal change to pointcut declaration",
      "description": "org.aspectj.weaver.BCException\nat\norg.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:306)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:229)\nat\norg.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:331)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:229)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:216)\nat org.aspectj.weaver.Advice.concretize(Advice.java:273)\nat org.aspectj.weaver.bcel.BcelAdvice.concretize(BcelAdvice.java:83)\nat\norg.aspectj.weaver.CrosscuttingMembers.addShadowMunger(CrosscuttingMembers.java:84)\nat\norg.aspectj.weaver.CrosscuttingMembers.addShadowMungers(CrosscuttingMembers.java:78)\nat org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:462)\nat\norg.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:62)\nat org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:426)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:283)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat\norg.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:760)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:225)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:151)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nBCException thrown: illegal change to pointcut declaration:\nspike.np.CommandCase.handleCommand(BindingTypePattern(spike.np.OtherHandler$MyWorld,\n0))\nwhen batch building\nBuildConfig[/home/guido/workspace/.metadata/.plugins/org.eclipse.ajdt.core/np.generated.lst]\n#Files=11"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java",
        "tests/bugs150/pr111915.java"
      ]
    }
  },
  "ff0859d": {
    "bug_report": {
      "summary": "Bug 404600  Unhandled RuntimeException",
      "description": "I'm getting an unhandled RuntimeException from STS 3.2.0.RELEASE:\n\njava.lang.RuntimeException\nat org.aspectj.asm.AsmManager.sameType(AsmManager.java:897)\nat org.aspectj.asm.AsmManager.removeRelationshipsTargettingThisType(AsmManager.java:711)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1033)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:514)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeavin ... ndation-domain/src\\/main\\/java<com.scispike.foundation.domain.trait.persistence*PersistableAspect.aj%com.scispike.foundation.domain.trait.persistence)\n\nAndy Clement, this can be reproduced in our private foundation repo's dev branch at commit d879446f2bfd83b51bf711d2931f4b28ce8c1901.\n\nAfter clicking ok on the exception dialog, there is an error marker on the package statement with text:\n\nInternal compiler error: java.lang.RuntimeException: Exception whilst walking up from target com.scispike.foundation.domain.trait.persistence kind=(package declaration) \n hid=(=foundation-domain/src\\/main\\/java<com.scispike.foundation.domain.trait.persistence*PersistableAspect.aj%com.scispike.foundation.domain.trait.persistence) at \n org.aspectj.asm.AsmManager.sameType(AsmManager.java:897)\n\nIf I do a Project\\Clean..., the exception is not reproduced and everything compiles ok.  Next edit repros the exception."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"
      ]
    }
  },
  "3f77e75": {
    "bug_report": {
      "summary": "Bug 122248  BUG for ajdt_1.3_for_eclipse_3.1.zip",
      "description": "Hi !!\nI use ajdt_1.3_for_eclipse_3.1.zip with eclipse 3.1.1 and fick this error when the eclipse try to make the workbrench:\n\n\njava.lang.IllegalStateException\nat org.aspectj.weaver.TypeFactory.createParameterizedType(TypeFactory.java:42)\nat org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX(BcelGenericSignatureToTypeXConverter.java:82)\nat org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX(BcelGenericSignatureToTypeXConverter.java:42)\nat org.aspectj.weaver.bcel.BcelObjectType.unpackGenericSignature(BcelObjectType.java:657)\nat org.aspectj.weaver.bcel.BcelObjectType.getSuperclass(BcelObjectType.java:181)\nat org.aspectj.weaver.ReferenceType.getSuperclass(ReferenceType.java:514)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1192)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1047)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nIllegalStateException thrown: Expecting raw type"
    },
    "commit": {
      "diff": [
        "weaver/testsrc/org/aspectj/weaver/MemberTestCase15.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelField.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelMethod.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"
      ]
    }
  },
  "1b54b4b": {
    "bug_report": {
      "summary": "Bug 263837  Error during Delete AJ Markers",
      "description": "Error sent through the AJDT mailing list.  I believe this is an LTW weaving error, so not raising it against AJDT."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"
      ]
    }
  },
  "b5f4d09": {
    "bug_report": {
      "summary": "Bug 88652  an array type as the last parameter in a signature does not match on the varargs declared method",
      "description": "I get this warning in my code, though I actually do not specify an array type.\n\nThe signature I want to match is the following constructor signature:\n\npublic Touple(Object formulaHandle, Object... propositions) {...}\n\nTouple implements IRelation\n\nThe pointcut I use is the following:\n\npointcut p(): call(Touple.new(..));\n\nThis should actually match the signature, shouldn't it?\nAspectJ however complains with this warning:\n\nan array type as the last parameter in a signature does not match on the varargs \ndeclared method: void ltlrv.Touple.<init>(java.lang.Object, java.lang.Object[]) \n[Xlint:cantMatchArrayTypeOnVarargs]\n\nAlso, even if I *had* stated an array type, it should match even then IMHO, \nsince arrays and varargs are actually the same in the Java implementation."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/TypePattern.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"
      ]
    }
  },
  "f376a21": {
    "bug_report": {
      "summary": "Bug 245734  AJDT throws a RuntimeException from EclipseResolvedMember.getAnnotations",
      "description": "Build ID: N/A\n\nSteps To Reproduce:\nThis exception is happening for us in both Eclipse 3.4 and 3.3 when we run an incremental build on one of our projects.\n\nWe are using an aspect to declare an annotation on a class in the project, and we only started seeing this exception after we added it.  \n\nA clean build on the project never throws the exception, only an incremental build.\n\n\nMore information:\nThe Exception Stack Trace:\n\njava.lang.RuntimeException\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getAnnotations(EclipseResolvedMember.java:78)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations(AjLookupEnvironment.java:794)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:592)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironmen ... \nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)\n\nCompile error: RuntimeException thrown: not yet implemented - please raise an AJ bug\n\n\nI was going to include the AJDT Event log for the build but it is very long, and mostly unremarkable, \nso I have included only the section for the project where the exception was thrown.\n\n11:9:50 Build kind = INCREMENTALBUILD\n11:9:50 Project=ICODES, kind of build requested=Incremental AspectJ compilation\n11:9:50 build: Examined delta - source file changes in required project ICODES\n11:9:51 Found state instance managing output location : C:\\jnaylor\\Java_Dev\\workspace\\ICDM\n11:9:51 Failed to find a state instance managing output location : C:\\jnaylor\\Java_dev\\workspace\\Dependencies\\MARVEL\\resources\n11:9:51 Failed to find a state instance managing output location : C:\\jnaylor\\Java_Dev\\workspace\\GSG\n11:9:52 Failed to find a state instance managing output location : C:\\jnaylor\\Java_dev\\.build\\Launch4J\n11:9:52 Preparing for build: planning to be an incremental build\n11:9:52 Starting incremental compilation loop 1 of possibly 5\n11:9:52 AJDE Callback: finish. Was full build: false\n11:9:52 Timer event: 2172ms: Total time spent in AJDE\n11:9:54 Timer event: 47ms: Create element map (0 rels in project: ICODES)\n11:9:54 Types affected during build = 0\n11:9:54 Timer event: 0ms: Add markers (0 markers)\n11:9:54 Timer event: 3735ms: Total time spent in AJBuilder.build()\n11:9:54 ===========================================================================================\n\n\nThis is occurring frequently, but not every time so we haven't been able to narrow down a reasonable sized test case."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java"
      ]
    }
  },
  "81a0790": {
    "bug_report": {
      "summary": "Bug 108118  Complete implementation of @SuppressAjWarnings",
      "description": "ensure that @SuppressAJWarnings are indeed suppressed during pointcut\noperations. This requires wrapping major pointcut operations with calls to Lint\nfrom the associated advice."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java",
        "weaver/src/org/aspectj/weaver/bcel/Utility.java"
      ]
    }
  },
  "6e8bf52": {
    "bug_report": {
      "summary": "Bug 119352  AjType.getSupertype breaks for null",
      "description": "I ran into this while using reflection proxies with LTW... See attached patches for these test cases and my fix:\n\n\tpublic void testObjectSupertype() {\n\t\tAjType<?> objectSuper = AjTypeSystem.getAjType(Object.class).getSupertype();\n\t\tassertNull(objectSuper);\t\t\n\t}\n\n\tpublic void testInterfaceSupertype() {\n\t\tAjType<?> serializableSuper = AjTypeSystem.getAjType(Serializable.class).getSupertype();\n\t\tassertNull(serializableSuper);\t\t\n\t}\n\t\n\tpublic AjType<? super T> getSupertype() {\n\t\tClass<? super T> superclass = clazz.getSuperclass();\n\t\treturn superclass==null ? null : (AjType<? super T>) new AjTypeImpl(superclass);\n\t}"
    },
    "commit": {
      "diff": [
        "aspectj5rt/java5-testsrc/org/aspectj/internal/lang/reflect/AjTypeTests.java",
        "aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java"
      ]
    }
  },
  "ab2f89b": {
    "bug_report": {
      "summary": "Bug 123612  ArrayIndexOutOfBoundsException with incremental and declare @type",
      "description": "Given the following code:\n\n-------------------------------------------------\npublic aspect A {\n\tdeclare @type : C : @MyAnnotation;\n}\n@interface MyAnnotation {\t\n}\n\nclass C {\n}\n-------------------------------------------------\n\nif you comment out the declare @type statement and do an incremental build, then the following ArrayIndexOutOfBoundsException occurs:\n\njava.lang.ArrayIndexOutOfBoundsException: 0\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations(AjLookupEnvironment.java:754)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:571)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes(AjLookupEnvironment.java:357)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:209)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\n\tat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\n\n\nThis is against the latest code in HEAD."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"
      ]
    }
  },
  "8a8930f": {
    "bug_report": {
      "summary": "Bug 81863  Annotation matching using within() PCD doesn't appear to be working.",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/TypePattern.java",
        "tests/src/org/aspectj/systemtest/ajc150/AnnotationPointcutsTests.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java",
        "tests/java5/annotations/within/PlainWithin.java",
        "tests/src/org/aspectj/systemtest/ajc150/AnnotationRuntimeTests.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java"
      ]
    }
  },
  "88d477d": {
    "bug_report": {
      "summary": "Bug 94086  Exploding compile time with if() statements in pointcut",
      "description": "Compile time explodes when adding if(...) statements to pointcuts.\nThis is the same with ajc 1.2.1 and 1.5M2 although 1.5M2 is a little bit faster,\nbut compile time still explodes.\n\nExample:\n    pointcut pc2() :\n        (execution(* Test.a(..)) && if(sl.isEnabled()) )\n        || (execution(* Test.a(..)) && if(sl.isEnabled()) )\n\ncompiled in about 1 second.\n\nUp to 7 such conditions , eg.\n    pointcut Pc7() :\n        (execution(* Test.a(..)) && if (sl.isEnabled()))\n        || (execution(* Test.b(..)) && if (sl.isEnabled()))\n        || (execution(* Test.c(..)) && if (sl.isEnabled()))\n        || (execution(* Test.d(..)) && if (sl.isEnabled()))\n        || (execution(* Test.e(..)) && if (sl.isEnabled()))\n        || (execution(* Test.f(..)) && if (sl.isEnabled()))\n        || (execution(* Test.g(..)) && if (sl.isEnabled()));\n\nare also compiled quite quickly (~ 3 seconds with both ajc 1.2.1 and 1.5M2).\n\nNow, adding another condition (8 lines) causes 6 seconds compile time. Adding\nyet another condition line (= 9 ex. lines) causes ~ 1 min compile time!\n(10 such lines even more than 8 minutes)\n\nSample source code below\n------------------------\n\n// ########## Aspect.aj ###############\n\npublic aspect Aspect {\n    private static final SimpleLogger sl\n        = new SimpleLogger();\n\n    pointcut PC() :\n        (execution(* Test.a(..)) && if (sl.isEnabled()))\n        || (execution(* Test.b(..)) && if (sl.isEnabled()))\n        || (execution(* Test.c(..)) && if (sl.isEnabled()))\n        || (execution(* Test.d(..)) && if (sl.isEnabled()))\n        || (execution(* Test.e(..)) && if (sl.isEnabled()))\n        || (execution(* Test.f(..)) && if (sl.isEnabled()))\n        || (execution(* Test.g(..)) && if (sl.isEnabled()))\n        || (execution(* Test.h(..)) && if (sl.isEnabled()))\n        || (execution(* Test.i(..)) && if (sl.isEnabled()))\n        || (execution(* Test.j(..)) && if (sl.isEnabled()))\n        ;\n\n    before() : PC() {\n        sl.log(\"Before\");\n    }\n\n    after() : PC() {\n        sl.log(\"After\");\n    }\n}\n\n// ########## Test.java ###############"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "167b801": {
    "bug_report": {
      "summary": "Bug 340806  Race condition in JavaLangTypeToResolvedTypeConverter (potentially exposed through Spring AOP)",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver5/java5-src/org/aspectj/weaver/reflect/JavaLangTypeToResolvedTypeConverter.java"
      ]
    }
  },
  "114db35": {
    "bug_report": {
      "summary": "Bug 203384  AST: Type information not exposed on itmd, itfd...",
      "description": "The Types:\n\norg/aspectj/org/eclipse/jdt/core/dom/InterTypeFieldDeclaration.java\norg/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java\n\nWhich can be returned by visiting the AjAST tree do not expose the name of the type on which the method or field is added. I require this information in the project I'm currently working on, and would appreciate if it was added."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeFieldDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTConverter.java"
      ]
    }
  },
  "b9c7a19": {
    "bug_report": {
      "summary": "Bug 389750  Inconsistent classfile encountered: The undefined type parameter xxx is referenced from within yyy",
      "description": "With the declare parents pattern below, I'm getting this **runtime** error (compiler completes ok):\n\nInconsistent classfile encountered: The undefined type parameter ID is referenced from within PersistableAspect\n\nIf I remove the generics part of the interface declaration, the error goes away.  Here's the pattern:\n\ninterface:\n==========\npackage example.trait;\n\n// imports...\n\npublic interface Persistable<ID extends Serializable> {\n\n\tObject getOid();\n\n\tID getId();\n\n\tString getIdString();\n\n\tlong getVersion();\n}\n\nannotation:\n===========\npackage example.anno;\n\n// imports...\n\n@Target(TYPE)\n@Retention(RUNTIME)\n@Trait\npublic @interface Persistable {\n\n\tString in() default \"MONGO\";\n\n\tStoreType inAsEnum() default StoreType.MONGO;\n\n\tString id() default \"STRING\";\n\n\tIdType idAsEnum() default IdType.STRING;\n}\n\n\naspect:\n=======\npackage example.aspect;\n\n// imports...\n\npublic privileged aspect PersistableAspect {\n\n\tpublic interface I<ID extends Serializable> extends example.trait.Persistable<ID> {\n\t}\n\n\tpublic interface L extends I<Long> {\n\t}\n\n\tpublic interface S extends I<String> {\n\t}\n\n\tdeclare parents :\n        (@Persistable(id=\"LONG\") *)\n        implements L;\n\n\tdeclare parents :\n        (@Persistable(id=\"STRING\") *)\n        implements S;\n\n\t// remaining code is ITDs introducing vars & methods...\n}"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java",
        "tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java",
        "tests/bugs172/pr389750/Clazz3.java",
        "tests/bugs172/pr389750/Clazz2.java",
        "tests/bugs172/pr389750/Clazz4.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java",
        "tests/src/org/aspectj/systemtest/ajc172/AllTestsAspectJ172.java",
        "tests/src/org/aspectj/systemtest/AllTests17.java",
        "tests/bugs172/pr389750/Clazz.java"
      ]
    }
  },
  "6aa7516": {
    "bug_report": {
      "summary": "Bug 76798  Add versions to woven class files - enabling better backwards compatibility.",
      "description": "We don't currently include a version in the class files that come out of the\nweaver.  This can cause problems.  For example, if we add a new attribute to a\nclass file in a future version of AspectJ, then that attribute will cause older\nversions of AspectJ to blow up if they encounter it.  If we include a version in\nthe class file we can rev the version number when we add attributes (or change\nthe class file form in another way), and by checking that version number in the\nweaver we can better determine whether we should fail if we encounter a new\nattribute (or other change), or if it is safe to continue processing.\n\nI will add a new WeaverVersion attribute that includes 2 shorts.  Major and Minor.\n\nEncountering a major version in a class file that is greater than the version a\nparticular weaver is designed to understand will cause compilation to fail.\n\nEncountering a minor version in a class file that is greater than the minor\nversion a particular weaver is designed to understand will not cause compilation\nto fail - we will assume it is safe to continue."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java",
        "weaver/src/org/aspectj/weaver/AjAttribute.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelField.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelMethod.java"
      ]
    }
  },
  "757004c": {
    "bug_report": {
      "summary": "Bug 149908  NPE in org.aspectj.weaver.MemberImpl.getModifiers(MemberImpl.java:526)",
      "description": "java.lang.NullPointerException\n\tat org.aspectj.weaver.MemberImpl.getModifiers(MemberImpl.java:526)\n\tat org.aspectj.weaver.MemberImpl.getMethodSignatureString(MemberImpl.java:824)\n\tat org.aspectj.weaver.MemberImpl.getSignatureString(MemberImpl.java:753)\n\tat org.aspectj.weaver.bcel.LazyClassGen.initializeTjp(LazyClassGen.java:1039)\n\tat org.aspectj.weaver.bcel.LazyClassGen.initializeAllTjps(LazyClassGen.java:1016)\n\tat org.aspectj.weaver.bcel.LazyClassGen.addAjcInitializers(LazyClassGen.java:964)\n\tat org.aspectj.weaver.bcel.LazyClassGen.writeBack(LazyClassGen.java:502)\n\tat org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable(LazyClassGen.java:652)\n\tat org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(BcelWeaver.java:1337)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1309)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:284)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:212)\n\tat org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass(WeavingURLClassLoader.java:125)\n\tat org.aspectj.weaver.ExtensibleURLClassLoader.defineClass(ExtensibleURLClassLoader.java:80)\n\tat org.aspectj.weaver.ExtensibleURLClassLoader.findClass(ExtensibleURLClassLoader.java:46)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\nException in thread \"main\" \n\npublic aspect JoinPointTraceAspect {\n\t\n\tprivate int _callDepth = -1;\n\t\n\tpointcut tracePoints() : !within(JoinPointTraceAspect);\n\t\n\tbefore() : tracePoints() {\n\t\t_callDepth++; print(\"Before\", thisJoinPoint);\n\t}\n\t\n\tafter() : tracePoints() {\n\t\tprint(\"After\", thisJoinPoint);\n\t\t_callDepth--;\n\t}\n\t\n\tprivate void print(String prefix, Object message) {\n\t\tfor(int i = 0, spaces = _callDepth * 2; i < spaces; i++) {\n\t\t\tSystem.out.print(\" \");\n\t\t}\n\t\t\n\t\tSystem.out.println(prefix + \": \" + message);\n\t}\n}\n\naspect EdtRuleChecker {\n    private boolean isStressChecking = true;\n    \n    public pointcut anySwingMethods(JComponent c):\n         target(c) && call(* *(..));\n\n    public pointcut threadSafeMethods():         \n         call(* repaint(..)) || \n         call(* revalidate()) ||\n         call(* invalidate()) ||\n         call(* getListeners(..)) ||\n         call(* add*Listener(..)) ||\n         call(* remove*Listener(..));\n\n    //calls of any JComponent method, including subclasses\n    before(JComponent c): anySwingMethods(c) && \n                          !threadSafeMethods() &&\n                          !within(EdtRuleChecker) {\n     if(!SwingUtilities.isEventDispatchThread() &&\n         (isStressChecking || c.isShowing())) \n     {\n             System.err.println(thisJoinPoint.getSourceLocation());\n             System.err.println(thisJoinPoint.getSignature());\n             System.err.println();\n      }\n    }\n\n    //calls of any JComponent constructor, including subclasses\n    before(): call(JComponent+.new(..)) {\n      if (isStressChecking && !SwingUtilities.isEventDispatchThread()) {\n          System.err.println(thisJoinPoint.getSourceLocation());\n          System.err.println(thisJoinPoint.getSignature() +\n                                \" *constructor*\");\n          System.err.println();\n      }\n    }\n}\n\nRunning with SwingSet2."
    },
    "commit": {
      "diff": [
        "tests/bugs153/pr149908/withoutMethod/MyStringBuilder.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java",
        "weaver/src/org/aspectj/weaver/MemberImpl.java",
        "tests/bugs153/pr149908/C1.java",
        "tests/bugs153/pr149908/MyStringBuilder.java",
        "tests/bugs153/pr149908/C.java"
      ]
    }
  },
  "8e4d898": {
    "bug_report": {
      "summary": "Bug 73433  AspectJ does not correctly support -cp",
      "description": "Discovered by Andy Brodie.\n\n-cp is a shorthand for -classpath supported by the JDT compiler.  AspectJ does\nnot correctly support -cp option.  Look at this example:\n\nC:\\aspectj1.2>ajc -inpath injar.jar -outjar outjar.jar -cp lib\\aspectjrt.jar\n[error] can't find type org.aspectj.lang.JoinPoint\n\n\n1 error\n\nC:\\aspectj1.2>ajc -inpath injar.jar -outjar outjar.jar -classpath lib\\aspectjrt.jar\n\nThis is due to the arg parser in AspectJ only recognizing -classpath.  It\ndoesn't fail when it encounters -cp, it just ignores it and passes it down to\nJDT for processing.  The fix is to recognize -cp too."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"
      ]
    }
  },
  "6b2d9ae": {
    "bug_report": {
      "summary": "Bug 138223  Compiler crash on two binding @xxx pcds in one compound expression",
      "description": "junit.framework.AssertionFailedError: test \"Double at annotation matching (no binding)\" failed\ntest \"Double at annotation matching (no binding)\" failed\nUnexpected warning messages:\n\twarning at before() : transactionalOperation() {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:20:0::0 advice defined in DoubleAnnotationMatching has not been applied [Xlint:adviceDidNotMatch]\nUnexpected fail messages:\n\tabort trouble in: \n class Foo extends java.lang.Object:\n  void <init>():\n                    ALOAD_0     // LFoo; this   (line 26)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void Foo.<init>())\n    |               RETURN\n    constructor-execution(void Foo.<init>())\n  end void <init>()\n\n  public void foo()    org.aspectj.weaver.MethodDeclarationLineNumber: 28:533\n:\n    method-execution(void Foo.foo())\n    |               RETURN   (line 28)\n    method-execution(void Foo.foo())\n  end public void foo()\n\n  public void bar()    org.aspectj.weaver.MethodDeclarationLineNumber: 30:563\n:\n    method-execution(void Foo.bar())\n    |               RETURN   (line 30)\n    method-execution(void Foo.bar())\n  end public void bar()\n\nend  class Foo\n -- (BCException) Impossible! annotation=[Tx]  shadow=[method-execution(void Foo.foo()) at /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533]    pointcut is at [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316]\nwhen implementing on shadow method-execution(void Foo.foo())\nwhen weaving type Foo\nwhen weaving classes \nwhen weaving \nwhen batch building BuildConfig[null] #Files=1\n\nImpossible! annotation=[Tx]  shadow=[method-execution(void Foo.foo()) at /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533]    pointcut is at [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316]\nwhen implementing on shadow method-execution(void Foo.foo())\nwhen weaving type Foo\nwhen weaving classes \nwhen weaving \nwhen batch building BuildConfig[null] #Files=1\n\norg.aspectj.weaver.BCException: Impossible! annotation=[Tx]  shadow=[method-execution(void Foo.foo()) at /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533]    pointcut is at [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316]\nwhen implementing on shadow method-execution(void Foo.foo())\nwhen weaving type Foo\nwhen weaving classes \nwhen weaving \nwhen batch building BuildConfig[null] #Files=1\n\n\tat org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal(AnnotationPointcut.java:201)\n\tat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\n\tat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)\n\tat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\n\tat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)\n\tat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\n\tat org.aspectj.weaver.patterns.IfPointcut.findResidueInternal(IfPointcut.java:173)\n\tat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\n\tat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)\n\tat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\n\tat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)\n\tat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\n\tat org.aspectj.weaver.patterns.OrPointcut.findResidueInternal(OrPointcut.java:96)\n\tat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267)\n\tat org.aspectj.weaver.bcel.BcelAdvice.specializeOn(BcelAdvice.java:132)\n\tat org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:325)\n\tat org.aspectj.weaver.Shadow.implement(Shadow.java:455)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2236)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:491)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1113)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183)\n\tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:114)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:367)\n\tat org.aspectj.tools.ajc.Main.runMain(Main.java:246)\n\tat org.aspectj.tools.ajc.Ajc.compile(Ajc.java:199)\n\tat org.aspectj.tools.ajc.Ajc.compile(Ajc.java:163)\n\tat org.aspectj.tools.ajc.AjcTestCase.ajc(AjcTestCase.java:510)\n\tat org.aspectj.testing.CompileSpec.execute(CompileSpec.java:53)\n\tat org.aspectj.testing.AjcTest.runTest(AjcTest.java:68)\n\tat org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111)\n\tat org.aspectj.systemtest.ajc152.Ajc152Tests.testDoubleAnnotationMatching_pr138221(Ajc152Tests.java:37)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\n\ncommand was: ajc -classpath /Users/adrian/projects/aspectjdev/lib/test/aspectjrt.jar:../testing-client/bin:../runtime/bin:../aspectj5rt/bin:../lib/junit/junit.jar:../bridge/bin:../loadtime/bin:../weaver/bin:../weaver5/bin:../aj-build/jars/bridge.jar:../aj-build/jars/util.jar:../aj-build/jars/loadtime.jar:../aj-build/jars/weaver.jar:../aj-build/jars/weaver5.jar:../aj-build/jars/asm.jar:../lib/test/testing-client.jar:../lib/test/aspectjrt.jar:/tmp/ajcSandbox/ajcTest18924.tmp -1.5 /tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj -d /tmp/ajcSandbox/ajcTest18924.tmp\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat org.aspectj.tools.ajc.AjcTestCase.assertMessages(AjcTestCase.java:452)\n\tat org.aspectj.testing.CompileSpec.execute(CompileSpec.java:56)\n\tat org.aspectj.testing.AjcTest.runTest(AjcTest.java:68)\n\tat org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111)\n\tat org.aspectj.systemtest.ajc152.Ajc152Tests.testDoubleAnnotationMatching_pr138221(Ajc152Tests.java:37)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"
      ]
    }
  },
  "8660cc1": {
    "bug_report": {
      "summary": "Bug 42539  throw derivative pointcuts not advised.",
      "description": "Given the following point cut and advice:\n\npublic aspect ExceptionAspect\n{\n    pointcut exceptionThrower() : execution(public * ExceptionBugTest.*(..)\nthrows Exception+);\n\n    declare warning : exceptionThrower() : \"throws Exception+\";\n}\n\nAnd the to be aspected code:\n\npublic class ExceptionBugTest\n{\n\n    class MyException extends Exception\n    {\n    }\n\n    public void method1() throws Exception\n    {\n    }\n\n    public void method2() throws MyException\n    {\n    }\n}\n\nlisting file default.lst:\nC:\\temp\\AJC Bug\\ExceptionAspect.aj\nC:\\temp\\AJC Bug\\ExceptionBugTest.java\n\n\nAJC does not advise ExceptionBugTest.method2().  The output from the compilation\nis the following:\nC:\\temp\\AJC Bug>ajc -argfile default.lst -classpath %ASPECTJ_HOME%\\lib\\aspectjrt.jar\nC:\\eclipse\\workspace\\AJC Bug\\ExceptionBugTest.java:11 throws Exception+\n\nFrom the aspect-j mailing list, contributed by Jim Hugunin:\n&lt;detail&gt;The bug was caused because the code for ThrowsPattern mistakenly\nused the internal protected method TypePattern.matchesExactly instead of the\nexternal public method TypePattern.matchesStatically.  Because the classes were\nin the same package, Java's accessibility rules allowed this.  It would be nice\nif there was an easy way to specifiy that a method could only be accessed from\nsubtypes.&lt;/detail&gt;"
    },
    "commit": {
      "diff": [
        "tests/bugs/throwsSignature/ExceptionAspect.java",
        "weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java",
        "tests/bugs/throwsSignature/ExceptionBugTest.java"
      ]
    }
  },
  "ff2377a": {
    "bug_report": {
      "summary": "Bug 152631  Problem with decp on an aspect using cflow",
      "description": "This occurs in the AspectJ build in AJDT from August 1 but not from July 31:\n\njava.lang.NullPointerException\nat org.aspectj.weaver.bcel.BcelTypeMunger.enforceDecpRule1_abstractMethodsImplemented(BcelTypeMunger.java:250)\nat org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewParent(BcelTypeMunger.java:194)\nat org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:106)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:454)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:119)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1597)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1548)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1328)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1124)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:451)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:389)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:377)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:891)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:246)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:165)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in:public class glassbox.agent.ErrorContainmentTest$ErrorMockAspect extends java.lang.Object implements glassbox.agent.api.NotSerializable:\nprivate static Throwable ajc$initFailureCause [Synthetic]\npublic static final glassbox.agent.ErrorContainmentTest$ErrorMockAspect ajc$perSingletonInstance [Synthetic]\nstatic void <clinit>():\ncatch java.lang.Throwable -> E0\n|               INVOKESTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$postClinit ()V   (line 60)\ncatch java.lang.Throwable -> E0\nGOTO L0\nE0: ASTORE_0\nALOAD_0\nPUTSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$initFailureCause Ljava/lang/Throwable;\nL0: RETURN\nend static void <clinit>()\nvoid <init>():\nALOAD_0     // Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; this   (line 60)\nINVOKESPECIAL java.lang.Object.<init> ()V\nRETURN\nend void <init>()\npublic void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$1$9589fc()    AdviceAttribute(before, (scope() && call(* hook1())), 0, 1670)\n:\nNEW java.lang.RuntimeException   (line 64)\nDUP\nLDC \"rte\"\nINVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/String;)V\nATHROW\nend public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$1$9589fc()\npublic void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$2$f75db3e2()    AdviceAttribute(before, execution(* glassbox.agent.ErrorContainmentTest.hook5()), 0, 1764)\n:\nNEW java.lang.RuntimeException   (line 67)\nDUP\nLDC \"rte\"\nINVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/String;)V\nATHROW\nend public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$2$f75db3e2()\npublic void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17d(org.aspectj.runtime.internal.AroundClosure)    AdviceAttribute(around, (scope() && call(* hook2())), 1, 1913)\n:\nNEW java.lang.Error   (line 71)\nDUP\nLDC \"foo\"\nINVOKESPECIAL java.lang.Error.<init> (Ljava/lang/String;)V\nATHROW\nend public void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17d(org.aspectj.runtime.internal.AroundClosure)\nstatic void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17dproceed(org.aspectj.runtime.internal.AroundClosure) throws java.lang.Throwable    org.aspectj.weaver.AjAttribute$AjSynthetic@19a01f9\n:\nALOAD_0     // Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; this   (line 1)\nICONST_0\nANEWARRAY java.lang.Object\nINVOKEVIRTUAL org.aspectj.runtime.internal.AroundClosure.run ([Ljava/lang/Object;)Ljava/lang/Object;\nINVOKESTATIC org.aspectj.runtime.internal.Conversions.voidValue (Ljava/lang/Object;)Ljava/lang/Object;\nRETURN\nend static void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17dproceed(org.aspectj.runtime.internal.AroundClosure) throws java.lang.Throwable\npublic void ajc$after$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$4$bfd07f()    AdviceAttribute(after, (scope() && call(* hook4())), 0, 1991)\n:\nNEW org.aspectj.lang.SoftException   (line 74)\nDUP\nACONST_NULL\nINVOKESPECIAL org.aspectj.lang.SoftException.<init> (Ljava/lang/Throwable;)V\nATHROW\nend public void ajc$after$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$4$bfd07f()\npublic void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$5$e5bddfdc()    AdviceAttribute(before, logErrorInTest(), 0, 2446)\n:\nGETSTATIC glassbox.agent.ErrorContainmentTest.logCount I   (line 84)\nICONST_1\nIADD\nPUTSTATIC glassbox.agent.ErrorContainmentTest.logCount I\nRETURN   (line 85)\nend public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$5$e5bddfdc()\npublic void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$6$16ecfe62()    AdviceAttribute(before, (adviceexecution(* *) && (within(glassbox.util.logging.api.LogManagement) && (cflow(logError()) && cflow((execution(* testLoggingError(..)) && within(glassbox.agent.ErrorContainmentTest)))))), 0, 2506)\n:\nGETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 87)\nLDC \"match\"\nINVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\nRETURN   (line 88)\nend public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$6$16ecfe62()\npublic void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$7$e9ae8482()    AdviceAttribute(before, (adviceexecution(* *) && (within(glassbox.util.logging.api.LogManagement) && cflow((execution(* testLoggingError(..)) && within(glassbox.agent.ErrorContainmentTest))))), 0, 2721)\n:\nGETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 90)\nLDC \"match in test\"\nINVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\nRETURN   (line 91)\nend public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$7$e9ae8482()\npublic void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$8$c6ac5351()    AdviceAttribute(before, (adviceexecution(* *) && (within(glassbox.util.logging.api.LogManagement) && cflow(logError()))), 0, 2923)\n:\nGETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 93)\nLDC \"match in log\"\nINVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\nRETURN   (line 94)\nend public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$8$c6ac5351()\npublic void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$9$16ecfe62()    AdviceAttribute(before, (adviceexecution(* *) && (within(glassbox.util.logging.api.LogManagement) && (cflow(logError()) && cflow((execution(* testLoggingError(..)) && within(glassbox.agent.ErrorContainmentTest)))))), 0, 3069)\n:\nGETSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I   (line 96)\nICONST_1\nIADD\nPUTSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I\nGETSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I   (line 97)\nICONST_2\nIF_ICMPGE L0\nNEW java.lang.RuntimeException   (line 98)\nDUP\nLDC \"recursive logging failure\"\nINVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/String;)V\nATHROW\nL0: RETURN   (line 100)\nend public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$9$16ecfe62()\npublic static glassbox.agent.ErrorContainmentTest$ErrorMockAspect aspectOf()    org.aspectj.weaver.AjAttribute$AjSynthetic@3cd8fe\n:\nGETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect;   (line 1)\nIFNONNULL L0\nNEW org.aspectj.lang.NoAspectBoundException\nDUP\nLDC \"glassbox_agent_ErrorContainmentTest$ErrorMockAspect\"\nGETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$initFailureCause Ljava/lang/Throwable;\nINVOKESPECIAL org.aspectj.lang.NoAspectBoundException.<init> (Ljava/lang/String;Ljava/lang/Throwable;)V\nATHROW\nL0: GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect;\nARETURN\nend public static glassbox.agent.ErrorContainmentTest$ErrorMockAspect aspectOf()\npublic static boolean hasAspect()    org.aspectj.weaver.AjAttribute$AjSynthetic@1bd4f6\n:\nGETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect;   (line 1)\nIFNULL L0\nICONST_1\nIRETURN\nL0: ICONST_0\nIRETURN\nend public static boolean hasAspect()\nprivate static void ajc$postClinit()    org.aspectj.weaver.AjAttribute$AjSynthetic@1febf91\n:\nNEW glassbox.agent.ErrorContainmentTest$ErrorMockAspect   (line 1)\nDUP\nINVOKESPECIAL glassbox.agent.ErrorContainmentTest$ErrorMockAspect.<init> ()V\nPUTSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect;\nRETURN\nend private static void ajc$postClinit()\nend public class glassbox.agent.ErrorContainmentTest$ErrorMockAspect\nwhen type munging with (BcelTypeMunger ResolvedTypeMunger(Parent, null))\nwhen weaving aspects\nwhen weaving\nwhen batch building BuildConfig[C:\\devel\\glassbox\\.metadata\\.plugins\\org.eclipse.ajdt.core\\glassboxMonitor.generated.lst] #Files=107\n\nThe source is:\n\npublic class ErrorContainmentTest extends TestCase {\n...\n\tstatic aspect ErrorMockAspect implements NotSerializable {\n...\n\nI will try to narrow this down if the problem isn't obvious."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "tests/bugs153/pr152631/EMA.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "4934132": {
    "bug_report": {
      "summary": "Bug 125657  NullPointerException from BcelShadow.java:1313",
      "description": "From within Eclipse 3.0 (RAD 6.0.1) I get an error with the (partial) details listed below.  My aspect looks like this:\n\npublic aspect AAwtEventDispatcherThreadProtection\n{\n  pointcut awtComponentMethod(java.awt.Component component):\n    target(component) && call(* *.*(..));\n\n  before(java.awt.Component component): awtComponentMethod(component) {\n    if (!SwingUtilities.isEventDispatchThread() && component.isDisplayable())\n    {\n      System.err.println(\"AWT Component method called from another Thread than the AWT-EventDispatchThread! source: \" + \n                         thisJoinPoint.getSourceLocation() + \", target: \" + thisJoinPoint.toLongString());\n    }\n  }\n}\n\n----------------\nDETAILS (shortened because the size exceeded the 65k limit):\n\n\njava.lang.NullPointerException\nat \tat org.aspectj.weaver.bcel.BcelShadow.ensureTargetTypeIsCorrect(BcelShadow.java:1313)\nat \tat org.aspectj.weaver.bcel.BcelShadow.initializeTargetVar(BcelShadow.java:1274)\nat \tat org.aspectj.weaver.bcel.BcelShadow.getTargetVar(BcelShadow.java:968)\nat \tat org.aspectj.weaver.patterns.ThisOrTargetPointcut.findResidueInternal(ThisOrTargetPointcut.java:185)\nat \tat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)\nat \tat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)\nat \tat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)\nat \tat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)\nat \tat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)\nat \tat org.aspectj.weaver.bcel.BcelAdvice.specializeOn(BcelAdvice.java:132)\nat \tat org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:313)\nat \tat org.aspectj.weaver.Shadow.implement(Shadow.java:404)\nat \tat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)\nat \tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)\nat \tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\nat \tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)\nat \tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\nat \tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\nat \tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\nat \tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\nat \tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat \tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat \tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)\nat \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)\nat \tat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat \tat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic class com.sun.imageio.plugins.gif.GIFImageMetadata extends javax.imageio.metadata.IIOMetadata:"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"
      ]
    }
  },
  "94159f9": {
    "bug_report": {
      "summary": "Bug 109614  [waiting-on-build] [iajc.task] java.lang.RuntimeException: Ranges must be updated with an enclosing instructionList",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/pr109614.java"
      ]
    }
  },
  "0071cb4": {
    "bug_report": {
      "summary": "Bug 38824  Anomalous handling of inter-type declarations to abstract base classes in aspectj 1.1",
      "description": "Version 1.1 of aspectj does not handle correctly inter-type declarations to\nabstract base classes.\n\nThis appears when the following pattern is present in the code:\n\nSuppose there is an interface InterfaceA, another interface InterfaceB and a\nthird interface InterfaceC extending InterfaceA and InterfaceB and containing\nsome method declarations of its own. \n\nSuppose also there is an aspect AConcretisingAspect that contains inter-type\ndeclarations providing default implementations for all InterfaceC's methods\n(both own and inherited).\n\nNow suppose we have a class hierarchy emanating from an abstract class\nBaseClass, and an aspect BaseClassAspect declaring that BaseClass implements\nInterfaceC:\n\naspect BaseClassAspect {\n     declare parents: BaseClass implements InterfaceC;\n}\n\nUnfortunately, during compilation iajc complains for each offspring of BaseClass\nthat it does not implement any of the abstract methods of InterfaceA and\nInterfaceB (but not of InterfaceC's own!).\n\nThis does not happen when BaseClass is not abstract; and it does not occur in\nversion 1.0.6 of aspectj."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "tests/bugs/AbstractBaseAndInterTypeInterface.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java"
      ]
    }
  },
  "b184363": {
    "bug_report": {
      "summary": "Bug 69459  Hiding of Instance Methods by static methods",
      "description": "Using Introduction it is possible to hide instance methods by static methods.\nExample:\n\nclass Super {\n  public void m(){};\n}\nclass Sub {}\n\naspect A {\n  public static void Sub.m(){}\n}\n\nAcccording to the Java Language Specification this is not allowed. Is this\nbehaviour desired ??\n\nIt is also possible to override static methods by instance methods, wich causes\na compile time error in java."
    },
    "commit": {
      "diff": [
        "tests/bugs/intertypeOverrides/Subclass.java",
        "tests/bugs/intertypeOverrides/Superclass.java",
        "tests/bugs/intertypeOverrides/IntertypeOverrides2.java",
        "tests/bugs/intertypeOverrides/Aspect1.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java",
        "tests/bugs/intertypeOverrides/Aspect2.java",
        "tests/bugs/intertypeOverrides/IntertypeOverrides.java"
      ]
    }
  },
  "7a7d6f0": {
    "bug_report": {
      "summary": "Bug 269840  [model] package search fails in binary aspect in same package as a source type",
      "description": "If type a.b.c.C is advised by an aspect a.b.c.X from the aspectpath the model search logic breaks for finding 'X' because it hits the package node for a.b.c and stops looking"
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"
      ]
    }
  },
  "3ac4627": {
    "bug_report": {
      "summary": "Bug 120401  add signature to UnresolvedType.parameterize(..) exception",
      "description": "I keep getting UnresolvedType UnsupportedOperationException unhelpful message \"resolve this type first,\" so I'm adding the signature to the message (without permission, hence the bug as notice).\n\nthrow new UnsupportedOperationException(\"unable to parameterize unresolved type: \" + signature);\n\n\n-------------------------------\njava.lang.UnsupportedOperationException\nat org.aspectj.weaver.UnresolvedType.parameterize(UnresolvedType.java:218)\nat org.aspectj.weaver.patterns.ExactTypePattern.parameterizeWith(ExactTypePattern.java:242)\nat org.aspectj.weaver.patterns.TypePatternList.parameterizeWith(TypePatternList.java:195)\nat org.aspectj.weaver.patterns.DeclareParents.parameterizeWith(DeclareParents.java:77)\nat org.aspectj.weaver.ReferenceType.getDeclares(ReferenceType.java:484)\nat org.aspectj.weaver.ResolvedType.collectDeclares(ResolvedType.java:523)\nat org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:488)\nat org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:60)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures(AjLookupEnvironment.java:378)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures(AjLookupEnvironment.java:388)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares(AjLookupEnvironment.java:314)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:168)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nUnsupportedOperationException thrown: resolve this type first"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/UnresolvedType.java"
      ]
    }
  },
  "293a075": {
    "bug_report": {
      "summary": "Bug 341446  java.lang.UnsupportedClassVersionError when running Java 1.5",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/testdata/MethodLevelAnnotation.java",
        "org.aspectj.matcher/testsrc/testdata/MethodLevelAnnotation.java",
        "org.aspectj.matcher/testsrc/testdata/AnnotatedClass.java",
        "org.aspectj.matcher/testdata/AnnotatedClass.java",
        "org.aspectj.matcher/testsrc/org/aspectj/matcher/tools/CommonAdvancedPointcutExpressionTests.java",
        "org.aspectj.matcher/testsrc/testdata/SomeAnnotation.java",
        "org.aspectj.matcher/testdata/SomeAnnotation.java"
      ]
    }
  },
  "7b32570": {
    "bug_report": {
      "summary": "Bug 104529  @SuppressWarnings( \"unchecked\" ) is not ignoring type safety checks",
      "description": "AJDT is ignoring the @SuppressWarnings( \"unchecked\" ) annotation.  It is giving \nme a type safety warning when I don't specify the type when declaring a generic \neven though I have the @SuppressWarnings( \"unchecked\" ) annotation specified."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "b54831f": {
    "bug_report": {
      "summary": "Bug 100260  [generics][itds] methods inherited from a generic parent",
      "description": "when using an intertype declaration to add a method to a generic class, the\nmethod is not correctly inherited. the bug doesn't apply to fields.\n\nStrangely enough, raw types (generic types instantiated without specifying a\ntype parameter) inherit the methods properly:\n\n\nclass Generic_Parent<T> {}\n\nclass Child extends Generic_Parent<Integer> {}\n\nclass Generic_Child<T> extends Generic_Parent<Integer> {}\n\naspect Injector {\n  public void Generic_Parent.inherited_method() {}\n  public int Generic_Parent.inherited_field;\n\n  public void test() {\n    int inherited_field;\n    inherited_field = new Generic_Child().inherited_field; // works\n    inherited_field = new Generic_Child<Integer>().inherited_field; // works\n    inherited_field = new Child().inherited_field; // works\n\n    new Generic_Child().inherited_method(); // works\n    new Generic_Child<Integer>().inherited_method(); // unresolved\n    new Child().inherited_method(); // unresolved\n  }\n}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "5a07dce": {
    "bug_report": {
      "summary": "Bug 41359  percflow aspects compiled from jars share one instance for all entry points",
      "description": "When a percflow aspect is woven into source code from a jar using the aspectPath\ncompiler option, it produces only one instance of the aspect for each entrypoint\ndefined in the source code."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java",
        "tests/bugs/perCflowAndJar/PerCFlowCompileFromJar.java",
        "tests/bugs/perCflowAndJar/PerCFlowCompileFromJarTest.java"
      ]
    }
  },
  "797b6a6": {
    "bug_report": {
      "summary": "Bug 82134  AspectJ 5 M2 should implement backwards compatibility for binary aspect form",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/AndOrNotTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java",
        "weaver/src/org/aspectj/weaver/patterns/Declare.java",
        "weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/ModifiersPattern.java",
        "weaver/src/org/aspectj/weaver/patterns/NamePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java",
        "weaver/testsrc/org/aspectj/weaver/bcel/PatternWeaveTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java",
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelMethod.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareParents.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/TypePatternListTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/PerObject.java",
        "weaver/src/org/aspectj/weaver/patterns/OrPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/DeclareErrorOrWarningTestCase.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/SignaturePatternTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java",
        "weaver/src/org/aspectj/weaver/patterns/PerCflow.java",
        "weaver/src/org/aspectj/weaver/WeaverStateInfo.java",
        "weaver/src/org/aspectj/weaver/patterns/TypePatternList.java",
        "weaver/src/org/aspectj/weaver/patterns/PerSingleton.java",
        "weaver/src/org/aspectj/weaver/AjAttribute.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/NamePatternTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java",
        "weaver/src/org/aspectj/weaver/VersionedDataInputStream.java",
        "weaver/src/org/aspectj/weaver/patterns/TypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/NotPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java",
        "weaver/testsrc/org/aspectj/weaver/bcel/PointcutResidueTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java",
        "tests/src/org/aspectj/systemtest/ajc150/MigrationTests.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/AndPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/PerClause.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelField.java",
        "weaver/src/org/aspectj/weaver/patterns/Pointcut.java",
        "weaver/src/org/aspectj/weaver/AdviceKind.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java",
        "tests/src/org/aspectj/systemtest/ajc150/AllTestsJava5_binaryWeaving.java",
        "weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java",
        "weaver/testsrc/org/aspectj/weaver/patterns/ModifiersPatternTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java"
      ]
    }
  },
  "4af4b1e": {
    "bug_report": {
      "summary": "Bug 399590  Bad generics signature generated",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs172/pr399590/four/Cage.java",
        "tests/bugs172/pr399590/three/Cage2.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java",
        "tests/bugs172/pr399590/four/Cage2.java",
        "tests/bugs172/pr399590/five/Cage.java",
        "tests/bugs172/pr399590/two/Cage.java",
        "tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java",
        "tests/bugs172/pr399590/Cage.java",
        "tests/bugs172/pr399590/two/Cage2.java",
        "tests/bugs172/pr399590/Cage2.java",
        "tests/bugs172/pr399590/five/Cage2.java",
        "tests/bugs172/pr399590/three/Cage.java"
      ]
    }
  },
  "97cd71a": {
    "bug_report": {
      "summary": "Bug 144717  org.aspectj.weaver.BCException: Do not call nameToSignature with something that looks like a signature (descriptor): '[Ljava.lang.String;'",
      "description": "The exception below is produced when parsing a pointcut that uses an array type in args using the reflection world pointcut parser support.\n\norg.aspectj.weaver.BCException: Do not call nameToSignature with something that looks like a signature (descriptor): '[Ljava.lang.String;'\n\n\tat org.aspectj.weaver.UnresolvedType.nameToSignature(UnresolvedType.java:741)\n\tat org.aspectj.weaver.UnresolvedType.forName(UnresolvedType.java:311)\n\tat org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredPointcuts(Java15ReflectionBasedReferenceTypeDelegate.java:260)\n\tat org.aspectj.weaver.ReferenceType.getDeclaredPointcuts(ReferenceType.java:526)\n\tat org.aspectj.weaver.ResolvedType$7.get(ResolvedType.java:468)\n\tat org.aspectj.weaver.Iterators$6.hasNext(Iterators.java:118)\n\tat org.aspectj.weaver.Iterators$5.hasNext(Iterators.java:128)\n\tat org.aspectj.weaver.ResolvedType.findPointcut(ResolvedType.java:479)\n\tat org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:151)\n\tat org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:194)\n\tat org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:330)\n\tat org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:308)\n\tat org.aspectj.weaver.tools.Java15PointcutExpressionTest.testArrayTypeInArgs(Java15PointcutExpressionTest.java:304)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)"
    },
    "commit": {
      "diff": [
        "weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java",
        "weaver/src/org/aspectj/weaver/tools/PointcutParser.java",
        "weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java"
      ]
    }
  },
  "3ca976f": {
    "bug_report": {
      "summary": "Bug 129704  BCException",
      "description": "org.aspectj.weaver.BCException\nat org.aspectj.weaver.bcel.BcelShadow.initializeKindedAnnotationVars(BcelShadow.java:1553)\nat org.aspectj.weaver.bcel.BcelShadow.getKindedAnnotationVar(BcelShadow.java:995)\nat org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal(AnnotationPointcut.java:196)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)\nat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)\nat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)\nat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268)\nat org.aspectj.weaver.bcel.BcelAdvice.specializeOn(BcelAdvice.java:132)\nat org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:313)\nat org.aspectj.weaver.Shadow.implement(Shadow.java:404)\nat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic class com.ytg.bilette.client.core.providers.DomainContentProvider extends java.lang.Object implements com.ytg.bilette.client.core.providers.IRefreshableStructuredContentProvider:\n  private java.util.HashSet listeners [Signature(Ljava/util/HashSet<Lcom/ytg/bilette/client/core/providers/IDomainObjectChangeListener<TT;>;>;)]\n  private com.ytg.bilette.client.core.providers.DomainContentProvider$State state [Signature(Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;)]\n  private Class clazz [Signature(Ljava/lang/Class<+Lcom/ytg/bilette/model/GenericDomainObject;>;)]\n  private boolean deletable\n  private java.util.List summaries [Signature(Ljava/util/List<TT;>;)]\n  static Class class$0\n  public void <init>(Class)    org.aspectj.weaver.MethodDeclarationLineNumber: 47:1136\n:\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 47)\n                    &#304;NVOKESPEC&#304;AL java.lang.Object.<init> ()V\n    constructor-execution(void com.ytg.bilette.client.core.providers.DomainContentProvider.<init>(java.lang.Class))\n    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 34)\n    |               NEW java.util.HashSet\n    |               DUP\n    |               &#304;NVOKESPEC&#304;AL java.util.HashSet.<init> ()V\n    |               PUTF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet;\n    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 36)\n    |               GETSTAT&#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n    |               PUTF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 40)\n    |               &#304;CONST_0\n    |               PUTF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z\n    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 48)\n    |               ALOAD_1     // java.lang.Class clazz\n    |               PUTF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.clazz Ljava/lang/Class;\n    |               ALOAD_1     // java.lang.Class clazz   (line 50)\n    |               &#304;NVOKEV&#304;RTUAL java.lang.Class.getInterfaces ()[Ljava/lang/Class;\n    |               ASTORE_2\n    |               &#304;CONST_0   (line 51)\n    |               &#304;STORE_3\n    |               GOTO L2\n    |           L0: ALOAD_2     // java.lang.Class[] interfaces   (line 52)\n    |               &#304;LOAD_3     // int i\n    |               AALOAD\n    |               LDC com.ytg.bilette.model.Deletable\n    |               &#304;NVOKEV&#304;RTUAL java.lang.Object.equals (Ljava/lang/Object;)Z\n    |               &#304;FEQ L1\n    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 53)\n    |               &#304;CONST_1\n    |               PUTF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z\n    |               GOTO L3   (line 54)\n    |           L1: &#304;&#304;NC 3 1     // int i   (line 51)\n    |           L2: &#304;LOAD_3     // int i\n    |               ALOAD_2     // java.lang.Class[] interfaces\n    |               ARRAYLENGTH\n    |               &#304;F_&#304;CMPLT L0\n    |           L3: RETURN   (line 57)\n    constructor-execution(void com.ytg.bilette.client.core.providers.DomainContentProvider.<init>(java.lang.Class))\n  end public void <init>(Class)\n\n  public Object[] getElements(Object)    org.aspectj.weaver.MethodDeclarationLineNumber: 65:1611\n:\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 66)\n                    ALOAD_1     // java.lang.Object input\n                    &#304;NVOKESPEC&#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.checkInput (Ljava/lang/Object;)Z\n                    &#304;STORE_2\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 68)\n                    &#304;LOAD_2     // boolean includeDeleted\n                    &#304;NVOKEV&#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider.getSummaries (Z)Ljava/util/List;\n                    &#304;NVOKE&#304;NTERFACE java.util.List.toArray ()[Ljava/lang/Object;\n                    ARETURN\n  end public Object[] getElements(Object)\n\n  private void checkInitialized(boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 71:1759\n:\n                    GETSTAT&#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;   (line 72)\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n                    &#304;NVOKEV&#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals (Ljava/lang/Object;)Z\n                    &#304;FNE L0\n                    GETSTAT&#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;   (line 73)\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n                    &#304;NVOKEV&#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals (Ljava/lang/Object;)Z\n                    &#304;FEQ L1\n                    &#304;LOAD_1     // boolean includeDeleted\n                    &#304;FEQ L1\n                L0: ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 74)\n                    ACONST_NULL\n                    ACONST_NULL\n                    &#304;LOAD_1     // boolean includeDeleted\n                    &#304;NVOKESPEC&#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.getData (Lcom/ytg/bilette/dao/SummaryDAO;Lorg/eclipse/core/runtime/IProgressMonitor;Z)V\n                L1: RETURN   (line 75)\n  end private void checkInitialized(boolean)\n\n  private boolean checkInput(Object)    org.aspectj.weaver.MethodDeclarationLineNumber: 83:2060\n:\n                    ALOAD_1     // java.lang.Object input   (line 84)\n                    &#304;NSTANCEOF java.lang.Boolean\n                    LDC \"Input for generic content provider must be Boolean value\"   (line 85)\n                    &#304;NVOKESTAT&#304;C org.eclipse.jface.util.Assert.isTrue (ZLjava/lang/String;)Z   (line 84)\n                    POP\n                    ALOAD_1     // java.lang.Object input   (line 86)\n                    CHECKCAST java.lang.Boolean\n                    &#304;NVOKEV&#304;RTUAL java.lang.Boolean.booleanValue ()Z\n                    &#304;STORE_2\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 87)\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z\n                    &#304;FNE L1\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 88)\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z\n                    &#304;FNE L0\n                    &#304;LOAD_2     // boolean includeDeleted\n                    &#304;FEQ L1\n                L0: &#304;CONST_0\n                    GOTO L2\n                L1: &#304;CONST_1\n                L2: LDC \"Nondeletable object yet deleted flag!\"   (line 89)\n                    &#304;NVOKESTAT&#304;C org.eclipse.jface.util.Assert.isLegal (ZLjava/lang/String;)Z   (line 87)\n                    POP\n                    &#304;LOAD_2     // boolean includeDeleted   (line 91)\n                    &#304;RETURN\n  end private boolean checkInput(Object)\n\n  public void dispose()    org.aspectj.weaver.MethodDeclarationLineNumber: 99:2522\n:\n                    RETURN   (line 101)\n  end public void dispose()\n\n  public void inputChanged(org.eclipse.jface.viewers.Viewer, Object, Object)    org.aspectj.weaver.MethodDeclarationLineNumber: 109:2747\n:\n                    RETURN   (line 111)\n  end public void inputChanged(org.eclipse.jface.viewers.Viewer, Object, Object)\n\n  private void getData(com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 115:2954\n:\n                    ALOAD_1\n                    ASTORE 4\n                    ALOAD_2\n                    ASTORE 5\n                    &#304;LOAD_3\n                    &#304;STORE 6\n    method-execution(void com.ytg.bilette.client.core.providers.DomainContentProvider.getData(com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean))\n    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 117)\n    |               ALOAD_1     // com.ytg.bilette.dao.SummaryDAO dao\n    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this\n    |               GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.clazz Ljava/lang/Class;\n    |               &#304;LOAD_3     // boolean includeDeleted\n    |               &#304;NVOKE&#304;NTERFACE com.ytg.bilette.dao.SummaryDAO.getSummaries (Ljava/lang/Class;Z)Ljava/util/List;\n    |               PUTF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List;\n    |               &#304;LOAD_3     // boolean includeDeleted   (line 118)\n    |               &#304;FEQ L0\n    |               ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 119)\n    |               GETSTAT&#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.FULL_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n    |               PUTF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n    |               GOTO L1\n    |           L0: ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 121)\n    |               GETSTAT&#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n    |               PUTF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n    |           L1: RETURN   (line 122)\n    method-execution(void com.ytg.bilette.client.core.providers.DomainContentProvider.getData(com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean))\n  end private void getData(com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean)\n\n  public java.util.List getSummaries(boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 128:3308\n:\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 129)\n                    &#304;LOAD_1     // boolean includeDeleted\n                    &#304;NVOKESPEC&#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.checkInitialized (Z)V\n                    &#304;LOAD_1     // boolean includeDeleted   (line 131)\n                    &#304;FNE L0\n                    GETSTAT&#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n                    &#304;NVOKEV&#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals (Ljava/lang/Object;)Z\n                    &#304;FEQ L1\n                L0: ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 132)\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List;\n                    ARETURN\n                L1: ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 134)\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List;\n                    &#304;NVOKE&#304;NTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n                    ASTORE_2\n                    NEW java.util.ArrayList   (line 135)\n                    DUP\n                    &#304;NVOKESPEC&#304;AL java.util.ArrayList.<init> ()V\n                    ASTORE_3\n                    GOTO L3   (line 136)\n                L2: ALOAD_2     // java.util.Iterator i   (line 137)\n                    &#304;NVOKE&#304;NTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n                    CHECKCAST com.ytg.bilette.model.Deletable\n                    CHECKCAST com.ytg.bilette.model.Deletable\n                    ASTORE 4\n                    ALOAD 4     // com.ytg.bilette.model.Deletable object   (line 138)\n                    &#304;NVOKE&#304;NTERFACE com.ytg.bilette.model.Deletable.isDeleted ()Z\n                    &#304;FNE L3\n                    ALOAD_3     // java.util.ArrayList list   (line 139)\n                    ALOAD 4     // com.ytg.bilette.model.Deletable object\n                    CHECKCAST com.ytg.bilette.model.GenericDomainObject\n                    &#304;NVOKEV&#304;RTUAL java.util.ArrayList.add (Ljava/lang/Object;)Z\n                    POP\n                L3: ALOAD_2     // java.util.Iterator i   (line 136)\n                    &#304;NVOKE&#304;NTERFACE java.util.Iterator.hasNext ()Z\n                    &#304;FNE L2\n                    ALOAD_3     // java.util.ArrayList list   (line 142)\n                    ARETURN\n  end public java.util.List getSummaries(boolean)\n\n  public synchronized void refresh()    org.aspectj.weaver.MethodDeclarationLineNumber: 148:3783\n:\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 149)\n                    GETSTAT&#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n                    PUTF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State;\n                    &#304;CONST_0   (line 150)\n                    &#304;STORE_1\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 152)\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z\n                    &#304;FEQ L2\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 153)\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet;\n                    &#304;NVOKEV&#304;RTUAL java.util.HashSet.iterator ()Ljava/util/Iterator;\n                    ASTORE_2\n                    GOTO L1   (line 154)\n                L0: ALOAD_2     // java.util.Iterator i   (line 155)\n                    &#304;NVOKE&#304;NTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n                    CHECKCAST com.ytg.bilette.client.core.providers.IDomainObjectChangeListener\n                    ASTORE_3\n                    ALOAD_3     // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener   (line 156)\n                    &#304;NVOKE&#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.isIncludeDeleted ()Z\n                    &#304;FEQ L1\n                    &#304;CONST_1   (line 157)\n                    &#304;STORE_1     // boolean includeDeleted\n                    GOTO L2   (line 158)\n                L1: ALOAD_2     // java.util.Iterator i   (line 154)\n                    &#304;NVOKE&#304;NTERFACE java.util.Iterator.hasNext ()Z\n                    &#304;FNE L0\n                L2: ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 163)\n                    ACONST_NULL\n                    ACONST_NULL\n                    &#304;LOAD_1     // boolean includeDeleted\n                    &#304;NVOKESPEC&#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.getData (Lcom/ytg/bilette/dao/SummaryDAO;Lorg/eclipse/core/runtime/IProgressMonitor;Z)V\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 165)\n                    ACONST_NULL\n                    ACONST_NULL\n                    &#304;NVOKESPEC&#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.notifyAllListeners (Lcom/ytg/bilette/model/GenericDomainObject;Lcom/ytg/bilette/model/GenericDomainObject;)V\n                    RETURN   (line 166)\n  end public synchronized void refresh()\n\n  private synchronized void notifyAllListeners(com.ytg.bilette.model.GenericDomainObject, com.ytg.bilette.model.GenericDomainObject)    org.aspectj.weaver.MethodDeclarationLineNumber: 174:4356\n:\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 175)\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet;\n                    &#304;NVOKEV&#304;RTUAL java.util.HashSet.iterator ()Ljava/util/Iterator;\n                    ASTORE_3\n                    GOTO L2   (line 176)\n                L0: ALOAD_3     // java.util.Iterator i   (line 177)\n                    &#304;NVOKE&#304;NTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n                    CHECKCAST com.ytg.bilette.client.core.providers.IDomainObjectChangeListener\n                    ASTORE 4\n                    ALOAD_1     // com.ytg.bilette.model.GenericDomainObject oldObj   (line 178)\n                    &#304;FNONNULL L1\n                    ALOAD_2     // com.ytg.bilette.model.GenericDomainObject newObj\n                    &#304;FNONNULL L1\n                    ALOAD 4     // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener   (line 179)\n                    &#304;NVOKE&#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.fullRefresh ()V\n                    GOTO L2\n                L1: ALOAD 4     // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener   (line 181)\n                    ALOAD_1     // com.ytg.bilette.model.GenericDomainObject oldObj\n                    ALOAD_2     // com.ytg.bilette.model.GenericDomainObject newObj\n                    &#304;NVOKE&#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.concessionChanged (Lcom/ytg/bilette/model/GenericDomainObject;Lcom/ytg/bilette/model/GenericDomainObject;)V\n                L2: ALOAD_3     // java.util.Iterator i   (line 176)\n                    &#304;NVOKE&#304;NTERFACE java.util.Iterator.hasNext ()Z\n                    &#304;FNE L0\n                    RETURN   (line 183)\n  end private synchronized void notifyAllListeners(com.ytg.bilette.model.GenericDomainObject, com.ytg.bilette.model.GenericDomainObject)\n\n  public synchronized void addListener(com.ytg.bilette.client.core.providers.IDomainObjectChangeListener)    org.aspectj.weaver.MethodDeclarationLineNumber: 185:4715\n:\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 186)\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet;\n                    ALOAD_1     // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener\n                    &#304;NVOKEV&#304;RTUAL java.util.HashSet.add (Ljava/lang/Object;)Z\n                    POP\n                    RETURN   (line 187)\n  end public synchronized void addListener(com.ytg.bilette.client.core.providers.IDomainObjectChangeListener)\n\n  public synchronized void removeListener(com.ytg.bilette.client.core.providers.IDomainObjectChangeListener)    org.aspectj.weaver.MethodDeclarationLineNumber: 189:4831\n:\n                    ALOAD_0     // com.ytg.bilette.client.core.providers.DomainContentProvider this   (line 190)\n                    GETF&#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet;\n                    ALOAD_1     // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener\n                    &#304;NVOKEV&#304;RTUAL java.util.HashSet.remove (Ljava/lang/Object;)Z\n                    POP\n                    RETURN   (line 191)\n  end public synchronized void removeListener(com.ytg.bilette.client.core.providers.IDomainObjectChangeListener)\n\nend public class com.ytg.bilette.client.core.providers.DomainContentProvider\n\nwhen implementing on shadow method-execution(void com.ytg.bilette.client.core.providers.DomainContentProvider.getData(com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean))\nwhen weaving type com.ytg.bilette.client.core.providers.DomainContentProvider\nwhen weaving classes \nwhen weaving \nwhen batch building BuildConfig[F:\\java\\Bilette\\.metadata\\.plugins\\org.eclipse.ajdt.core\\com.ytg.bilette.client.core.generated.lst] #Files=22"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "tests/bugs152/pr129704/A.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "14e8b7d": {
    "bug_report": {
      "summary": "Bug 155238  Trace should use System.identityHashCode, not hashCode",
      "description": "The tracing module uses obj.hashCode() to identify untrusted objects when formatting. I think it would be a little safer and more accurate to use\nSystem.identityHashCode(obj). This way the tracing code wouldn't call any application-defined code, and would give a value that can't change if the loader state changes."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java",
        "weaver/src/org/aspectj/weaver/tools/AbstractTrace.java"
      ]
    }
  },
  "ce16a06": {
    "bug_report": {
      "summary": "Bug 323634  NPE parameterizing perclause",
      "description": "java.lang.NullPointerException\nat org.aspectj.weaver.ReferenceType.getPerClause(ReferenceType.java:823)\nat org.aspectj.weaver.patterns.PerFromSuper.lookupConcretePerClause(PerFromSuper.java:82)\nat org.aspectj.weaver.patterns.PerFromSuper.concretize(PerFromSuper.java:61)\nat org.aspectj.weaver.CrosscuttingMembers.setPerClause(CrosscuttingMembers.java:512)\nat org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:748) ... oBuildJob.run(AutoBuildJob.java:242)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"
      ]
    }
  },
  "d3c3e32": {
    "bug_report": {
      "summary": "Bug 209372  Compile error: IllegalArgumentException thrown: negative line: -1",
      "description": "If line numbers have not been added to the generated class files the following exception is thrown:\n\njava.lang.IllegalArgumentException\nat org.aspectj.bridge.SourceLocation.validLine(SourceLocation.java:41)\nat org.aspectj.bridge.SourceLocation.<init>(SourceLocation.java:96)\nat org.aspectj.bridge.SourceLocation.<init>(SourceLocation.java:85)\nat org.aspectj.bridge.SourceLocation.<init>(SourceLocation.java:70)\nat org.aspectj.ajdt.internal.core.builder.EclipseSourceContext.makeSourceLocation(EclipseSourceContext.java:57)\nat org.aspectj.we ... reUtility.java:155)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)\n\nCompile error: IllegalArgumentException thrown: negative line: -1\n\n\n\nAn easy way to reproduce the problem is to uncheck the corresponding checkbox in the Classfile Generation section of the Java Compiler options in Eclipse.  A full build is performed during which an AspectJ Internal Compiler Error is thrown.\n\nMy Eclipse feature version is org.eclipse.ajdt_1.5.0.200706070619."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"
      ]
    }
  },
  "fe99e6b": {
    "bug_report": {
      "summary": "Bug 163802  Compilation error",
      "description": "Hello,\n\nI had several times aspectj compiler errors when compiling some normal java class file (not refering any aspect nor concerned by an aspect) but in a aspectJ project. Bug goes away after cleaning project. \n\nHere is the error reported for my class\njava.lang.NullPointerException\nat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1158)\nat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1158)\nat org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1135)\nat org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1202)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInt ... Adapter.java:102)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null\n\n\nIt occurs with plugin configuration:\ncom.ibm.icu (3.4.5) \"International Components for Unicode for Java (ICU4J)\" [Active]\ncom.ibm.icu.source (3.4.5) \"International Components for Unicode for Java (ICU4J) source plug-in\" [Resolved]\ncom.jcraft.jsch (0.1.28) \"JSch\" [Resolved]\nnet.sf.fjep.fatjar (0.0.24) \"Fat Jar Plug-in\" [Resolved]\norg.apache.ant (1.6.5) \"Apache Ant\" [Resolved]\norg.apache.lucene (1.4.103.v20060601) \"Apache Lucene\" [Resolved]\norg.aspectj.ajde (1.5.3.200610201049) \"AspectJ\" [Active]\norg.aspectj.runtime (1.5.3.200610201049) \"AspectJ Runtime\" [Resolved]\norg.aspectj.weaver (1.5.3.200610201049) \"AspectJ Weaver\" [Resolved]\norg.eclipse.ajdt.core (1.4.1.200611071030) \"AspectJ Development Tools Core\" [Active]\norg.eclipse.ajdt.examples (1.4.1.200611071030) \"AspectJ Examples\" [Resolved]\norg.eclipse.ajdt.pde.build (1.4.1.200611071030) \"AspectJ Plug-in Development Environment Build Support\" [Resolved]\norg.eclipse.ajdt.source (1.4.1.200611071030) \"pluginName\" [Resolved]\norg.eclipse.ajdt.ui (1.4.1.200611071030) \"AspectJ Development Tools UI\" [Active]\norg.eclipse.ant.core (3.1.100.v20060531) \"Ant Build Tool Core\" [Resolved]\norg.eclipse.ant.ui (3.2.1.r321_v20060828) \"Ant UI\" [Resolved]\norg.eclipse.aspectj (1.4.1.200611071030) \"AspectJ Development Tools\" [Resolved]\norg.eclipse.compare (3.2.1.M20060711) \"Compare Support\" [Active]\norg.eclipse.contribution.visualiser (2.2.0.200611071030) \"Visualiser Plug-in\" [Resolved]\norg.eclipse.contribution.xref.core (1.4.1.200611071030) \"Cross Reference Core Plugin\" [Active]\norg.eclipse.contribution.xref.ui (1.4.1.200611071030) \"Cross Reference UI Plugin\" [Active]\norg.eclipse.core.boot (3.1.100.v20060603) \"Core Boot\" [Resolved]\norg.eclipse.core.commands (3.2.0.I20060605-1400) \"Commands\" [Resolved]\norg.eclipse.core.contenttype (3.2.0.v20060603) \"Eclipse Content Mechanism\" [Active]\norg.eclipse.core.expressions (3.2.1.r321_v20060721) \"Expression Language\" [Active]\norg.eclipse.core.filebuffers (3.2.1.r321_v20060721) \"File Buffers\" [Active]\norg.eclipse.core.filesystem (1.0.0.v20060603) \"Core File Systems\" [Resolved]\norg.eclipse.core.filesystem.macosx (1.0.0.v20060603) \"Core File System for Macintosh\" [Resolved]\norg.eclipse.core.jobs (3.2.0.v20060603) \"Eclipse Jobs Mechanism\" [Active]\norg.eclipse.core.resources (3.2.1.R32x_v20060914) \"Core Resource Management\" [Active]\norg.eclipse.core.resources.compatibility (3.2.0.v20060603) \"Core Resource Management Compatibility Fragment\" [Resolved]\norg.eclipse.core.runtime (3.2.0.v20060603) \"Core Runtime\" [Active]\norg.eclipse.core.runtime.compatibility (3.1.100.v20060603) \"Core Runtime Plug-in Compatibility\" [Active]\norg.eclipse.core.runtime.compatibility.auth (3.2.0.v20060601) \"Authorization Compatibility Plug-in\" [Active]\norg.eclipse.core.runtime.compatibility.registry (3.2.1.R32x_v20060907) \"Eclipse Registry Compatibility Fragment\" [Resolved]\norg.eclipse.core.variables (3.1.100.v20060605) \"Core Variables\" [Active]\norg.eclipse.debug.core (3.2.1.v20060823) \"Debug Core\" [Active]\norg.eclipse.debug.ui (3.2.1.v20060823) \"Debug UI\" [Active]\norg.eclipse.equinox.common (3.2.0.v20060603) \"Common Eclipse Runtime\" [Active]\norg.eclipse.equinox.preferences (3.2.1.R32x_v20060717) \"Eclipse Preferences Mechanism\" [Active]\norg.eclipse.equinox.registry (3.2.1.R32x_v20060814) \"Extension Registry Support\" [Active]\norg.eclipse.help (3.2.1.R321_v20060920) \"Help System Core\" [Active]\norg.eclipse.help.appserver (3.1.100.v20060602) \"Help Application Server\" [Resolved]\norg.eclipse.help.base (3.2.1.R321_v20060822) \"Help System Base\" [Resolved]\norg.eclipse.help.ui (3.2.0.v20060602) \"Help System UI\" [Resolved]\norg.eclipse.help.webapp (3.2.1.R321_v20060803) \"Help System Webapp\" [Resolved]\norg.eclipse.jdt (3.2.1.r321_v20060823) \"Eclipse Java Development Tools\" [Resolved]\norg.eclipse.jdt.apt.core (3.2.1.R32x_v20060822-2100) \"Java Annotation Processing Core\" [Active]\norg.eclipse.jdt.apt.ui (3.2.1.R32x_v20060822-2100) \"Java Annotation Processing UI\" [Resolved]\norg.eclipse.jdt.core (3.2.1.v_677_R32x) \"Java Development Tools Core\" [Active]\norg.eclipse.jdt.core.manipulation (1.0.1.r321_v20060721) \"Java Code Manipulation Functionality\" [Resolved]\norg.eclipse.jdt.debug (3.2.1.r321_v20060731) \"JDI Debug Model\" [Active]\norg.eclipse.jdt.debug.ui (3.2.1.r321_v20060918) \"JDI Debug UI\" [Active]\norg.eclipse.jdt.doc.isv (3.2.1.r321_v20060907) \"Eclipse JDT Plug-in Developer Guide\" [Resolved]\norg.eclipse.jdt.doc.user (3.2.0.v20060605-1400) \"Eclipse Java Development User Guide\" [Resolved]\norg.eclipse.jdt.junit (3.2.1.r321_v20060810) \"Java Development Tools JUnit support\" [Active]\norg.eclipse.jdt.junit.runtime (3.2.1.r321_v20060721) \"Java Development Tools JUnit runtime support\" [Resolved]\norg.eclipse.jdt.junit4.runtime (1.0.1.r321_v20060905) \"Java Development Tools JUnit4 runtime support\" [Resolved]\norg.eclipse.jdt.launching (3.2.1.r321_v20060731) \"Java Development Tools Launching Support\" [Active]\norg.eclipse.jdt.launching.macosx (3.1.100.v20060605) \"Mac OS X Launcher\" [Active]\norg.eclipse.jdt.source (3.2.1.r321_v20060905-R4CM1Znkvre9wC-) \"Eclipse Java Development Tools SDK\" [Resolved]\norg.eclipse.jdt.source.macosx.carbon.ppc (3.2.1.r321_v20060905-R4CM1Znkvre9wC-) \"Eclipse Java Development Tools SDK\" [Resolved]\norg.eclipse.jdt.ui (3.2.1.r321_v20060907) \"Java Development Tools UI\" [Active]\norg.eclipse.jface (3.2.1.M20060908-1000) \"JFace\" [Resolved]\norg.eclipse.jface.databinding (1.0.0.I20060605-1400) \"JFace Data Binding\" [Resolved]\norg.eclipse.jface.text (3.2.1.r321_v20060810) \"JFace Text\" [Resolved]\norg.eclipse.ltk.core.refactoring (3.2.1.r321_v20060823) \"Refactoring Core\" [Active]\norg.eclipse.ltk.ui.refactoring (3.2.1.r321_v20060726) \"Refactoring UI\" [Active]\norg.eclipse.osgi.services (3.1.100.v20060601) \"OSGi Release 3 Services\" [Resolved]\norg.eclipse.osgi.util (3.1.100.v20060601) \"OSGi R3 Utility Classes\" [Resolved]\norg.eclipse.pde (3.2.1.v20060810-0800) \"Eclipse Plug-in Development Environment\" [Resolved]\norg.eclipse.pde.build (3.2.1.r321_v20060823) \"Plug-in Development Environment Build Support\" [Resolved]\norg.eclipse.pde.core (3.2.1.v20060915-0800) \"Plug-in Development Core\" [Resolved]\norg.eclipse.pde.doc.user (3.2.1.v20060816-0800) \"Eclipse Plug-in Development User Guide\" [Resolved]\norg.eclipse.pde.junit.runtime (3.2.0.v20060605) \"PDE JUnit Plug-in Test\" [Resolved]\norg.eclipse.pde.runtime (3.2.0.v20060605) \"Plug-in Development Environment Runtime\" [Resolved]\norg.eclipse.pde.source (3.2.1.r321_v20060823-6vYLLdQ3Nk8DrFG) \"Eclipse Plug-in Development Environment Developer Resources\" [Resolved]\norg.eclipse.pde.ui (3.2.1.v20060816-0800) \"Plug-in Development UI\" [Resolved]\norg.eclipse.platform (3.2.0.v20060601) \"Eclipse Platform\" [Resolved]\norg.eclipse.platform.doc.isv (3.2.1.r321_v2006030) \"Eclipse Platform Plug-in Developer Guide\" [Resolved]\norg.eclipse.platform.doc.user (3.2.1.R32x_v200608101155) \"Eclipse Workbench User Guide\" [Resolved]\norg.eclipse.platform.source (3.2.1.r321_v20060921-b_XVA-INSQSyMtx) \"Eclipse Platform Plug-in Developer Resources\" [Resolved]\norg.eclipse.platform.source.macosx.carbon.ppc (3.2.1.r321_v20060921-b_XVA-INSQSyMtx) \"Eclipse Platform Plug-in Developer Resources\" [Resolved]\norg.eclipse.rcp (3.2.0.v20060605) \"Eclipse RCP\" [Resolved]\norg.eclipse.rcp.source (3.2.1.r321_v20060801-2ekW2BxmcpPUOoq) \"Eclipse RCP Plug-in Developer Resources\" [Resolved]\norg.eclipse.rcp.source.macosx.carbon.ppc (3.2.1.r321_v20060801-2ekW2BxmcpPUOoq) \"Eclipse RCP Plug-in Developer Resources\" [Resolved]\norg.eclipse.sdk (3.2.1.r321_v20060705) \"Eclipse Project SDK\" [Resolved]\norg.eclipse.search (3.2.1.r321_v20060726) \"Search Support\" [Resolved]\norg.eclipse.swt (3.2.1.v3235e) \"Standard Widget Toolkit\" [Resolved]\norg.eclipse.swt.carbon.macosx (3.2.1.v3235) \"Standard Widget Toolkit for Mac OS X (Carbon)\" [Resolved]\norg.eclipse.team.core (3.2.1.M20060711) \"Team Support Core\" [Active]\norg.eclipse.team.cvs.core (3.2.1.M200608161750) \"CVS Team Provider Core\" [Active]\norg.eclipse.team.cvs.ssh (3.2.0.I200606011710) \"CVS SSH Core\" [Resolved]\norg.eclipse.team.cvs.ssh2 (3.2.0.I200606051140) \"CVS SSH2\" [Active]\norg.eclipse.team.cvs.ui (3.2.1.M20060831) \"CVS Team Provider UI\" [Active]\norg.eclipse.team.ui (3.2.1.M200608151725) \"Team Support UI\" [Active]\norg.eclipse.text (3.2.0.v20060605-1400) \"Text\" [Resolved]\norg.eclipse.tomcat (4.1.130.v20060601) \"Tomcat Wrapper\" [Resolved]\norg.eclipse.ui (3.2.1.M20060913-0800) \"Eclipse UI\" [Active]\norg.eclipse.ui.browser (3.2.0.v20060602) \"Browser Support\" [Active]\norg.eclipse.ui.carbon (3.2.0.I20060605-1400) \"Eclipse UI MacOS X Enhancements\" [Resolved]\norg.eclipse.ui.cheatsheets (3.2.1.R321_v20060720) \"Cheat Sheets\" [Resolved]\norg.eclipse.ui.console (3.1.100.v20060605) \"Console\" [Active]\norg.eclipse.ui.editors (3.2.1.r321_v20060721) \"Default Text Editor\" [Active]\norg.eclipse.ui.externaltools (3.1.101.r321_v20060802) \"External Tools\" [Active]\norg.eclipse.ui.forms (3.2.0.v20060602) \"Eclipse Forms\" [Active]\norg.eclipse.ui.ide (3.2.1.M20060915-1030) \"Eclipse IDE UI\" [Active]\norg.eclipse.ui.intro (3.2.1.R321_v20060810) \"Welcome Framework\" [Resolved]\norg.eclipse.ui.intro.universal (3.2.1.R321_v20060905) \"Universal Welcome\" [Resolved]\norg.eclipse.ui.navigator (3.2.1.M20060913-0800) \"Common Navigator View\" [Resolved]\norg.eclipse.ui.navigator.resources (3.2.1.M20060906-0800b) \"Navigator Workbench Components\" [Resolved]\norg.eclipse.ui.presentations.r21 (3.2.0.I20060605-1400) \"R21 Presentation Plug-in\" [Resolved]\norg.eclipse.ui.views (3.2.1.M20060906-0800) \"Views\" [Active]\norg.eclipse.ui.views.properties.tabbed (3.2.1.M20060830-0800) \"Tabbed Properties View\" [Resolved]\norg.eclipse.ui.workbench (3.2.1.M20060906-0800) \"Workbench\" [Active]\norg.eclipse.ui.workbench.compatibility (3.2.0.I20060605-1400) \"Workbench Compatibility\" [Resolved]\norg.eclipse.ui.workbench.texteditor (3.2.0.v20060605-1400) \"Text Editor Framework\" [Active]\norg.eclipse.update.configurator (3.2.1.v20092006) \"Install/Update Configurator\" [Active]\norg.eclipse.update.core (3.2.1.v20092006) \"Install/Update Core\" [Active]\norg.eclipse.update.scheduler (3.2.1.v20092006) \"Automatic Updates Scheduler\" [Active]\norg.eclipse.update.ui (3.2.1.v20092006) \"Install/Update UI\" [Resolved]\norg.junit (3.8.1) \"JUnit Testing Framework\" [Resolved]\norg.junit4 (4.1.0.1) \"JUnit Testing Framework Version 4\" [Resolved]\nsf.eclipse.javacc (1.5.5) \"JavaCC Plug-in\" [Active]\nsystem.bundle (3.2.1.R32x_v20060919) \"OSGi System Bundle\" [Active]"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/ResolvedType.java"
      ]
    }
  },
  "d90acdc": {
    "bug_report": {
      "summary": "Bug 39436  [Tasks] No summary shown in status line",
      "description": "build I20030625\n\nThe old tasks view showed a summary of the number of tasks, errors, warnings \nand infos in the status line.  This is missing in the reworked view."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"
      ]
    }
  },
  "999d9b0": {
    "bug_report": {
      "summary": "Bug 112514  ajc compile crash, not giving information which class file cause it",
      "description": null
    },
    "commit": {
      "diff": [
        "bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java"
      ]
    }
  },
  "5e08765": {
    "bug_report": {
      "summary": "Bug 72699  Bogus error message: The abstract method ajc$pointcut$$tracingScope$a2 in type Tracing can only be defined by an abstract class",
      "description": "When attempting to compile the following aspect the resulting error message \nshould say something like \"The abstract method pointcut tracingScope in type \nTracing can only be defined by an abstract aspect\"\n\npublic aspect Tracing {\n\tpublic abstract pointcut tracingScope();\n\n}"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "tests/bugs/BogusMessage2.java",
        "tests/bugs/BogusMessage.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "1535ee7": {
    "bug_report": {
      "summary": "Bug 136585  NullPointerException in PerObjectInterfaceTypeMunger.java:33",
      "description": "AspectJ 1.5.1a + AJDT 1.4.0-dev on Eclipse 3.2M6\nUsing the Sapcewar example, open Game.java and add:\n   public void foo() {}\nsave and an incremental build will fail with:\n\njava.lang.NullPointerException\nat org.aspectj.weaver.PerObjectInterfaceTypeMunger.equals(PerObjectInterfaceTypeMunger.java:33)\nat org.aspectj.weaver.bcel.BcelTypeMunger.equals(BcelTypeMunger.java:1672)\nat java.util.AbstractList.equals(AbstractList.java:610)\nat org.aspectj.weaver.CrosscuttingMembers.replaceWith(CrosscuttingMembers.java:321)\nat org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:73)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures(AjLookupEnvironment.java:397)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares(AjLookupEnvironment.java:333)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:173)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:269)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/PerObjectInterfaceTypeMunger.java",
        "tests/multiIncremental/PR136585/base/Hello.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"
      ]
    }
  },
  "87db1e7": {
    "bug_report": {
      "summary": "Bug 44586  After throwing advice on ctors doesn't execute for inter-type decls",
      "description": "The following code doesn't work in Ajc 1.1.1, in Ajc built from CVS HEAD (as \nof yesterday), nor in Ajc 1.0.6:\n\nOutput:\nC:\\devel\\test\\excHandling>java AfterThrowingCtor\nException in thread \"main\" java.lang.IllegalStateException: crash\n        at Foo.initVal(AfterThrowingCtor.java:21)\n        at AfterThrowingCtor.ajc$interFieldInit$AfterThrowingCtor$Foo$val\n(AfterT\nhrowingCtor.java:9)\n        at Foo.<init>(AfterThrowingCtor.java:13)\n        at AfterThrowingCtor.main(AfterThrowingCtor.java:6)\n\nCorrect Output:\nthrew java.lang.IllegalStateException: crash at execution(Foo())\nException in thread \"main\" java.lang.IllegalStateException: crash\n        at Foo.initVal(AfterThrowingCtor.java:21)\n        at AfterThrowingCtor.ajc$interFieldInit$AfterThrowingCtor$Foo$val\n(AfterT\nhrowingCtor.java:9)\n        at Foo.<init>(AfterThrowingCtor.java:13)\n        at AfterThrowingCtor.main(AfterThrowingCtor.java:6)\n\nInput source:\npublic aspect AfterThrowingCtor {\n    after() throwing (Throwable t) : execution(Foo.new(..)) {\n\tSystem.err.println(\"threw \"+t+\" at \"+thisJoinPointStaticPart);\n    }\n    public static void main(String args[]) {\n\tnew Foo();\n    }\n\n    private Object Foo.val = Foo.initVal();\n}\n\nclass Foo {\n    Foo() { \n    }\n\n    // if you uncomment this line and comment out the inter-type decl.\n    // the advice runs correctly\n    //private Object val = initVal();\n\n    static Object initVal() {\n\tthrow new IllegalStateException(\"crash\"); \n    }\n}\n---\n\nAspectJ 1.1.1 runs the after throwing advice correctly if the field is \ndeclared normally (AspectJ 1.0.6 fails to do even this)."
    },
    "commit": {
      "diff": [
        "tests/bugs/AfterThrowingCtor.java"
      ]
    }
  },
  "80785bf": {
    "bug_report": {
      "summary": "Bug 336997  IllegalStateException for generic ITD usage",
      "description": "java.lang.IllegalStateException: Can't answer binding questions prior to resolving\n\tat org.aspectj.weaver.TypeVariable.canBeBoundTo(TypeVariable.java:175)\n\tat org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:496)\n\tat org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:399)\n\tat org.aspectj.weaver.ResolvedType.checkLegalOverride(ResolvedType.java:1999)\n\tat org.aspectj.weaver.ResolvedType.clashesWithExistingMember(ResolvedType.java:1843)\n\tat org.aspectj.weaver.ResolvedType.addInterTypeMunger(ResolvedType.java:1699)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:795)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:652)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1398)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:599)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:276)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:113)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:49)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:99)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:971)\n\tat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.lookupBinding(EclipseFactory.java:749)\n\tat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1(EclipseFactory.java:743)\n\tat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding(EclipseFactory.java:605)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addParent(AjLookupEnvironment.java:1314)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents(AjLookupEnvironment.java:902)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:730)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes(AjLookupEnvironment.java:418)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:255)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:616)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:357)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:371)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1021)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:268)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:181)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:371)\n\tat org.aspectj.tools.ajc.Main.runMain(Main.java:248)\n\tat org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:360)\n\tat org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)\n\tat org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:362)\n\tat org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)\n\tat org.codehaus.classworlds.Launcher.launch(Launcher.java:255)\n\tat org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)\n\tat org.codehaus.classworlds.Launcher.main(Launcher.java:375)"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/World.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java"
      ]
    }
  },
  "59d5c3b": {
    "bug_report": {
      "summary": "Bug 280783  JavaDocRunner fails on System.setSecurityManager in Netbeans",
      "description": null
    },
    "commit": {
      "diff": [
        "ajdoc/src/org/aspectj/tools/ajdoc/JavadocRunner.java"
      ]
    }
  },
  "10c6de6": {
    "bug_report": {
      "summary": "Bug 48990  Special case if(false) to not require a dynamic test",
      "description": "FastMatch, the efficient pattern matching for pointcuts on the constant pool, is\ncurrrently only implemented for the within pointcut. I am planning to provide\nfurther oimplementations for other pointcuts by release 1.2."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/Pointcut.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfPseudoToken.java"
      ]
    }
  },
  "82f217f": {
    "bug_report": {
      "summary": "Bug 148693  woven class does not pass org.apache.bcel.verifier.statics.Pass2Verifier",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java",
        "tests/src/org/aspectj/testing/Utils.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "6c9118b": {
    "bug_report": {
      "summary": "Bug 29665  Inconsistant stack height",
      "description": "Using AspectJ1.1b4 running the following program crashes it with this message:\n\"Inconsistent stack height 0 != 2\". While reducing my original program to the\nminimum example below I had also stack height 0 != 1, but I guess that is\nrelated, so I didn't reproduce it (mail me if this you need this, too).\n\nmport java.lang.reflect.Method;\n\npublic class StackError {\n\tpublic static void main(String args[]) {}\n\n\tvoid assertTrue(String msg, boolean b) {}\n\n\tpublic void testEqualsNull() {\n\t\tStackError one = new StackError();\n\t\tStackError two = new StackError();\n\t\tassertTrue(\"equal\", one.equals(two));\t// does not work\n\t\tboolean yes = one.equals(two);\t\t\t// works\n\t}\n\t\n\tpublic boolean equals(Object other) {\n\t\treturn true;\n\t}\n}\n\naspect EqualsContract {\n\tpointcut equalsCall(Object thisOne, Object otherOne):\n\t\ttarget(Object+) && \n \n\ttarget(thisOne) &&\n\t\tcall(public boolean equals(Object+)) &&\n\t\targs(otherOne) &&\n\t\t!within(EqualsContract);\n\t\n\tboolean around(Object thisOne, Object otherOne):\n\tequalsCall(thisOne, otherOne) {\n\t\tboolean result = proceed(thisOne, otherOne);\n\t\tClass cls = thisOne.getClass();\n\t\tString name = cls.getName();\n\t\tboolean hasHashCode = false;\n\t\ttry {\n\t\t\tMethod m = cls.getDeclaredMethod(\"hashCode\", null);\n\t\t\tString lookFor = \"public int \" + name + \".hashCode()\";\n\t\t\thasHashCode = lookFor.equals(m.toString());\n\t\t}\n\t\tcatch (NoSuchMethodException nsme) {}\n\t\treturn result;\n\t}\n}\n\n\nThe program does not crash if you comment out the line indicated with the \"does\nnot work\" comment. Note the line below that (comment \"works\") does work."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "tests/bugs/StackError.java",
        "tests/bugs/messyAround/cap/OptionList.java"
      ]
    }
  },
  "6b1ef0f": {
    "bug_report": {
      "summary": "Bug 67578  Privileged Aspect Access Problem Across Packages",
      "description": "From Irum Godil's aspectj-users posting:\n\npackage a;\n\npublic class ITD {\n    private void returnNothing(Object a) {\n    }\n}\n\npackage b;\n\nimport a.*;\n\nprivileged aspect B {\n  public void ITD.newFun() {\n      returnNothing(\"a\");\n  }\n}\n\nreturns:\nC:\\devel\\test\\priv\\b\\B.aj:8 error The method returnNothing(Object) from the \ntype\n ITD is not visible\nreturnNothing(\"a\");\n^^^^^^\n\n1 error\n\nWhich it should not (and AspectJ 1.0.6 does not give an error)\n\nWork around: use this.returnNothing(\"a\");"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "792d1df": {
    "bug_report": {
      "summary": "Bug 148786  new array construction join point can fail for freaky array constructors",
      "description": "Took me a while to discover how to recreate this problem, but this class:\n\npublic class A {\n  public static void main(String []argv) {\n    byte[][] bytes = new byte[][]{{0},{1}};\n  }\n}\n\ncauses this bytecode:\n\n0:   iconst_2\n1:   anewarray       #18; //class \"[B\"\n\nand this causes the newarray joinpoint code to go bang.\n(eg. before(): call(*[].new(..)) {})\n\njava.lang.NullPointerException\n        at org.aspectj.weaver.bcel.BcelWorld.fromBcel(BcelWorld.java:236)\n        at org.aspectj.weaver.bcel.BcelWorld.makeJoinPointSignatureForArrayConstruction(BcelWorld.java:483)\n        at org.aspectj.weaver.bcel.BcelShadow.makeArrayConstructorCall(BcelShadow.java:801)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2510)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2325)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:490)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)"
    },
    "commit": {
      "diff": [
        "tests/bugs152/pr148786/A.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"
      ]
    }
  },
  "e4ab0ae": {
    "bug_report": {
      "summary": "Bug 151673  Incorrect weaving of after returning when 'input' bytecode is of a strange form",
      "description": "We have had a user report a problem where after advice being woven into a particular method is producing code that does not verify.  The problem occurs if the bytecode being input to the weaving process includes a subroutine that contains the return from the method.\n\nHere is the problematic snippet produced by some unknown compiler:\n   200:\tinvokespecial\t#17; //Method com/MyException.\"<init>\":(Ljava/lang/String;)V\n   203:\tathrow\n   204:\taload_3\n   205:\tastore\t6\n   207:\tjsr\t234\n   210:\taload\t6\n   212:\tareturn\n   213:\tastore\t4\n   215:\taload\t4\n   217:\tinvokevirtual\t#79; //Method java/lang/Throwable.printStackTrace:()V\n   220:\tjsr\t234\n   223:\tgoto\t238\n   226:\tastore\t7\n   228:\tjsr\t234\n   231:\taload\t7\n   233:\tathrow\n   234:\tastore\t8\n   236:\taload_3\n   237:\tareturn\n   238:\treturn\n  Exception table:\n   from   to  target type\n     2   213   213   Class javax/ejb/FinderException\n\n     2   226   226   any\n\nsee the jsr's jump to 234, but before the subroutine return at 238 there is an areturn out of the method (this method returns a String).\n\nAfter weaving we get something like this:\n\n   200:\tinvokespecial\t#17; //Method com/MyException.\"<init>\":(Ljava/lang/String;)V\n   203:\tathrow\n   204:\taload_3\n   205:\tastore\t6\n   207:\tjsr\t238\n   210:\taload\t6\n   212:\tastore\t9\n   214:\tgoto\t248\n   217:\tastore\t4\n   219:\taload\t4\n   221:\tinvokevirtual\t#79; //Method java/lang/Throwable.printStackTrace:()V\n   224:\tjsr\t238\n   227:\tgoto\t246\n   230:\tastore\t7\n   232:\tjsr\t238\n   235:\taload\t7\n   237:\tathrow\n   238:\tastore\t8\n   240:\taload_3\n   241:\tastore\t9\n   243:\tgoto\t248\n   246:\tastore\t9\n   248:\tinvokestatic\t#299; //Method After.aspectOf:()LAfter;\n   251:\tinvokevirtual\t#302; //Method After.ajc$afterReturning$After$1$26d6d4a7:()V\n   254:\taload\t9\n   256:\treturn\n\nsee how the areturn has been lost - this code will blow up with a verify error (the string is on the stack, we just ignore it and 'return' normally)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"
      ]
    }
  },
  "2b8fa31": {
    "bug_report": {
      "summary": "Bug 57666  duplicate manifests cause resource-copying to gack",
      "description": "(Ah, the joy of build infrastructure...)\n\nMostly self-explanatory trace, from a build Monday Apr 5, 2004 at 08:46:01 GMT:\n\nduplicate entry: META-INF/MANIFEST.MF\nduplicate entry: META-INF/MANIFEST.MF\njava.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF\n\tat java.util.zip.ZipOutputStream.putNextEntry(ZipOutputStream.java:163)\n\tat java.util.jar.JarOutputStream.putNextEntry(JarOutputStream.java:90)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource(AjBuildManager.java:344)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromJarFile(AjBuildManager.java:288)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination(AjBuildManager.java:253)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:195)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:94)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:280)\n\tat org.aspectj.tools.ajc.Main.runMain(Main.java:217)\n\tat org.aspectj.tools.ajc.Main.main(Main.java:79)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java",
        "ajde/testsrc/org/aspectj/ajde/AjdeTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "ajde/testsrc/org/aspectj/ajde/DuplicateManifestTest.java"
      ]
    }
  },
  "557f5b4": {
    "bug_report": {
      "summary": "Bug 115204  WildAnnotationTypePattern.java:61 NPE after renaming method-annotation class",
      "description": "Sorry I don't have a small test case.  It looks like the NPE happens when the\nannotation refered to by a (compiled?) aspect no longer exists because it was\nrenamed.  The class being woven is the first one (alphabetically), and the\nmethod being woven does not have the annotation on it.\n\nLet me know if you need a test case.\n(And sorry for the late bugs - I'm just now writing the article.)\n\n------------------------------------------------------------------\njava.lang.NullPointerException\nat\norg.aspectj.weaver.patterns.WildAnnotationTypePattern.matches(WildAnnotationTypePattern.java:61)\nat\norg.aspectj.weaver.patterns.SignaturePattern.matchesAnnotations(SignaturePattern.java:321)\nat\norg.aspectj.weaver.patterns.SignaturePattern.matchesExactly(SignaturePattern.java:169)\nat org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:131)\nat\norg.aspectj.weaver.patterns.WithincodePointcut.matchInternal(WithincodePointcut.java:73)\nat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:143)\nat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)\nat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:143)\nat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)\nat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:143)\nat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64)\nat org.aspectj.weaver.Advice.match(Advice.java:109)\nat org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:97)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1749)\nat\norg.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:1736)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1533)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1359)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:382)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:98)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1478)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1443)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1217)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1021)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat\norg.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:759)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:225)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:151)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic class com.isberg.articles.aop7.bean.ABeanTest$APlus extends java.lang.Object:\n  TypeMungers: [(BcelTypeMunger ResolvedTypeMunger(Method, java.lang.String\ncom.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName(java.lang.String)))]\n     declares: [declare parents: com.isberg.articles.aop7.bean.ABeanTest$CPlus\nextends (com.isberg.articles.aop7.bean.ABean$IBean);]\n  private static Throwable ajc$initFailureCause\n  public static final com.isberg.articles.aop7.bean.ABeanTest$APlus\najc$perSingletonInstance\n  static void <clinit>():\n    staticinitialization(void\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.<clinit>())\n    | catch java.lang.Throwable -> E0\n    | |             INVOKESTATIC\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$postClinit ()V   (line 125)\n    | catch java.lang.Throwable -> E0\n    |               GOTO L0\n    |           E0: ASTORE_0\n    |               ALOAD_0\n    |               PUTSTATIC\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$initFailureCause\nLjava/lang/Throwable;\n    |           L0: RETURN\n    staticinitialization(void\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.<clinit>())\n  end static void <clinit>()\n\n  void <init>():\n                    ALOAD_0     // com.isberg.articles.aop7.bean.ABeanTest$APlus\nthis   (line 125)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.<init>())\n    |               RETURN\n    constructor-execution(void\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.<init>())\n  end void <init>()\n\n  void ajc$declare_parents_1()   \norg.aspectj.weaver.MethodDeclarationLineNumber: 127:3678\n:\n                    RETURN   (line 127)\n  end void ajc$declare_parents_1()\n\n  public static String\najc$interMethod$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName(com.isberg.articles.aop7.bean.ABeanTest$CPlus,\nString)    EffectiveSignatureAttribute(java.lang.String\ncom.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName(java.lang.String),\nmethod-execution)\n:\n    method-execution(java.lang.String\ncom.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName(java.lang.String))\n    |               ALOAD_0     // com.isberg.articles.aop7.bean.ABeanTest$CPlus\najc$this_   (line 132)\n    |               ALOAD_1     // java.lang.String methodName\n    |               INVOKESTATIC\ncom.isberg.articles.aop7.bean.ABean.ajc$interMethod$com_isberg_articles_aop7_bean_ABean$com_isberg_articles_aop7_bean_ABean$IBean$propertyName\n(Lcom/isberg/articles/aop7/bean/ABean$IBean;Ljava/lang/String;)Ljava/lang/String;\n    |               ASTORE_2\n    |               LDC \"something\"   (line 133)\n    |               ALOAD_2     // java.lang.String result\n    | method-call(boolean java.lang.String.equals(java.lang.Object))\n    | |             INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    | method-call(boolean java.lang.String.equals(java.lang.Object))\n    |               IFEQ L0\n    |               LDC \"a\"   (line 134)\n    |               ASTORE_2     // java.lang.String result\n    |           L0: ALOAD_2     // java.lang.String result   (line 136)\n    |               ARETURN\n    method-execution(java.lang.String\ncom.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName(java.lang.String))\n  end public static String\najc$interMethod$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName(com.isberg.articles.aop7.bean.ABeanTest$CPlus,\nString)\n\n  public static String\najc$interMethodDispatch1$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName(com.isberg.articles.aop7.bean.ABeanTest$CPlus,\nString)    EffectiveSignatureAttribute(java.lang.String\ncom.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName(java.lang.String),\nmethod-call)\n:\n                    ALOAD_0\n                    ALOAD_1\n                    INVOKEVIRTUAL\ncom.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName\n(Ljava/lang/String;)Ljava/lang/String;\n                    ARETURN\n  end public static String\najc$interMethodDispatch1$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName(com.isberg.articles.aop7.bean.ABeanTest$CPlus,\nString)\n\n  public static com.isberg.articles.aop7.bean.ABeanTest$APlus aspectOf()   \norg.aspectj.weaver.AjAttribute$AjSynthetic@591171\n:\n                    GETSTATIC\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance\nLcom/isberg/articles/aop7/bean/ABeanTest$APlus;\n                    IFNONNULL L0\n                    NEW org.aspectj.lang.NoAspectBoundException\n                    DUP\n                    LDC \"com_isberg_articles_aop7_bean_ABeanTest$APlus\"\n                    GETSTATIC\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$initFailureCause\nLjava/lang/Throwable;\n                    INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.<init>\n(Ljava/lang/String;Ljava/lang/Throwable;)V\n                    ATHROW\n                L0: GETSTATIC\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance\nLcom/isberg/articles/aop7/bean/ABeanTest$APlus;\n                    ARETURN\n  end public static com.isberg.articles.aop7.bean.ABeanTest$APlus aspectOf()\n\n  public static boolean hasAspect()   \norg.aspectj.weaver.AjAttribute$AjSynthetic@16e3eb3\n:\n                    GETSTATIC\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance\nLcom/isberg/articles/aop7/bean/ABeanTest$APlus;\n                    IFNULL L0\n                    ICONST_1\n                    IRETURN\n                L0: ICONST_0\n                    IRETURN\n  end public static boolean hasAspect()\n\n  private static void ajc$postClinit()   \norg.aspectj.weaver.AjAttribute$AjSynthetic@d7cf62\n:\n                    NEW com.isberg.articles.aop7.bean.ABeanTest$APlus\n                    DUP\n                    INVOKESPECIAL\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.<init> ()V\n                    PUTSTATIC\ncom.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance\nLcom/isberg/articles/aop7/bean/ABeanTest$APlus;\n                    RETURN\n  end private static void ajc$postClinit()\nend public class com.isberg.articles.aop7.bean.ABeanTest$APlus\n\nwhen matching pointcut ((withincode(@(Parallel) * *(..)) && call(void *(..))) &&\npercflow(com.isberg.articles.aop7.concurrent.ParallelMethodImpl on\nexecution(@(Parallel) * *(..))))\nwhen matching shadow method-call(boolean java.lang.String.equals(java.lang.Object))\nwhen weaving type com.isberg.articles.aop7.bean.ABeanTest$APlus\nwhen weaving aspects \nwhen weaving \nwhen batch building\nBuildConfig[c:\\home\\ws\\main-31\\.metadata\\.plugins\\org.eclipse.ajdt.core\\devworks-fall.generated.lst]\n#Files=70"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"
      ]
    }
  },
  "40fb451": {
    "bug_report": {
      "summary": "Bug 41170  -classpath entries in .lst files overwrite command-line -classpath entries",
      "description": "If the command-line specifies both a -classpath entry and a .lst file with a\n-classpath entry, the .lst file entry seems to replace rather than supplement\nthe command-line entry.  I expect options to be cumulative. See\n\ntests/bugs/options/classpath"
    },
    "commit": {
      "diff": [
        "tests/bugs/options/classpath/Client.java",
        "tests/bugs/options/classpath/lib/Library.java"
      ]
    }
  },
  "46f9079": {
    "bug_report": {
      "summary": "Bug 394535  Java throws OutOfMemory in call to Class.getGenericSuperclass() on woven class",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs172/pr394535/Bug2.java",
        "tests/bugs172/pr394535/Bug.java",
        "tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java"
      ]
    }
  },
  "0c0adc5": {
    "bug_report": {
      "summary": "Bug 368046  configure a set of classloader for which weavers should not be created in an LTW scenario",
      "description": "Prototyped and tested for JspClassLoaders (see the thread 'aspectj and jsp load' on the mailing list).\n\nThat was done through a system property but it would be easier via aop.xml.  However, this would be the first time we have an aop.xml setting that affects global operation of loadtime weaving.  When any classloader actually got far enough to load the aop.xmls it would discover this setting and from that point on it would be set.  In our JspClassLoader case this would mean that either some non-JspClassLoader is run early enough to discover this setting and turn it off for all JspClassLoaders or the first JspClassLoader will discover the setting and turn it off for all other JspClassLoaders.  I think we can live with that mode of operation."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "loadtime/src/org/aspectj/weaver/loadtime/Aj.java",
        "loadtime/src/org/aspectj/weaver/loadtime/Options.java",
        "tests/bugs174/pr368046/Code.java",
        "tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java",
        "tests/bugs174/pr368046/Azpect.java"
      ]
    }
  },
  "fc55431": {
    "bug_report": {
      "summary": "Bug 394234  Invalid StackMapTable generated in Java 7",
      "description": "When compiling for Java 7, AspectJ can compute an invalid StackMapTable. The verifier will throw a ClassNotFoundException when the generated class is loaded.\n\nExample:\nclass Parent<T> {}\nclass ChildA<T> extends Parent<T> {}\nclass ChildB<T> extends Parent<T> {}\n\npublic Object methodWithBadStackMapTable(boolean value) {\n\treturn value ? new ChildA<String>() : new ChildB<String>();\n}\n\njavap shows the computed StackMapTable to be:\nStackMapTable: number_of_entries = 2\n   frame_type = 15 /* same */\n   frame_type = 71 /* same_locals_1_stack_item */\n  stack = [ class \"Parent<T>\" ]\n\nwhen it should be:\nStackMapTable: number_of_entries = 2\n   frame_type = 15 /* same */\n   frame_type = 71 /* same_locals_1_stack_item */\n  stack = [ class Parent ]"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java"
      ]
    }
  },
  "be03167": {
    "bug_report": {
      "summary": "Bug 237962  [migration] Unexpected problem loading an aspect built with 1.5.4",
      "description": "We always support processing of old aspects.  It doesn't matter what level of AspectJ was used to build an aspect, as long as you use that version or a later version of the weaver, we can unpack it and don't require it to be rebuilt from source.  However, I've just encountered a .class apparently built with 1.5.4 that 1.6.1 cannot load.  It crashes deserializing a PointcutDeclaration.\n\nIn the data stream we have just read the numbers 1 and 3 indicating 'kinded pointcut' and then 'method-execution' and the next digit is a 0 when it should be 1-9.  We crash with a:\n\norg.aspectj.weaver.BCException: weird kind 0\nwhen batch building BuildConfig[null] #Files=43\n\tat org.aspectj.weaver.MemberKind.read(MemberKind.java:35)\n\tat org.aspectj.weaver.patterns.SignaturePattern.read(SignaturePattern.java:682)\n\nThe memberkind is a typesafeenum and so can never be other than 1-9.  It is the first part of a signaturepattern so hard to see how it got written out 'wrong' right now.\n\nI've been told 1.5.4 can load this, so about to try that. Wow....1.5.4 did load it back in, how the hell.\n\nI suspect we aren't consuming enough in 1.6.1 which then leaves us some extra that we interpret as a rogue pointcut.\n\nOk, in a comparison we consume one extra byte from the stream when reading it with 1.6.1 that we do not consume with 1.6.0 - at position 260.\n\nAs I got closer to it, I knew what it would be - especially when I knew it was just one byte difference.  The version check for whether the byte for 'annotation pattern relates to a parameter match' was wrong (urgh)."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java"
      ]
    }
  },
  "676aa08": {
    "bug_report": {
      "summary": "Bug 116305  Unexpected error: can't determine implemented interfaces of missing type",
      "description": "I have reusable library code that imports a type (a JAX-RPC Call in this case) \nfor use in two ways:\n1) matching in a method signature. \n2) casting and use in an advice body\n\nIt used to work properly when I used it in a load-time weaving configuration \nwithout the (Call) type being available on the classpath (I think it broke in \nthe last week).\n\nHowever, I am now getting an abort error \"can't determine implemented \ninterfaces of missing type\" when weaving this aspect into another type when the \nimported (Call) type isnt visible in a classloader. I tried changing the code \nto remove the import and to use a fully qualified name in the pointcut (and a \nreflective invocation in the advice body). However, this still fails in the \nsame way.\n\nThese pointcuts are presumably causing the error:\n\npublic abstract aspect AbstractRequestMonitor {\n    protected pointcut scope() : within(*);//if(true);\n    protected pointcut monitorEnabled() : isMonitorEnabled() && scope();\n    protected abstract pointcut isMonitorEnabled();\n...\n}\n\npublic abstract aspect AbstractResourceMonitor extends AbstractRequestMonitor {\n...\n}\n\npublic aspect RemoteCallMonitor extends AbstractResourceMonitor {\n    protected pointcut isMonitorEnabled() : if(aspectOf().isEnabled());\n\n    public pointcut jaxRpcClientCall(Object wsCallObj) : \n        call(public * javax.xml.rpc.Call.invoke*(..)) && target(wsCallObj);\n\n    Object around(final Object wsCallObj) : jaxRpcClientCall(wsCallObj) && \nmonitorEnabled() {\n...\n\nHere is the output:\n\norg.aspectj.bridge.AbortException: can't determine implemented interfaces of \nmissing type javax.xml.rpc.Call\nwhen matching pointcut ((((within(*) && call(public * javax.xml.rpc.Call.invoke*\n(..))) && target(BindingTypePattern(java.lang.Object, 0))) && if(boolean \nglassbox.inspector.monitor.resource.RemoteCallMonitor.ajc$if_12())) && \npersingleton(glassbox.inspector.monitor.resource.RemoteCallMonitor))\nwhen matching shadow method-call(java.util.Locale java.util.Locale.getDefault())\nwhen weaving type org.apache.struts.action.ActionServlet\nwhen weaving classes \nwhen weaving\n\n\tat \norg.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessa\nge(WeavingAdaptor.java:364)\n\tat org.aspectj.bridge.MessageUtil.error(MessageUtil.java:81)\n\tat \norg.aspectj.weaver.MissingResolvedTypeWithKnownSignature.raiseCantFindType\n(MissingResolvedTypeWithKnownSignature.java:195)\n\tat \norg.aspectj.weaver.MissingResolvedTypeWithKnownSignature.getDeclaredInterfaces\n(MissingResolvedTypeWithKnownSignature.java:77)\n\tat org.aspectj.weaver.ResolvedType.getDirectSupertypes\n(ResolvedType.java:64)\n\tat org.aspectj.weaver.ReferenceType.isAssignableFrom\n(ReferenceType.java:312)\n\tat org.aspectj.weaver.ReferenceType.isAssignableFrom\n(ReferenceType.java:236)\n\tat org.aspectj.weaver.patterns.KindedPointcut.warnOnConfusingSig\n(KindedPointcut.java:151)\n\tat org.aspectj.weaver.patterns.KindedPointcut.matchInternal\n(KindedPointcut.java:108)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal\n(AndPointcut.java:57)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal\n(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal\n(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal\n(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64)\n\tat org.aspectj.weaver.Advice.match(Advice.java:109)\n\tat org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:98)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match\n(BcelClassWeaver.java:2098)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction\n(BcelClassWeaver.java:2085)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match\n(BcelClassWeaver.java:1867)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.matchInit\n(BcelClassWeaver.java:1731)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match\n(BcelClassWeaver.java:1660)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave\n(BcelClassWeaver.java:445)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave\n(BcelClassWeaver.java:101)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1531)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump\n(BcelWeaver.java:1485)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify\n(BcelWeaver.java:1266)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1088)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes\n(WeavingAdaptor.java:266)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass\n(WeavingAdaptor.java:198)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:67)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform\n(ClassPreProcessorAgentAdapter.java:52)\n..."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java"
      ]
    }
  },
  "6ea8300": {
    "bug_report": {
      "summary": "Bug 58681  -X should output available -X options",
      "description": "ajc should emit the available -X options on -help or -X request (the latter like\njava) to get more traffic and feedback on the experimental options."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java",
        "org.aspectj.ajdt.core/testsrc/EajcModuleTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/MainTest.java"
      ]
    }
  },
  "090de7e": {
    "bug_report": {
      "summary": "Bug 155972  NullPointerException in ConstructorSignature.getConstructor()",
      "description": "AspectJ version: 1.5.3.200608290814\n\nWhen advising a constructor, we can do the following to obtain the constructor as a java.lang.reflect.Member:\n\n\t\tMember cons = ((ConstructorSignature) thisJoinPointStaticPart\n\t\t\t\t.getSignature()).getConstructor();\n\nhowever that sometimes fails, and returns null."
    },
    "commit": {
      "diff": [
        "runtime/src/org/aspectj/runtime/reflect/FieldSignatureImpl.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java",
        "tests/bugs153/pr155972/InitializerTest.java",
        "runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java",
        "tests/bugs153/pr155972/FieldTest.java",
        "runtime/src/org/aspectj/runtime/reflect/ConstructorSignatureImpl.java",
        "tests/bugs153/pr155972/ConstructorTest.java"
      ]
    }
  },
  "7d14432": {
    "bug_report": {
      "summary": "Bug 30663  lame error message: \"negation doesn't allow binding\"",
      "description": "AspectJ Compiler 1.1beta4\n\nThis program:\n\npublic aspect Foo {\n  pointcut p(int i): call(void f(i));\n}\n\nproduces these error messages:\n\nnegation doesn't allow binding\nformal unbound in pointcut\n\n2 errors\n\nIt should say something like \"binding is only allowed in state-based pointcuts\", and it should print the file and line number.\n\n--Doug"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/TypePattern.java",
        "tests/bugs/BadBindingError.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"
      ]
    }
  },
  "39c3a3b": {
    "bug_report": {
      "summary": "Bug 61411  AJDoc launch script on Windows can lose arguments",
      "description": "Using AspectJ 1.2rc1 on Windows XP\n\nThis report highlights a problem that I've seen using ajdoc.bat on Windows but\nthe issue applies equally to the ajc.bat and ajbrowser.bat files as well.\n\nThe %ASPECTJ_HOME%\\bin\\ajdoc.bat file that users run to launch the ajdoc tool\nimposes a limit of only 9 command line arguments that may be passed to the\nclass org.aspectj.tools.ajdoc.Main. In scenarios where there the -sourcepath,\n-classpath, -d etc options are used it is easy for these to \"eat up\" the list\nof arguments that are passed into the JVM. A long list of packages entered\nat the end of the ajdoc.bat command can be truncated or possibly even ignored\n(in which case an error message will be output telling the user that no\nclasses or packages have been specified).\n\nIn order to prevent a limit being put on the number of arguments passed to\nthe launched JVM, the invocation line needs to end with %* rather than the\n%1 %2 %3 %4 %5 %6 %7 %8 %9 list it currently uses.\n\nThe proposed fix also *seems* (could somebody else confirm this ?) to sort\nout another problem regarding the ajdoc.bat file which is this : long semi-\ncolon delimited paths supplied as the arguments for the -sourcepath and \n-classpath options seem to get split apart and passed into the JVM as separate \narguments unless the entire path list is supplied inside quotes. This should\nnot be necessary. It seems that the batch file processor interprets the\nsemi-colons in a path list as delimiters between arguments. Consequently\neach element in the path list is treated as a separate argument instead\nof being part of one big string representing the sourcepath or classpath."
    },
    "commit": {
      "diff": [
        "build/src/$installer$/org/aspectj/Main.java"
      ]
    }
  },
  "99a873c": {
    "bug_report": {
      "summary": "Bug 28974  Compiler error when introducing a \"final\" field",
      "description": "The aspect below fails to compile with 1.1b2, producing the compilation error: \n--------------------\n$ ajc com/ibm/amc/*.java com/ibm/amc/ejb/*.java\nd:/eclipse/runtime-workspace-ajsamples/Mock EJBs/com/ibm/amc/DemoBeanEJB.java:1:\n Cannot assign a value to the final field com.ibm.amc.DemoBean.ajc$interField$co\nm_ibm_amc$verbose\n\n!! no source information available !!\n\n1 error\n---------------------------\n\n\npackage com.ibm.amc;\n\nimport com.ibm.amc.ejb.SessionBean;\n/**\n * @author colyer\n *\n * To change this generated comment edit the template variable \"typecomment\":\n * Window>Preferences>Java>Templates.\n * To enable and disable the creation of type comments go to\n * Window>Preferences>Java>Code Generation.\n */\npublic aspect DemoBeanEJB {\n\n\tdeclare parents: DemoBean implements SessionBean;\n\t\n        // THIS NEXT LINE IS THE CULPRIT\n\tstatic final boolean DemoBean.verbose = true;\n\t\n\tprivate transient String DemoBean.ctx;\n\t\n\tpublic void DemoBean.ejbActivate( ) {\n\t\tif ( verbose ) {\n\t\t\tSystem.out.println( \"ejbActivate Called\" );\t\n\t\t}\t\n\t}\n}\n\n\n-------------------\nMaking the inter-type declaration non-final solves the problem..."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/AjcMemberMaker.java"
      ]
    }
  },
  "1f1ace1": {
    "bug_report": {
      "summary": "Bug 123553  Can't use named pointcut in advice decl. in generic aspect",
      "description": "When defining a generic aspect with a paramterized PC, using that PC in an advice declaration causes an 'incompatible type' error. Example:\n\npublic abstract aspect GenericAspect<Par1> {\n   abstract pointcut checkpoint(Par1 par1);\n\n   // advice declaration causes error\n   after(Par1 par1): checkpoint(par1) {// do something}\n}\n\nUsing 1.3.0.20051220093604 and AspectJ 1.5.0, the compiler complains:\n\n\"incompatible type, expected java.lang.Object found BindingTypePattern(TPar1;, 0).  Check the type specified in your pointcut\"  \n\nSince it is possible to paramterize a named PC in subaspects:\n\npublic abstract aspect GenericAspect<Par1> {    \n   abstract pointcut checkpoint(Par1 par1);\n}\n\npublic aspect SubAspect1 extends GenericAspect<Main>{\n   pointcut checkpoint(Main main): call(void Main.test()) && target(main);\n   after (Main main): checkpoint(main) {\n       System.out.println(\"Caught by 1.\");\n   }\n}\n\npublic aspect SubAspect2 extends GenericAspect<Main2>{    pointcut checkpoint(Main2 main): call(void Main2.test()) && target(main);\n   after (Main2 main): checkpoint(main) {\n       System.out.println(\"Caught by 2.\");\n   }\n} \n\n... and since it is possible to use generic PC utilizing unnamed PCs in a generic aspect: \n\npublic abstract aspect GenericAspect<Par1> {    \n   // works\n   after(Par1 par1): call(void Par1.test()) && target(par1) {// something }\n} \n\n... it seems that this is a bug."
    },
    "commit": {
      "diff": [
        "tests/bugs151/pr123553/A.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"
      ]
    }
  },
  "2d297d7": {
    "bug_report": {
      "summary": "Bug 29662  VerifyError on accessing objects not accessible to the weaver: Incompatible object argument for invokespecial",
      "description": "I use aspectj1.1b4 (the version list box did not let me choose, it offered only\n\"unspecified\").\n\nCompiling the program below yields a warning that a affected type is not exposed\nto the weaver. Running it crashes the program with this message:\n\"java.lang.VerifyError: (class: VerifyError, method: finalize signature: ()V)\nIncompatible object argument for invokespecial\"\n\n\npublic class VerifyError {\n    public static void main(String args[]) {\n        VerifyError ve = new VerifyError();\n    }\n\n    protected void finalize() {}\n}\n\naspect FinalizeContract {\n    pointcut finalizeCall(Object o):\n        this(Object+) &&\n        this(o) &&\n        execution(void finalize());\n\n    void around(Object o) throws Throwable: finalizeCall(o) {\n        super.finalize();\n        proceed(o);\n    }\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs/AroundAccess.java"
      ]
    }
  },
  "fc7db25": {
    "bug_report": {
      "summary": "Bug 141945  Compiler issues message concerning aop.xml even when not doing LTW",
      "description": "From the mailing list:\n\n=============\n\nI am executing the command as below,\n \nCOMMAND: ajc -inpath woven_hello1.jar -aspectpath aspect2.jar -outjar woven_hello2.jar\n \nI am getting same old error,\nwoven_hello1.jar [error] aspect 'aspect1' woven into 'Hello' must be declared in an aop.xml file.\n(no source information available)\nI have placed both aspect1.class and aspect2.class in CLASSPATH system variable.\n\n==============\n\nWe shouldn't be putting out messages about aop.xml when we are not doing LTW - this message points the user to a solution that will not work in this case!"
    },
    "commit": {
      "diff": [
        "tests/java5/ataspectj/ataspectj/ltwreweavable/MainReweavableLogging.java"
      ]
    }
  },
  "f821ca3": {
    "bug_report": {
      "summary": "Bug 145086  NPE when weak reference set in signature",
      "description": "Simon ran into the same problem in setting the values. I will attach a patch to fix this, with test cases to properly verify it works in both cases.\n\njava.lang.NullPointerException\n\tat org.aspectj.runtime.reflect.SignatureImpl$CacheImpl.set(SignatureImpl.java:224)\n\tat org.aspectj.runtime.reflect.SignatureImpl.toString(SignatureImpl.java:57)\n\tat org.aspectj.runtime.reflect.SignatureImpl.toString(SignatureImpl.java:62)"
    },
    "commit": {
      "diff": [
        "runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java",
        "runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java",
        "runtime/testsrc/org/aspectj/runtime/reflect/JoinPointImplTest.java"
      ]
    }
  },
  "28fb861": {
    "bug_report": {
      "summary": "Bug 297013  Unclosed stream in AjAttribute",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/AjAttribute.java"
      ]
    }
  },
  "edb41e3": {
    "bug_report": {
      "summary": "Bug 391384  WildAnnotationTypePattern.java:231",
      "description": "OK, I get that this is not supported (and what I *want* here is matching on the existence of the supplied header *among* the headers in the String[]). A feature request might be in order, but a syntax for specifying how you want to match the array would be needed....\n\nThe bug that I'm reporting is that trying to *save* this program gets an error that pops up a dialog. This should just become another error marker.\n\nIt might the compiler that has to change what it throws, but in the end it's the Eclipse IDE that ends up breaking from a user standpoint.\n\n(RequestMapping.headers() is of type String[]).\n\npublic aspect Fail {\n    pointcut testable(): execution(public * @RequestMapping(headers=\"x-test=test\") com.example..*(..));\n}\n\njava.lang.RuntimeException\nat org.aspectj.weaver.patterns.WildAnnotationTypePattern.resolveAnnotationValues(WildAnnotationTypePattern.java:231)\nat org.aspectj.weaver.patterns.WildAnnotationTypePattern.resolveBindings(WildAnnotationTypePattern.java:325)\nat org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(WildTypePattern.java:657)\nat org.aspectj.weaver.patterns.SignaturePattern.resolveBindings(SignaturePattern.java:81)\nat org.a ... n(Worker.java:53)\n\nCompile error: RuntimeException thrown: Compiler limitation: annotation value support not implemented for type java.lang.String[]"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java",
        "tests/bugs172/pr391384/Code.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/WeaverMessages.java",
        "tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java"
      ]
    }
  },
  "039be68": {
    "bug_report": {
      "summary": "Bug 152161  Contribution: Support -Xset in Load-Time Weaving Configuration",
      "description": "I needed this to try out a setting in the pipelined compilation (-Xset:runMinimalMemory=true) ... I was able to verify that it parsed and set an option correctly in the debugger. I also have included a test that sets all the currently available options."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "loadtime/src/org/aspectj/weaver/loadtime/Options.java",
        "tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java"
      ]
    }
  },
  "b52515f": {
    "bug_report": {
      "summary": "Bug 119353  Inconsistent Implementations of ReferenceType.getDeclaredMethods()",
      "description": "I am running into a problem in load-time weaving when I use reflection delegates because the weaver is generating an incorrect bridge method when I perform an inter-type declaration on Struts.ActionServlet for the init method. On investigation, the BCEL world is recognizing this as an overriding method, because its version of getDeclaredMethods is returning the declared methods for all ancestor superclasses. However, the reflection world is returning only the declared methods for this one class. It therefore appears that the weaver expects getDeclaredMethods to return all of them (making the name quite misleading). I think previously the method was being implemented inconsistently between 1.5 reflection and <1.5 reflection delegates. But it looks like it needs to be handled consistently to include all superclass methods.\n\nHowever, I dont know what other places (e.g., the MAP) are really expecting getDeclaredMethods and its siblings to behave like Java reflection's version...\n\nI started work on adding a getAllDeclaredMethods method to ReferenceType and delegates, as an alternative to provide the weaver the ability to check method overriding as in this case, but it's a little bit involved and I wanted to flag the issue first.\n\nHere's a test that fails and illustrates the issue:\nIndex: ReflectionBasedReferenceTypeDelegateTest.java\n===================================================================\nRCS file: /home/technology/org.aspectj/modules/weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java,v\nretrieving revision 1.5\ndiff -u -r1.5 ReflectionBasedReferenceTypeDelegateTest.java\n--- ReflectionBasedReferenceTypeDelegateTest.java\t28 Nov 2005 17:44:40 -0000\t1.5\n+++ ReflectionBasedReferenceTypeDelegateTest.java\t6 Dec 2005 04:11:41 -0000\n@@ -238,6 +238,18 @@\n         assertTrue(\"Superclass for Map generic type should be Object but was \"+rt2,rt2.equals(UnresolvedType.OBJECT));         \n     }\n     \n+    public void testCompareSubclassDelegates() {\n+        world.setBehaveInJava5Way(true);\n+        \n+        BcelWorld bcelWorld = new BcelWorld();\n+        bcelWorld.setBehaveInJava5Way(true);\n+        UnresolvedType javaUtilHashMap = UnresolvedType.forName(\"java.util.HashMap\");\n+        ReferenceType rawType = (ReferenceType)bcelWorld.resolve(javaUtilHashMap );\n+        \n+        ReferenceType rawReflectType = (ReferenceType)world.resolve(javaUtilHashMap );\n+        assertEquals(rawType.getDelegate().getDeclaredMethods().length, rawReflectType.getDelegate().getDeclaredMethods().length);\n+    }\n+    \n \t// todo: array of int\t\n \n \tprotected void setUp() throws Exception {\n\n\nThis results in:\njunit.framework.AssertionFailedError: expected:<41> but was:<29>\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat junit.framework.Assert.failNotEquals(Assert.java:282)\n\tat junit.framework.Assert.assertEquals(Assert.java:64)\n\tat junit.framework.Assert.assertEquals(Assert.java:201)\n\tat junit.framework.Assert.assertEquals(Assert.java:207)\n\tat org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates(ReflectionBasedReferenceTypeDelegateTest.java:250)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)"
    },
    "commit": {
      "diff": [
        "weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java",
        "weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"
      ]
    }
  },
  "16512b2": {
    "bug_report": {
      "summary": "Bug 74048  AJDT reports unnecessary compile time warnings for private static aspects",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "7b081f2": {
    "bug_report": {
      "summary": "Bug 49638  exception logging: after() throwing advice can't convert Throwable obj to string and ajc aborts",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs/AfterThrowingAdviceSyntaxError.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/AjParser.java"
      ]
    }
  },
  "9aed31d": {
    "bug_report": {
      "summary": "Bug 70773  AspectJ Error: ConncurrentModificationException thrown: null",
      "description": "In AspectJ 1.1.11 for Eclipse, build ID 1.2.0 (and also in the previous 1.1.10)\non Eclipse version 3.0.0, build ID 200406351208: If I enable incremental\ncompilation and make a change to a file (typing a space and deleting it, or\nediting a comment), I get a \"ConncurrentModificationException thrown: null\" error."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"
      ]
    }
  },
  "648c0f4": {
    "bug_report": {
      "summary": "Bug 42573  .lst file entries not resolved relative to list file: {boot}classpath, extdirs,",
      "description": "My -classpath entry in a config/.lst file was resolved relative to the working\ndirectory rather than to the config/.lst file.  BuildArgParser.java looks like\nthis would also be true for bootclasspath and extdirs, but not for injars,\naspectpath, or sourceroots."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "util/src/org/aspectj/util/ConfigParser.java"
      ]
    }
  },
  "7a61380": {
    "bug_report": {
      "summary": "Bug 91912  Request for a new type of relationship in the structure model",
      "description": "Declare soft relationships are currently 'advises' and 'advised by' \nrelationships.  Would it be possible to add 'softens' and 'softened by' \n(or 'softens exception at' and 'exception softened by') relationships to the \nstructure model?"
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/IRelationship.java",
        "weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"
      ]
    }
  },
  "ee03a3e": {
    "bug_report": {
      "summary": "Bug 39959  AJC Compiler generates invalid class files under certain circunstances.",
      "description": "I made a package (I will attach it to this bug with the name bug.zip) which\nshows a sample Java program that correctly runs when compiled with javac and\nhave classloading problems every time it is compiled with ajc.\n\nPlease see the file README.TO.DEMONSTRATE.BUG inside the bug.zip archive for\ndetailed (although simple) instructions on reproducing the bug.\n\nThere are two shell scripts attached to make things easier.\n\nPlease keep me informed of the status of this issue."
    },
    "commit": {
      "diff": [
        "tests/bugs/bootstrapClasspath/UsesDOMParser.java"
      ]
    }
  },
  "a5e645f": {
    "bug_report": {
      "summary": "Bug 59076  Reduce footprint of JoinPoint.StaticPart objects",
      "description": "Tests show that each object consumes 180+ bytes. For a large project (1000+ \nclasses) where an aspect is used to implement a pervasive cross-cutting \nconcern e.g. exception logging this can lead to >1MB of additional heap space. \nTwo possible approaches could be:\n1. Break literal String used by Factory.makeXXXSig() methods into component \nparts e.g. package, class, method. ... names. These could then be shared \nautomatically by the JVM as interned Strings.\n2. Lazy instantiation of handler static JPs in the catch block.\n\nAny enhancements could be enabled by a compiler option similar to -XlazyTjp."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java",
        "runtime/src/org/aspectj/runtime/reflect/Factory.java"
      ]
    }
  },
  "99882cb": {
    "bug_report": {
      "summary": "Bug 138540  Patch to add support for -Xset: options",
      "description": "I needed to add X=\"set:activateLightweightDelegates=false to my ant build configuration, to troubleshoot the out of memory permgen condition. However, the ant task support doesn't currently support adding the new -Xset style options Andy added.\n\nHere is a small patch to pass any -Xset: options through, that worked for me."
    },
    "commit": {
      "diff": [
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"
      ]
    }
  },
  "1bbe6f9": {
    "bug_report": {
      "summary": "Bug 219830  java.lang.NullPointerException in Java15AnnotationFinder when using SWT",
      "description": "I receive the following Exception when running SWT with AspjectJ load time weaving through the Spring Framework.  The lines around org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:123) are as follows:\n\nfor (int i = 0; i < anns.length; i++) {\n     annSet.add(world.resolve(UnresolvedType.forSignature(anns[i].getTypeSignature())));\n}\n\nWhen using the debugger, I see \"world\" as a null value.\n\nAttached is a stripped down Eclipse project that generates the error during startup.  My runtime arguments are as follows:\n\n-javaagent:${resource_loc:/AspectJBug/lib/spring-agent.jar}\n\n--------------------------------------------\n\n[AppClassLoader@19d819d8] abort trouble in: \nfinal class org.eclipse.swt.awt.SWT_AWT$10 extends java.lang.Object implements java.lang.Runnable:\n  private final java.awt.Frame val$frame [Synthetic]\n  void <init>(java.awt.Frame):\n                    ALOAD_0     // Lorg/eclipse/swt/awt/SWT_AWT$10; this   (line 274)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void org.eclipse.swt.awt.SWT_AWT$10.<init>(java.awt.Frame))\n    |               ALOAD_0     // Lorg/eclipse/swt/awt/SWT_AWT$10; this   (line 1)\n    |               ALOAD_1\n    |               PUTFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame;\n    |               RETURN\n    constructor-execution(void org.eclipse.swt.awt.SWT_AWT$10.<init>(java.awt.Frame))\n  end void <init>(java.awt.Frame)\n\n  public void run():\n    method-execution(void org.eclipse.swt.awt.SWT_AWT$10.run())\n    | catch java.lang.Throwable -> E0\n    | |             LDC \"sun.awt.windows.WComponentPeer\"   (line 277)\n    | | method-call(java.lang.Class java.lang.Class.forName(java.lang.String))\n    | | |           INVOKESTATIC java.lang.Class.forName (Ljava/lang/String;)Ljava/lang/Class;\n    | | method-call(java.lang.Class java.lang.Class.forName(java.lang.String))\n    | |             ASTORE_1\n    | |             ALOAD_1     // Ljava/lang/Class; clazz   (line 278)\n    | |             LDC \"winGraphicsConfig\"\n    | | method-call(java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String))\n    | | |           INVOKEVIRTUAL java.lang.Class.getDeclaredField (Ljava/lang/String;)Ljava/lang/reflect/Field;\n    | | method-call(java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String))\n    | |             ASTORE_2\n    | |             ALOAD_2     // Ljava/lang/reflect/Field; field   (line 279)\n    | |             ICONST_1\n    | | method-call(void java.lang.reflect.Field.setAccessible(boolean))\n    | | |           INVOKEVIRTUAL java.lang.reflect.Field.setAccessible (Z)V\n    | | method-call(void java.lang.reflect.Field.setAccessible(boolean))\n    | |             ALOAD_2     // Ljava/lang/reflect/Field; field   (line 280)\n    | |             ALOAD_0     // Lorg/eclipse/swt/awt/SWT_AWT$10; this\n    | |             GETFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame;\n    | | method-call(java.awt.peer.ComponentPeer java.awt.Frame.getPeer())\n    | | |           INVOKEVIRTUAL java.awt.Frame.getPeer ()Ljava/awt/peer/ComponentPeer;\n    | | method-call(java.awt.peer.ComponentPeer java.awt.Frame.getPeer())\n    | |             ALOAD_0     // Lorg/eclipse/swt/awt/SWT_AWT$10; this\n    | |             GETFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame;\n    | |             INVOKEVIRTUAL java.awt.Frame.getGraphicsConfiguration ()Ljava/awt/GraphicsConfiguration;\n    | |             INVOKEVIRTUAL java.lang.reflect.Field.set (Ljava/lang/Object;Ljava/lang/Object;)V\n    | catch java.lang.Throwable -> E0\n    |               GOTO L0\n    |           E0: POP   (line 281)\n    |           L0: RETURN   (line 282)\n    method-execution(void org.eclipse.swt.awt.SWT_AWT$10.run())\n  end public void run()\n\nend final class org.eclipse.swt.awt.SWT_AWT$10\n -- (NullPointerException) null\nnull\njava.lang.NullPointerException\n\tat org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:123)\n\tat org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations(ReflectionBasedResolvedMemberImpl.java:174)\n\tat org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation(ReflectionBasedResolvedMemberImpl.java:158)\n\tat org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:82)\n\tat org.aspectj.weaver.patterns.AnnotationPointcut.matchInternal(AnnotationPointcut.java:151)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:52)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)\n\tat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:75)\n\tat org.aspectj.weaver.Advice.match(Advice.java:112)\n\tat org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:118)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2811)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:2773)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2506)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2332)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:494)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:119)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1651)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1602)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1380)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1200)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:360)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:262)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:78)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n\tat org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformerDecorator.transform(AspectJWeavingEnabler.java:84)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:141)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:174)\n\tat java.lang.ClassLoader.defineClassImpl(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:228)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:148)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:557)\n\tat java.net.URLClassLoader.access$400(URLClassLoader.java:120)\n\tat java.net.URLClassLoader$ClassFinder.run(URLClassLoader.java:962)\n\tat java.security.AccessController.doPrivileged(AccessController.java:275)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:488)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:607)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:327)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:573)\n\tat org.eclipse.swt.awt.SWT_AWT.new_Frame(SWT_AWT.java:274)\n\nFeb 21, 2008 12:09:23 PM org.aspectj.weaver.tools.Jdk14Trace error\nSEVERE: org/eclipse/swt/awt/SWT_AWT$10\njava.lang.NullPointerException\n\tat org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:123)\n\tat org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations(ReflectionBasedResolvedMemberImpl.java:174)\n\tat org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation(ReflectionBasedResolvedMemberImpl.java:158)\n\tat org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:82)\n\tat org.aspectj.weaver.patterns.AnnotationPointcut.matchInternal(AnnotationPointcut.java:151)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:52)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)\n\tat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:75)\n\tat org.aspectj.weaver.Advice.match(Advice.java:112)\n\tat org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:118)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2811)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:2773)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2506)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2332)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:494)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:119)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1651)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1602)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1380)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1200)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:360)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:262)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:78)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n\tat org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformerDecorator.transform(AspectJWeavingEnabler.java:84)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:141)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:174)\n\tat java.lang.ClassLoader.defineClassImpl(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:228)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:148)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:557)\n\tat java.net.URLClassLoader.access$400(URLClassLoader.java:120)\n\tat java.net.URLClassLoader$ClassFinder.run(URLClassLoader.java:962)\n\tat java.security.AccessController.doPrivileged(AccessController.java:275)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:488)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:607)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:327)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:573)\n\tat org.eclipse.swt.awt.SWT_AWT.new_Frame(SWT_AWT.java:274)"
    },
    "commit": {
      "diff": [
        "weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java"
      ]
    }
  },
  "9241e2e": {
    "bug_report": {
      "summary": "Bug 291206  Allow declare error & declare warning to support type expressions",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs169/pr291206/Two.java",
        "tests/bugs169/pr291206/Three.java",
        "tests/bugs169/pr291206/One.java"
      ]
    }
  },
  "513564a": {
    "bug_report": {
      "summary": "Bug 159143  subtype pattern not working for declare annotation on method",
      "description": "Using AspectJ 1.5.3.200609271036, when declaring an annotation on a method, get unexpected error when using subtype wildcard for the declaring type.  E.g.,\n\n  declare @method : void Foo+.foo() : @MethodAnnotation;\n\nError text: \"The method 'void Foo+.foo()' does not exist\""
    },
    "commit": {
      "diff": [
        "tests/bugs153/pr159143/DeclareMethodAnnotation.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "62d16d5": {
    "bug_report": {
      "summary": "Bug 113510  readAspect",
      "description": "clearly define what the goal for readAspect is\nold byte per byte reading cause NPE in some test case\ncurrent impl is hashcode for aspect name + classloader - ie unstable across\nstartups."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"
      ]
    }
  },
  "fa2ed1b": {
    "bug_report": {
      "summary": "Bug 132087  NPE from unbound variable in advice",
      "description": "I get this error from having an unbound reference to a variable in an aspect. See attached AJDT project for an example.\n\njava.lang.NullPointerException\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:412)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1250)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:392)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse(LocalDeclaration.java:242)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:212)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:143)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:82)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:927)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:201)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:90)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:528)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:843)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:243)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"
      ]
    }
  },
  "2cc4826": {
    "bug_report": {
      "summary": "Bug 69011  ajdoc fails when using default package",
      "description": null
    },
    "commit": {
      "diff": [
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java",
        "ajdoc/testdata/coverage/InDefaultPackage.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java"
      ]
    }
  },
  "4573068": {
    "bug_report": {
      "summary": "Bug 77269  Advice on inner classes not show in Outline view or gutter",
      "description": "Advice associated with pointcuts that match join points in inner classes are \nnot shown. Declare warning/error are shown however. See attached screenshot \nfor example below. Notice WEAVEINFO messages indicate problem is in AJDT not \nAspectJ. Also notice phantom entry in Outline view \"injar aspectL Test.java\".\n\npackage bug_nnnnn;\n\npublic class Test {\n\n\tpublic void test () {\n\t\tnew Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Exception();\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\thandleException(ex);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\t\n\tpublic static void handleException (Throwable th) {\n\t\t\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tthrow new Exception();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\thandleException(ex);\n\t\t}\n\t}\n}\naspect Aspect {\n\t\n\tdeclare warning : call(void handleException(..)) && !within(Aspect) :\n\t\t\"Only Aspect should handle exceptions\";\n\t\n\tpointcut caughtExceptions (Throwable th) :\n\t\thandler(Throwable+) && args(th);\n\t\n\tbefore (Throwable th) : caughtExceptions(th) {\n\t\tTest.handleException(th);\n\t}\n}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"
      ]
    }
  },
  "a2469c7": {
    "bug_report": {
      "summary": "Bug 70241  outline view shows anonymous inner classes in different way than jdt outline",
      "description": "See screenshots."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java",
        "ajde/testdata/extensions/InnerClasses.java",
        "ajde/testsrc/org/aspectj/ajde/ExtensionTests.java"
      ]
    }
  },
  "942da06": {
    "bug_report": {
      "summary": "Bug 362956  neo4j NPE",
      "description": "java.lang.NullPointerException\n        at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:128)\n        at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:96)\n        at org.aspectj.weaver.patterns.AndAnnotationTypePattern.matches(AndAnnotationTypePattern.java:42)\n        at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly(AnyWithAnnotationTypePattern.java:55)\n        at org.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:132)\n        at org.aspectj.weaver.patterns.TypePattern.matches(TypePattern.java:146)\n        at org.aspectj.weaver.patterns.SignaturePattern.couldEverMatch(SignaturePattern.java:999)\n        at org.aspectj.weaver.patterns.DeclareAnnotation.couldEverMatch(DeclareAnnotation.java:483)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.getMatchingSubset(BcelClassWeaver.java:1065)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weaveDeclareAtField(BcelClassWeaver.java:1301)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:445)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:100)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1687)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1631)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1394)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1180)\n        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:514)\n        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:447)\n        at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:432)\n        at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)\n        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:652)\n        at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1021)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:268)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:181)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n        at org.aspectj.tools.ajc.Main.run(Main.java:371)"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"
      ]
    }
  },
  "603b063": {
    "bug_report": {
      "summary": "Bug 78021  Injecting exception into while loop with break statement causes catch block to be ignored",
      "description": "In order to test exception scenarios in an existing framework, I have\ncreated an aspect to inject an exception.  The exception is injected into\nsome code running within a try/catch/finally block.  After the exception is\nthrown, I am expecting control to pass to the catch block.  However, what\nis happening is that the catch block code is not executed, control passes\nthrough the finally block and the (undeclared) exception is thrown to the\ncalling method.\n\nHere is a distilled test case:\n\npublic class MainClass {\n\n       protected Integer counter;\n       private int j;\n\n       public static void main(String[] args) {\n\n               MainClass mh = new MainClass();\n               try {\n                       mh.doSomething();\n               } catch (Exception e) {\n                       System.out.println(\"Exception thrown by\ndoSomething!!!!!\");\n                       e.printStackTrace();\n               }\n       }\n\n       public void doSomething() {\n               int i = 0;\n               while (i++ < 1) {\n                       counter=null;\n\n                       try {\n                               counter = getCounter();\n                               if (counter == null) {\n                                       break;\n                               }\n\n                               commit();\n                       } catch (Throwable e) {\n                               System.out.println(\"Caught exception \" +\ne);\n                       } finally {\n                               System.out.println(\"In finally block\");\n                       }\n               }\n       }\n\n       protected Integer getCounter() {\n               return new Integer(j++);\n       }\n\n       protected void commit() throws SQLException {\n               System.out.println(\"Main.commit\");\n       }\n}\n\nThe following aspect injects the exception:\n\npublic aspect SimpleExceptionThrowingAspect {\n\n   pointcut commitOperation() : call (* MainClass+.commit(..));\n\n   before() throws SQLException : commitOperation() {\n        throw new SQLException(\"Dummy SQL Exception\", \"55102\");\n   }\n}\n\nExpected output is:\n       Caught exception java.sql.SQLException: Dummy SQL Exception\n       In finally block\n\nActual output is:\n       In finally block\n       Exception thrown by doSomething!!!!!\n       java.sql.SQLException: Dummy SQL Exception        at\nnz.govt.moh.test.SimpleExceptionThrowingAspect.ajc$before$nz_govt_moh_test_SimpleExceptionThrowingAspect$1$292c82f1(SimpleExceptionThrowingAspect.aj:10)\n\n       at nz.govt.moh.test.MainClass.doSomething(MainClass.java:32)\n       at nz.govt.moh.test.MainClass.main(MainClass.java:14)\n\n\nRemoving the \"break;\" statement from MainClass.java causes the expected\noutput to be produced."
    },
    "commit": {
      "diff": [
        "tests/bugs150/PR79554.java",
        "tests/bugs150/PR78021.java",
        "tests/src/org/aspectj/systemtest/AllTests.java",
        "tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java",
        "tests/src/org/aspectj/systemtest/ajc150/TestUtils.java",
        "tests/src/org/aspectj/systemtest/ajc150/AllTestsJava5_binaryWeaving.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java"
      ]
    }
  },
  "aab9c2c": {
    "bug_report": {
      "summary": "Bug 77799  NullPointerException in StructureSearchManager",
      "description": "Calling Ajde.getDefault().getStructureSearchManager().findMatches(...)\nfor an AspectJ project that has not been built results in a NullPointerException\nin StructureSearchManager.findMatchesHelper(...) (line 58)\n\nSimple patch is attached."
    },
    "commit": {
      "diff": [
        "ajde/src/org/aspectj/ajde/ui/StructureSearchManager.java"
      ]
    }
  },
  "d5ea336": {
    "bug_report": {
      "summary": "Bug 40380  AspectJ does not honour libraries defined via Project Properties",
      "description": "AJDT 1.1.3, Eclipse 2.1\n\nTo build a JDK 1.4. program under Eclipse using JDK 1.3 the appropriate build \nlibrary should be selected in the Project Properties \"Java Build Path\". \nHowever AspectJ continues to use the JDK associated with Eclipse so errors \nresult from using 1.4 APIs. The same will occur running Eclipse under 1.4 and \ncompiling programs for 1.5\n\nTestcase:\n1. Run Eclipse under JDK 1.3\n2. Create a Java project which uses a 1.4 JDK\n3. Write a Java classes that uses 1.4 APIs e.g.\n\npublic class TestStringBuffer {\n\n\tpublic  static void main(String[] args) {\n\t\tnew StringBuffer(\"Test\").indexOf(\"T\");\n  \t}\n}\n4. Convert to AspectJ project"
    },
    "commit": {
      "diff": [
        "ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"
      ]
    }
  },
  "669cd7c": {
    "bug_report": {
      "summary": "Bug 45489  Structure model is wrong when re-opened",
      "description": "Some elements have the wrong kinds when a saved structure model is loaded.  \nE.g. if I close then re-open the eclipse workbench classes are shown as \ninterface in the outline view.  Also if I traverse the tree with the code \nbelow I get the wrong kinds assigned to classed, interfaces, aspects and \nimport declarations.\n\nList list = StructureModelUtil.getPackagesInModel();\nfor(Iterator i = list.iterator(); i.hasNext();){\n    Object[] o = (Object[])i.next();\n    IProgramElement node = (IProgramElement)o[0];\nList files = StructureModelUtil.getFilesInPackage(node);\n\t\t\tfor(Iterator i2 = files.iterator(); i2.hasNext();){\n\t\t\t\tIProgramElement file = (IProgramElement)i2.next\n();\n\t\t\t\tSystem.out.println(\"file \" + file.getKind\n().toString() + \", \" + file.getName());\n\t\t\t\tboolean added2 = false;\n\t\t\t\t\n\t\t\t\tList file_children = file.getChildren();\n\t\t\t\t\t// file children can be classes, \naspects or other things\n\t\t\t\tfor(Iterator i3 = file_children.iterator(); \ni3.hasNext();){\n\t\t\t\t\tIProgramElement file_child = \n(IProgramElement)i3.next();\n\t\t\t\t\tSystem.out.println(\"kind: \" + \nfile_child.getKind().toString() +\", \" + file_child.getName());"
    },
    "commit": {
      "diff": [
        "ajde/testsrc/org/aspectj/ajde/AjdeTests.java",
        "asm/src/org/aspectj/asm/IProgramElement.java",
        "ajde/testsrc/org/aspectj/ajde/SavedModelConsistencyTest.java"
      ]
    }
  },
  "945a257": {
    "bug_report": {
      "summary": "Bug 149560  [@AspectJ] Incorrect weaving of static initialization join point",
      "description": "This error occurs if static initialization of one aspect class is woven with an advice from another aspect. It worked fine in version 1.5.0 - see the decompiled code snippet:\n\n    static \n    {\n        Object obj = new Factory(\"ItoMonitoringAspect.java\", Class.forName(\"cz.kb.usermanagement.ito.ItoMonitoringAspect\"));\n        ajc$tjp_0 = ((Factory) (obj)).makeSJP(\"staticinitialization\", ((Factory) (obj)).makeInitializerSig(\"8\", \"cz.kb.usermanagement.ito.ItoMonitoringAspect\"), 0);\n        obj = Factory.makeJP(ajc$tjp_0, null, null);\n        \n        \n        // the static initialization of this aspect class is deliberately woven using\n        // advice from another aspect defined elsewhere.\n        \n        try\n        {\n            UserManagementLogAspect.aspectOf().beforeClassInit(((org.aspectj.lang.JoinPoint) (obj)));\n        }\n        catch(Throwable throwable)\n        {\n            if(throwable instanceof ExceptionInInitializerError)\n            {\n                throw (ExceptionInInitializerError)throwable;\n            } else\n            {\n                UserManagementLogAspect.aspectOf().afterClassInit();\n                throw throwable;\n            }\n        }\n        UserManagementLogAspect.aspectOf().afterClassInit();\n        \n        // this line below was there when compiling using AspectJ 1.5.0 \n        // but is missing in when using AJC 1.5.2. (Note: the line is, however, present if the static\n        // initialization of this aspect class is NOT woven by advice from the other aspect).\n        ajc$postClinit();\n\n   }\n\n\nAs a result of the missing call to ajc$postClinit() the aspect instance is not created and it's method .aspectOf() throws org.aspectj.lang.NoAspectBoundException."
    },
    "commit": {
      "diff": [
        "tests/bugs153/pr149560/CodeStyle.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/PerSingleton.java",
        "tests/bugs153/pr149560/AnnStyle.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"
      ]
    }
  },
  "f9578da": {
    "bug_report": {
      "summary": "Bug 274559  Compile exception when not using debug info",
      "description": "The following project throws a compiler exception when the project property \"Add variable attributes to generated class files\" is turned off."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java"
      ]
    }
  },
  "cd9fd11": {
    "bug_report": {
      "summary": "Bug 158573  changing value of variable in aspect results in adviceDidNotMatch warning",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "tests/multiIncremental/PR158573/base/C.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "weaver/src/org/aspectj/weaver/CrosscuttingMembers.java"
      ]
    }
  },
  "f85631f": {
    "bug_report": {
      "summary": "Bug 374964  Performance - improve pointcut expensiveness calculation",
      "description": "Build Identifier: 1.6.12\n\nI'm able to reduce the AspectJ LTW startup overhead on the app I'm working on, from 95 seconds down to 47 seconds, just by switching the \"expensiveness\" of THIS_OR_TARGET and CALL in PointcutEvaluationExpenseComparator.  It seems to make sense to me that THIS_OR_TARGET is more expensive since it requires type matching (under profiler ExactTypePattern.matchesInstanceof() is what shows up as very expensive), whereas CALL can evaluate very quickly in most cases since it just fails to match on method name.  I'm not sure if this is specific to my particular usage, but cutting 50% of the LTW startup is a very nice improvement.  If you think this change doesn't make sense for everyone, I can work on a patch that makes this configurable somehow.  Thanks.\n\nReproducible: Always"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java"
      ]
    }
  },
  "b166a7e": {
    "bug_report": {
      "summary": "Bug 130722  poincut references in percflow instantiation model aspects can not be resolved",
      "description": "Take these two aspects and this litte class:\n\n// source1\npackage test1;\n\nimport test.Test;\npublic aspect PointcutProvider {\n\n\tpublic pointcut test(): execution(* Test.*(..));\n}\n\n\n// source2\npackage test;\n\nimport test1.PointcutProvider;\n\npublic aspect PointcutConsumer percflow(flow()) {\n\n        // compiler issues the following line with\n        // can not find pointcut test on test.PointcutConsumer\n\tpointcut mytest(): PointcutProvider.test();\n        // this also does not work with the same error message\n        pointcut mytest(): test1.PointcutProvider.test();\n\t\n\tpointcut flow(): mytest();\n}\n// source3\npackage test;\n\n\npublic class Test {\n\n\tpublic void foo() {\n\t\t\n\t}\n}\n\n\nChanging the consumer aspect to singleton instantiation model works."
    },
    "commit": {
      "diff": [
        "weaver/testsrc/org/aspectj/weaver/bcel/WeaveOrderTestCase.java",
        "weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java",
        "weaver/src/org/aspectj/weaver/ResolvedType.java",
        "weaver/testsrc/org/aspectj/weaver/bcel/NonstaticWeaveTestCase.java",
        "weaver/testsrc/org/aspectj/weaver/bcel/PointcutResidueTestCase.java",
        "tests/bugs152/pr130722/test/Test.java",
        "weaver/src/org/aspectj/weaver/CrosscuttingMembers.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java",
        "tests/src/org/aspectj/systemtest/ajc150/GenericITDsDesign.java"
      ]
    }
  },
  "7e40a60": {
    "bug_report": {
      "summary": "Bug 125295  fix for bug 58520 caused AJDT test failures",
      "description": null
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/ProgramElement.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java",
        "tests/bugs151/pr125295/pkg/C.java",
        "asm/src/org/aspectj/asm/IProgramElement.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"
      ]
    }
  },
  "d5e900d": {
    "bug_report": {
      "summary": "Bug 269902  NPE in AsmRelationshipProvider.addRelationship",
      "description": "When doing a clean build of my project, seeing dozens, upwards of 100 of NPEs similar to the following:\n\njava.lang.NullPointerException\nat org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship(AsmRelationshipProvider.java:168)\nat org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:124)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:441)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:103)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1732)\nat org.aspectj.weaver.b ...  \n\nFWIW, this is seen for Spring-managed auto-injection of beans with the @Configurable annotation.\n\nOfficial AJDT version is: 1.6.4.20090304172355\nVersion: 3.4.2\nBuild id: M20090211-17"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"
      ]
    }
  },
  "f24286d": {
    "bug_report": {
      "summary": "Bug 48072  Complete relationship information in the structure model",
      "description": "Complete the set of relationships surfaced by the structure model (e.g. \nincluding support for declare parents etc.) - Mik you had a document listing the \nthings yet to be done here?"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "weaver/src/org/aspectj/weaver/ICrossReferenceHandler.java",
        "weaver/src/org/aspectj/weaver/Shadow.java",
        "weaver/src/org/aspectj/weaver/Checker.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "426d89b": {
    "bug_report": {
      "summary": "Bug 43709  structure view crash when extending library aspects",
      "description": "I have an library with an aspect that includes advice, which I compile into an \noutjar. In my client project I extend it, and make a concrete pointcut that \nresults in the library aspect affecting parts of my system. \n\nThere is a bug and an enhancement request here:\n\n1) A bug: when you look at the structure view for affected classes, there is a \nproblem if you try to navigate from calls to advice (in AJDT, it results in an \nNPE). Here is the stack trace in AJDT:\njava.lang.NullPointerException\nat org.aspectj.asm.internal.ProgramElement.toLinkLabelString\n(ProgramElement.java:403)\nat org.eclipse.ajdt.internal.core.AJDTStructureViewNode.getLabel\n(AJDTStructureViewNode.java:171)\nat org.eclipse.ajdt.internal.core.AJDTStructureViewNodeAdapter.getLabel\n(AJDTStructureViewNodeAdapter.java:89)\nat org.eclipse.ui.model.WorkbenchLabelProvider.getText\n(WorkbenchLabelProvider.java:142)\nat org.eclipse.jface.viewers.TreeViewer.doUpdateItem(TreeViewer.java:95)\nat org.eclipse.jface.viewers.AbstractTreeViewer$UpdateItemSafeRunnable.run\n(AbstractTreeViewer.java:87)\nat org.eclipse.core.internal.runtime.InternalPlatform.run\n(InternalPlatform.java:1006)\nat org.eclipse.core.runtime.Platform.run(Platform.java:413)\nat org.eclipse.jface.viewers.AbstractTreeViewer.doUpdateItem\n(AbstractTreeViewer.java:406)\nat org.eclipse.jface.viewers.StructuredViewer$UpdateItemSafeRunnable.run\n(StructuredViewer.java:119)\nat org.eclipse.core.internal.runtime.InternalPlatform.run\n(InternalPlatform.java:1006)\nat org.eclipse.core.runtime.Platform.run(Platform.java:413)\nat org.eclipse.jface.viewers.StructuredViewer.updateItem\n(StructuredViewer.java:1271)\nat org.eclipse.jface.viewers.AbstractTreeViewer.createTreeItem\n(AbstractTreeViewer.java:320)\nat org.eclipse.jface.viewers.AbstractTreeViewer$1.run\n(AbstractTreeViewer.java:303)\nat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)\nat org.eclipse.jface.viewers.AbstractTreeViewer.createChildren\n(AbstractTreeViewer.java:289)\nat org.eclipse.jface.viewers.AbstractTreeViewer.handleTreeExpand\n(AbstractTreeViewer.java:697)\nat org.eclipse.jface.viewers.AbstractTreeViewer$4.treeExpanded\n(AbstractTreeViewer.java:709)\nat org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:175)\nat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81)\nat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840)\nat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:865)\nat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:849)\nat org.eclipse.swt.widgets.Tree.wmNotifyChild(Tree.java:1909)\nat org.eclipse.swt.widgets.Control.WM_NOTIFY(Control.java:3815)\nat org.eclipse.swt.widgets.Composite.WM_NOTIFY(Composite.java:642)\nat org.eclipse.swt.widgets.Control.windowProc(Control.java:2816)\nat org.eclipse.swt.widgets.Display.windowProc(Display.java:2361)\nat org.eclipse.swt.internal.win32.OS.CallWindowProcW(Native Method)\nat org.eclipse.swt.internal.win32.OS.CallWindowProc(OS.java:1236)\nat org.eclipse.swt.widgets.Tree.callWindowProc(Tree.java:156)\nat org.eclipse.swt.widgets.Tree.WM_LBUTTONDOWN(Tree.java:1517)\nat org.eclipse.swt.widgets.Control.windowProc(Control.java:2799)\nat org.eclipse.swt.widgets.Display.windowProc(Display.java:2361)\nat org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)\nat org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1303)\nat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1543)\nat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402)\nat org.eclipse.ui.internal.Workbench.run(Workbench.java:1385)\nat org.eclipse.core.internal.boot.InternalBootLoader.run\n(InternalBootLoader.java:858)\nat org.eclipse.core.boot.BootLoader.run(BootLoader.java:461)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\nat java.lang.reflect.Method.invoke(Unknown Source)\nat org.eclipse.core.launcher.Main.basicRun(Main.java:291)\nat org.eclipse.core.launcher.Main.run(Main.java:747)\nat org.eclipse.core.launcher.Main.main(Main.java:583)\n \n\n2) The enhancement request: the concrete aspect that applies the advice should \nalso show what is affected in the project. Of course, it would also be nice to \nsee how a given concrete library aspect in the aspect path affects your \nproject too."
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/ProgramElement.java"
      ]
    }
  },
  "b512738": {
    "bug_report": {
      "summary": "Bug 42993  Language regression, or possible language improvement?",
      "description": "The file AspectBug.java:\n\npublic aspect AspectBug extends AbstractCaching\nperthis(execution(ContainerLoader+.new(..)))\n{\n\tdeclare parents: ContainerDescriptor implements AbstractCaching.Key;\n\n\tprotected pointcut loadExecutions( Key key ):\n\t\tContainerLoader.containerLoads( *, key );\n}\n\nabstract aspect AbstractCaching  {\n\tinterface Key {}\n\tprotected abstract pointcut loadExecutions(Key key);\n}\n\nclass Key {\n}\n\nclass ContainerDescriptor {\n}\n\nclass ActiveContainer {\n}\n\nclass ContainerLoader {\n\tpublic ActiveContainer createContainer(ContainerDescriptor c) {\n\t\treturn null;\n\t}\n\n    public pointcut containerLoads(ContainerLoader loader,\n\t\t\t\t\t\t\t\t   \nContainerDescriptor containerDesc ):\n        this(loader) && args(containerDesc)\n        && execution(ActiveContainer ContainerLoader.createContainer\n(ContainerDescriptor));\n}\n\n        First, here are the versions of AspectJ I'm using (this is a bash\n        shell under cygwin on Windows XP):\n\n~> CLASSPATH='C:\\aspectj1.0\\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.0/bin/ajc -\nversion\najc version 1.0.6 (built Jul 24, 2002 6:21 PM PST) running on java 1.4.1_02\n~> CLASSPATH='C:\\aspectj1.1\\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.1/bin/ajc -\nversion\nAspectJ Compiler 1.1.0\n~> CLASSPATH='C:\\aspectj1.1.1rc1\n\\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.1.1rc1/bin/ajc -version\nAspectJ Compiler 1.1.1rc1\n~> CLASSPATH='C:\\aspectj1.1.1\n\\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.1.1/bin/ajc -version\nAspectJ Compiler 1.1.1\n\n        For all four of these compilers, I give them the AspectBug.java file\n\t(which is attached):\n\n~> CLASSPATH='C:\\aspectj1.0\\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.0/bin/ajc \nAspectBug.java\n~> CLASSPATH='C:\\aspectj1.1\\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.1/bin/ajc \nAspectBug.java\n~> CLASSPATH='C:\\aspectj1.1.1rc1\n\\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.1.1rc1/bin/ajc AspectBug.java\n~> CLASSPATH='C:\\aspectj1.1.1\n\\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.1.1/bin/ajc AspectBug.java\nC:\\Documents and Settings\\Macneil Shonle\\AspectBug.java:7 incompatible type, \nexpected ContainerDescriptor found BindingTypePattern(AbstractCaching$Key, 0)\n\n1 error\n\n        As you can see, only the final run (with the Sept 11 build of\n\tajc) do we see the \"incompatible type\" error. If this is not a\n\tregression but a desirable result, how should the code be ported?"
    },
    "commit": {
      "diff": [
        "tests/bugs/ParentsAndPointcuts.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java",
        "weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java"
      ]
    }
  },
  "ba9d43c": {
    "bug_report": {
      "summary": "Bug 382723  An package-level abstract generic privileged aspect, which extends an abstract generic aspect, gives a IlligalStateException on a method call in around advice",
      "description": "Build Identifier: AJDT Version: 2.1.3.e37x-20110628-1900 / AspectJ version: 1.6.12.20110613132200 / eclipse.buildId=M20120208-0800\n\naround advice targetting a generic constructor call in a package visability  generic privileged abstract apsect, which extends a abstract generic aspect gives a compiler error when in this around advice a method call is made to a method defined in the aspect, superaspect or abstract defined methods. This only affects around advice and only when the aspect is package-visible and privileged.\n\nWorkaround: either make the aspect public or remove privileged.\n\nCompiler output:\nCompile error: IllegalStateException thrown: Use generic type, not parameterized type\nStackTrace:\n\njava.lang.IllegalStateException: Use generic type, not parameterized type\n\tat org.aspectj.weaver.ResolvedTypeMunger.<init>(ResolvedTypeMunger.java:72)\n\tat org.aspectj.weaver.PrivilegedAccessMunger.<init>(PrivilegedAccessMunger.java:31)\n\tat org.aspectj.weaver.CrosscuttingMembers.addPrivilegedAccesses(CrosscuttingMembers.java:232)\n\tat org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:756)\n\tat org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:89)\n\tat org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:69)\n\tat org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:512)\n\tat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.ensureWeaverInitialized(AjPipeliningCompilerAdapter.java:529)\n\tat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:509)\n\tat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:447)\n\tat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:432)\n\tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:652)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:1021)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:305)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:185)\n\tat org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild(AjdeCoreBuildManager.java:127)\n\tat org.aspectj.ajde.core.AjCompiler.build(AjCompiler.java:91)\n\tat org.eclipse.ajdt.core.builder.AJBuilder.build(AJBuilder.java:257)\n\tat org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:728)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:199)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:239)\n\tat org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:292)\n\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:295)\n\tat org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:351)\n\tat org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:374)\n\tat org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)\n\tat org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\nSession data:\neclipse.buildId=M20120208-0800\njava.version=1.6.0_22\njava.vendor=Sun Microsystems Inc.\nBootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=nl_NL\nCommand-line arguments:  -data C:\\workspace\\ -os win32 -ws win32 -arch x86_64\n\n\nReproducible: Always\n\nSteps to Reproduce:\n1. In a empty AspectJ project create the file Foo.java:\nimport java.util.LinkedList;\npublic class Foo {\n\tpublic LinkedList bar()\n\t{\n\t\tnew LinkedList();\n\t\treturn null;\n\t}\n}\n2. Create the file FooAspect.aj containing:\nimport java.util.AbstractList;\nimport java.util.List;\nabstract aspect FooAspectParent<T extends List>\n{\n\tprotected int getNumber(int k)\n\t{\n\t\treturn -1*k;\n\t}\n}\n\n\n\nabstract privileged aspect FooAspect<T extends AbstractList> extends FooAspectParent<T> {\n    pointcut pc():  call(T.new());\n\tT around():pc()\n\t{\n\t\t//getNumber(1); //<-- method call to superAspect fails   \n\t\t//method();  // <-- method call to abstract local defined method fails\n\t\t//localMethod(); //<-- method call to local private method fails\n\t\tMath.random(); //<-- works\n\t\thashCode(); //<-- works\n\t\treturn null;\n\t}\t\n\tprivate void localMethod(){}\n\t\n\tprotected abstract T method();\n}\n3. Uncomment one or more of the three commentted functions calls in the around advice and the compiler will reproduce the error.\n(note: this example with List which is a generic object is just for illustration of hierachy, this problem occured on production code when doing the same with non-generic, but hierachal objects. This way was the easiest to issolate and reproduce the bug the fastest.)"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java",
        "tests/bugs170/pr382723/FooAspect3.java",
        "tests/bugs170/pr382723/FooAspect.java",
        "tests/bugs170/pr382723/Foo.java",
        "tests/bugs170/pr382723/FooAspect2.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"
      ]
    }
  },
  "ea4ff8a": {
    "bug_report": {
      "summary": "Bug 158624  Compiler Error: generics and arrays",
      "description": "OK, not sure what to report here or what info you need, but here's the set up, message, and erroreous class.  I don't understand the errors from the compiler enough to parse down the erroneous file to something that contains only the bug, but I could if direction were given.\n\nHere's my set up:\nEclipse SDK\nVersion: 3.2.0\nBuild id: M20060629-1905\n\nWith AJDT:\nEclipse AspectJ Development Tools\nVersion: 1.4.1.200608141223\nAspectJ version: 1.5.3.200608210848\n\nHere's the bug dump from the compiler inside Eclipse:\njava.lang.UnsupportedOperationException\nat org.aspectj.weaver.UnresolvedType.parameterize(UnresolvedType.java:221)\nat org.aspectj.weaver.ResolvedMemberImpl.parameterize(ResolvedMemberImpl.java:680)\nat org.aspectj.weaver.ResolvedMemberImpl.parameterize(ResolvedMemberImpl.java:690)\nat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:643)\nat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:597)\nat org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:508)\nat org.aspectj.weaver.ResolvedType$4.get(ResolvedType.java:226)\nat org.aspectj.weaver.Iterators$3$1.hasNext(Iterators.java:118)\nat org.aspectj.weaver.Iterators$5.hasNext(Iterators.java:171)\nat org.aspectj.weaver.Iterators$3.hasNext(Iterators.java:128)\nat org.aspectj.weaver.ResolvedType.lookupMember(ResolvedType.java:346)\nat org.aspectj.weaver.ResolvedType.lookupMethod(ResolvedType.java:327)\nat org.aspectj.weaver.World.resolve(World.java:523)\nat org.aspectj.weaver.MemberImpl.resolve(MemberImpl.java:93)\nat org.aspectj.weaver.JoinPointSignatureIterator.addSignaturesUpToFirstDefiningMember(JoinPointSignatureIterator.java:109)\nat org.aspectj.weaver.JoinPointSignatureIterator.<init>(JoinPointSignatureIterator.java:51)\nat org.aspectj.weaver.MemberImpl.getJoinPointSignatures(MemberImpl.java:943)\nat org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:286)\nat org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:106)\nat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)\nat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:51)\nat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)\nat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:75)\nat org.aspectj.weaver.Advice.match(Advice.java:112)\nat org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:117)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2806)\nat org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:2768)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2506)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2332)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:494)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:119)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1606)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1557)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1335)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1155)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:455)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:392)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:380)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:892)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:246)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:165)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic class com.wec.lib.util.test.SyncValueTest extends junit.framework.TestCase:\n  private com.wec.lib.util.test.SyncValueTest$SyncInteger a\n  private com.wec.lib.util.test.SyncValueTest$SyncInteger b\n  private com.wec.lib.util.test.SyncValueTest$SyncInteger c\n  private com.wec.lib.util.test.SyncValueTest$SyncInteger d\n  private com.wec.lib.util.test.SyncValueTest$SyncInteger e\n  public void <init>():\n                    ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 17)\n                    INVOKESPECIAL junit.framework.TestCase.<init> ()V\n    constructor-execution(void com.wec.lib.util.test.SyncValueTest.<init>())\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 27)\n    |               NEW com.wec.lib.util.test.SyncValueTest$SyncInteger\n    |               DUP\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               ICONST_1\n    |               INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.<init> (Lcom/wec/lib/util/test/SyncValueTest;I)V\n    |               PUTFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 28)\n    |               NEW com.wec.lib.util.test.SyncValueTest$SyncInteger\n    |               DUP\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               ICONST_2\n    |               INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.<init> (Lcom/wec/lib/util/test/SyncValueTest;I)V\n    |               PUTFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 29)\n    |               NEW com.wec.lib.util.test.SyncValueTest$SyncInteger\n    |               DUP\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               ICONST_3\n    |               INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.<init> (Lcom/wec/lib/util/test/SyncValueTest;I)V\n    |               PUTFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 30)\n    |               NEW com.wec.lib.util.test.SyncValueTest$SyncInteger\n    |               DUP\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               ICONST_4\n    |               INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.<init> (Lcom/wec/lib/util/test/SyncValueTest;I)V\n    |               PUTFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 31)\n    |               NEW com.wec.lib.util.test.SyncValueTest$SyncInteger\n    |               DUP\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               ICONST_5\n    |               INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.<init> (Lcom/wec/lib/util/test/SyncValueTest;I)V\n    |               PUTFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               RETURN   (line 17)\n    constructor-execution(void com.wec.lib.util.test.SyncValueTest.<init>())\n  end public void <init>()\n\n  public void testSyncValueGroup()    org.aspectj.weaver.MethodDeclarationLineNumber: 39:1035\n:\n    method-execution(void com.wec.lib.util.test.SyncValueTest.testSyncValueGroup())\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 42)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_1\n    |               ANEWARRAY com.wec.lib.util.SyncValueGroup\n    |               DUP\n    |               ICONST_0\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               AASTORE\n    | method-call(void com.wec.lib.util.test.SyncValueTest$SyncInteger.link(com.wec.lib.util.SyncValueGroup[]))\n    | |             INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V\n    | method-call(void com.wec.lib.util.test.SyncValueTest$SyncInteger.link(com.wec.lib.util.SyncValueGroup[]))\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 43)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               IF_ACMPNE L0\n    |               ICONST_1\n    |               GOTO L1\n    |           L0: ICONST_0\n    |           L1: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_1   (line 44)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L2\n    |               ICONST_1\n    |               GOTO L3\n    |           L2: ICONST_0\n    |           L3: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 45)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_2\n    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V\n    |               ICONST_2   (line 46)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L4\n    |               ICONST_1\n    |               GOTO L5\n    |           L4: ICONST_0\n    |           L5: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 47)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_1\n    |               ANEWARRAY com.wec.lib.util.SyncValueGroup\n    |               DUP\n    |               ICONST_0\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               AASTORE\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V\n    |               ICONST_2   (line 48)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L6\n    |               ICONST_1\n    |               GOTO L7\n    |           L6: ICONST_0\n    |           L7: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 49)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_3\n    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V\n    |               ICONST_3   (line 50)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L8\n    |               ICONST_1\n    |               GOTO L9\n    |           L8: ICONST_0\n    |           L9: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_3   (line 51)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L10\n    |               ICONST_1\n    |               GOTO L11\n    |          L10: ICONST_0\n    |          L11: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 52)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_4\n    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V\n    |               ICONST_4   (line 53)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L12\n    |               ICONST_1\n    |               GOTO L13\n    |          L12: ICONST_0\n    |          L13: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_4   (line 54)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L14\n    |               ICONST_1\n    |               GOTO L15\n    |          L14: ICONST_0\n    |          L15: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 55)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_1\n    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V\n    |               ICONST_1   (line 56)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L16\n    |               ICONST_1\n    |               GOTO L17\n    |          L16: ICONST_0\n    |          L17: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_1   (line 57)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L18\n    |               ICONST_1\n    |               GOTO L19\n    |          L18: ICONST_0\n    |          L19: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 59)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_1\n    |               ANEWARRAY com.wec.lib.util.SyncValueGroup\n    |               DUP\n    |               ICONST_0\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               AASTORE\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 60)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               IF_ACMPNE L20\n    |               ICONST_1\n    |               GOTO L21\n    |          L20: ICONST_0\n    |          L21: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 63)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_1\n    |               ANEWARRAY com.wec.lib.util.SyncValueGroup\n    |               DUP\n    |               ICONST_0\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               AASTORE\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V\n    |               ICONST_1   (line 64)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L22\n    |               ICONST_1\n    |               GOTO L23\n    |          L22: ICONST_0\n    |          L23: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_1   (line 65)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L24\n    |               ICONST_1\n    |               GOTO L25\n    |          L24: ICONST_0\n    |          L25: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 66)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               BIPUSH 8\n    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V\n    |               BIPUSH 8   (line 67)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L26\n    |               ICONST_1\n    |               GOTO L27\n    |          L26: ICONST_0\n    |          L27: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               BIPUSH 8   (line 68)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L28\n    |               ICONST_1\n    |               GOTO L29\n    |          L28: ICONST_0\n    |          L29: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               BIPUSH 8   (line 69)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L30\n    |               ICONST_1\n    |               GOTO L31\n    |          L30: ICONST_0\n    |          L31: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               BIPUSH 8   (line 70)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L32\n    |               ICONST_1\n    |               GOTO L33\n    |          L32: ICONST_0\n    |          L33: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               BIPUSH 8   (line 71)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L34\n    |               ICONST_1\n    |               GOTO L35\n    |          L34: ICONST_0\n    |          L35: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 74)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.unlink ()V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 75)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_3\n    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 76)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_2\n    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V\n    |               ICONST_2   (line 77)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L36\n    |               ICONST_1\n    |               GOTO L37\n    |          L36: ICONST_0\n    |          L37: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_2   (line 78)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L38\n    |               ICONST_1\n    |               GOTO L39\n    |          L38: ICONST_0\n    |          L39: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_3   (line 79)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L40\n    |               ICONST_1\n    |               GOTO L41\n    |          L40: ICONST_0\n    |          L41: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_2   (line 80)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L42\n    |               ICONST_1\n    |               GOTO L43\n    |          L42: ICONST_0\n    |          L43: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_2   (line 81)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L44\n    |               ICONST_1\n    |               GOTO L45\n    |          L44: ICONST_0\n    |          L45: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 82)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.unlink ()V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 83)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_1\n    |               ANEWARRAY com.wec.lib.util.SyncValueGroup\n    |               DUP\n    |               ICONST_0\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               AASTORE\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this   (line 84)\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               ICONST_1\n    |               INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V\n    |               ICONST_1   (line 85)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L46\n    |               ICONST_1\n    |               GOTO L47\n    |          L46: ICONST_0\n    |          L47: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_1   (line 86)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L48\n    |               ICONST_1\n    |               GOTO L49\n    |          L48: ICONST_0\n    |          L49: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_3   (line 87)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L50\n    |               ICONST_1\n    |               GOTO L51\n    |          L50: ICONST_0\n    |          L51: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_3   (line 88)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L52\n    |               ICONST_1\n    |               GOTO L53\n    |          L52: ICONST_0\n    |          L53: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               ICONST_1   (line 89)\n    |               ALOAD_0     // Lcom/wec/lib/util/test/SyncValueTest; this\n    |               GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger;\n    |               INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object;\n    |               CHECKCAST java.lang.Integer\n    |               INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    |               IF_ICMPNE L54\n    |               ICONST_1\n    |               GOTO L55\n    |          L54: ICONST_0\n    |          L55: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V\n    |               RETURN   (line 90)\n    method-execution(void com.wec.lib.util.test.SyncValueTest.testSyncValueGroup())\n  end public void testSyncValueGroup()\n\nend public class com.wec.lib.util.test.SyncValueTest\n\nwhen weaving classes \nwhen weaving \nwhen batch building BuildConfig[D:\\workspace\\.metadata\\.plugins\\org.eclipse.ajdt.core\\ANSER2.generated.lst] #Files=365\n\nHere's the class:\npackage com.wec.lib.util.test;\n\nimport static com.wec.ide.Constants.UNCHECKED;\nimport junit.framework.TestCase;\n\nimport org.junit.Test;\n\nimport com.wec.lib.util.SyncValueGroup;\nimport com.wec.scrum.Tests;\n\n/**\n * This class tests the SyncValueGroup utility class.\n */\n@Tests(classes = {\n        SyncValueGroup.class })\n@SuppressWarnings(\"nls\")\npublic class SyncValueTest extends TestCase {\n\n    class SyncInteger extends SyncValueGroup<Integer> {\n        public SyncInteger(int val) {\n            super(new Integer(val));\n        }\n        public void valueChanged() {\n        }\n    }\n    \n    private SyncInteger a = new SyncInteger(1);\n    private SyncInteger b = new SyncInteger(2);\n    private SyncInteger c = new SyncInteger(3);\n    private SyncInteger d = new SyncInteger(4);\n    private SyncInteger e = new SyncInteger(5);    \n    \n    /**\n     * Ensures that SyncValueGroup replicates values and\n     * calls valueChange.\n     */\n    @SuppressWarnings(UNCHECKED)\n    @Test\n    public void testSyncValueGroup() {\n        \n        //  Link tests\n        a.link(b);\n        assertTrue(a.getValue() == b.getValue());\n        assertTrue(1 == b.getValue());\n        b.setValue(2);\n        assertTrue(2 == a.getValue());\n        b.link(c);\n        assertTrue(2 == c.getValue());\n        c.setValue(3);\n        assertTrue(3 == a.getValue());\n        assertTrue(3 == b.getValue());\n        a.setValue(4);\n        assertTrue(4 == c.getValue());\n        assertTrue(4 == b.getValue());\n        b.setValue(1);\n        assertTrue(1 == c.getValue());\n        assertTrue(1 == a.getValue());\n        \n        d.link(e);\n        assertTrue(d.getValue() == e.getValue());\n        \n        //  Join loops\n        b.link(d);\n        assertTrue(1 == d.getValue());\n        assertTrue(1 == e.getValue());\n        d.setValue(8);\n        assertTrue(8 == a.getValue());\n        assertTrue(8 == b.getValue());\n        assertTrue(8 == c.getValue());\n        assertTrue(8 == d.getValue());\n        assertTrue(8 == e.getValue());\n        \n        //  Unlink tests\n        c.unlink();\n        c.setValue(3);\n        b.setValue(2);\n        assertTrue(2 == a.getValue());\n        assertTrue(2 == b.getValue());\n        assertTrue(3 == c.getValue());\n        assertTrue(2 == d.getValue());\n        assertTrue(2 == e.getValue());\n        d.unlink();\n        c.link(d);\n        a.setValue(1);\n        assertTrue(1 == a.getValue());\n        assertTrue(1 == b.getValue());\n        assertTrue(3 == c.getValue());\n        assertTrue(3 == d.getValue());\n        assertTrue(1 == e.getValue());\n    }\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java",
        "tests/bugs153/pr158624/ValueChange.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "b953c03": {
    "bug_report": {
      "summary": "Bug 95992  Problems resolving type name inside generic class",
      "description": "ajc reports an error when compiling the following code:\n\ninterface Base<T> {\n    static interface Inner {\n    }\n}\nclass Test<T extends Test.InnerTest> implements Base<T> {\n    static class InnerTest implements Inner {\n    }\n}\n\n$ ajc -1.5 Test.java\nTest.java:14 [error] Inner cannot be resolved to a type\nstatic class InnerTest implements Inner {\n\n\nSun's javac compiles it without any error.\nThe error can be avoided by simply writing \"Base.Inner\" instead of just \"Inner\".\nAlso, it compiles fine if the constraint \"extends Test.InnerTest\" is left away."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "cc6862f": {
    "bug_report": {
      "summary": "Bug 112615  -XhasMember is not processed correctly when passed from AJDT",
      "description": "To test this in AJDT install the bean example, add a new interface called I \nand then add the following line to BoundPoint.aj:\n\ndeclare parents: hasmethod(* set*(..)) implements I;\n\nNow open the AspectJ Compiler preference page and select \"Has Member\" on the \nadvanced tab.  Click OK, rebuild and if the option was working the project \nwould build correctly.  As it stands there is an error:\n\nthe type pattern hasmethod(* set*(..)) can only be used when the -XhasMember \noption is set"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java"
      ]
    }
  },
  "dd88d21": {
    "bug_report": {
      "summary": "Bug 423257  LTW - java.lang.VerifyError: Bad return type with generics and local variables",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java",
        "tests/bugs175/pr423257/AspectX.java",
        "tests/src/org/aspectj/systemtest/ajc175/AllTestsAspectJ175.java",
        "tests/src/org/aspectj/systemtest/ajc175/Ajc175Tests.java",
        "tests/bugs175/pr423257/Test.java",
        "weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java",
        "tests/src/org/aspectj/systemtest/AllTests17.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"
      ]
    }
  },
  "908b405": {
    "bug_report": {
      "summary": "Bug 152835  ArrayIndexOutOfBoundsException in EclipseAdapterUtils.makeLocationContext",
      "description": "Got the following exception during startup of Eclipse\n\njava.lang.ArrayIndexOutOfBoundsException\nat org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeLocationContext(EclipseAdapterUtils.java:65)\nat org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeSourceLocation(EclipseAdapterUtils.java:121)\nat org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeMessage(EclipseAdapterUtils.java:130)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult(AjBuildManager.java:959)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.acceptResult(AjPipeliningCompilerAdapter.java:402)\nat org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:375)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:891)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:246)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:165)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nArrayIndexOutOfBoundsException thrown: -2"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java"
      ]
    }
  },
  "579ec14": {
    "bug_report": {
      "summary": "Bug 175039  ArrayIndexOutOfBoundException Bug with Nested Type in TypeParameters",
      "description": "I debugged this stack trace from load-time weaving (ajcore files are also available). I found that the signature argument to TypeFactory.createTypeFromSignature(String) is Pjava/lang/Enum<Ljavax/jws/soap/SOAPBinding$ParameterStyle;>; but the method is erroneously using an empty array of parameters, because it thinks the $ relates to the generic type, not the parameter. It should be fairly easy to reproduce with a test case and to fix with a patch - I'll look at it some more tonight or this week.\n\njava.lang.ArrayIndexOutOfBoundsException\n\tat org.aspectj.weaver.ResolvedType.getMemberParameterizationMap(ResolvedType.java:698)\n\tat org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:406)\n\tat org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:65)\n\tat org.aspectj.weaver.patterns.TypePattern.matchesSubtypes(TypePattern.java:182)\n\tat org.aspectj.weaver.patterns.TypePattern.matchesSubtypes(TypePattern.java:169)\n\tat org.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:119)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.accept(ClassLoaderWeavingAdaptor.java:621)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:253)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:78)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:122)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)\n\tat java.lang.ClassLoader.defineClass(Ljava.lang.String;[BIILjava.security.ProtectionDomain;)Ljava.lang.Class;(Unknown Source)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(Ljava.lang.String;Z)Ljava.lang.Class;(Unknown Source)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n\tat java.lang.ClassLoader.loadClass(Ljava.lang.String;)Ljava.lang.Class;(Unknown Source)\n\tat java.lang.ClassLoader.loadClassFromNative(Ljava.lang.String;)Ljava.lang.Class;(Unknown Source)\n\tat java.lang.Class.forName(Ljava.lang.String;ZLjava.lang.ClassLoader;)Ljava.lang.Class;(Unknown Source)\n\tat jrockit.reflect.MemberAccess.getClassFromFieldDesc(Ljava.lang.String;ILjava.lang.ClassLoader;)Ljava.lang.Class;(Unknown Source)\n\tat jrockit.reflect.MemberAccess.getReturnClassFromMethodDesc(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.Class;(Unknown Source)"
    },
    "commit": {
      "diff": [
        "weaver/testsrc/org/aspectj/weaver/TypeXTestCase.java",
        "weaver/src/org/aspectj/weaver/TypeFactory.java"
      ]
    }
  },
  "21cf37d": {
    "bug_report": {
      "summary": "Bug 90143  [itds] Problem with an ITD on an interface",
      "description": "If an ITD method is declared on an interface with an anonymous inner class \nreturned as the result, the compiler generates an error for any \"super.xxx\" \ncalls in the anonymous inner class.  The example project shows this with a \nnested inner interface, but the same problem occurs with an ITD of this kind \non any interface.  The error does not occur if the ITD is declared on an inner \nclass (as shown in the example) or a normal class."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java"
      ]
    }
  },
  "2da9b31": {
    "bug_report": {
      "summary": "Bug 99191  declare @field allowed for non existent fields",
      "description": "///// in this code\n@interface anInterface{}\naspect B {\t\n  declare @field : int B.noSuchField : @anInterface; // should be an error\n}\n//////////////////\n\nI don't get an error, even though B.noSuchField doesn't exist.\n\nIf I try declare @field on NoSuchCLass.noSuchField I do get an error though."
    },
    "commit": {
      "diff": [
        "tests/bugs150/pr99191/pr99191_5.java",
        "tests/bugs150/pr99191/pr99191_3.java",
        "tests/bugs150/pr99191/pr99191_2.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "tests/bugs150/pr99191/pr99191_1.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/pr99191/pr99191_6.java",
        "tests/bugs150/pr99191/pr99191_4.java"
      ]
    }
  },
  "96ebaae": {
    "bug_report": {
      "summary": "Bug 398588  Using aspect 'requires' clause causes all aspects with 'requires' clauses not be loaded regardless",
      "description": "The usage of the 'requires' clause causes all aspects that have have 'requires' clauses not to be loaded regardless of whether the specified required class exists or not. Here is the scenario and why it happens:\n\n   Let's assume we have a bunch of aspects (A1, A2, A3, etc.) - all with 'requires' clauses and all referencing classes that can be satisfied. ClassLoaderWeavingAdaptor#registerAspects goes over the aspects in a Definition one by one. It reaches aspect A1 and detects that it has a 'requires' clause, and so it invokes BcelWorld#addAspectRequires. This causes the aspect A1 and its required class to be registered in an internal 'aspectRequiredTypes' map.\n\n   Then the code calls BcelWeaver#addLibraryAspect with A1 as the argument, which in turn calls addOrReplaceAspect which invokes 'hasUnsatisfiedDependency'. The 'hasUnsatisfiedDependency' has been written to run only ONCE - i.e., it checks if it has already run, and if so then it does nothing. Otherwise, it removes from the 'aspectRequiredTypes' map all the types that can be resolved, thus leaving only those that cannot be resolved. In other words, it assumes that after having run (once !!!) any remaining type must be unsatified. Thus, when it is invoked with A1, being the 1st time, it resolves the required type by A1 and leaves the 'aspectRequiredTypes' map empty - but also marks that no further running is required.\n\n   When the ClassLoaderWeavingAdaptor#registerAspects loop reaches A2, it call BcelWorld#addAspectRequires since A2 also declares a 'requires' clause. This causes A2 and its referenced class to be mapped in the 'aspectRequiredTypes' map. However, when BcelWeaver#addLibraryAspect is called with A2 and the code reaches 'hasUnsatisfiedDependency' - the code assumes that it has already run (which it has - with A1), so it does not check if indeed A2's referenced class can be satisfied (which we assume it can). In other words, all subsequent aspects (A2, A3, etc.) are declared as having unsatisified dependencies - which they don't.\n\n   The (quick) bugfix seems rather simple: every time BcelWorld#addAspectRequires method is called, it should mark 'aspectRequiredTypesProcessed' as FALSE, in order to force a re-evaluation in case 'hasUnsatisfiedDependency' is called."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "tests/bugs172/pr398588/AspectD.java",
        "tests/bugs172/pr398588/Code.java",
        "tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java",
        "tests/bugs172/pr398588/Anno.java",
        "tests/bugs172/pr398588/AspectA.java",
        "tests/bugs172/pr398588/Code2.java",
        "tests/bugs172/pr398588/AspectC.java",
        "tests/bugs172/pr398588/Anno2.java",
        "tests/bugs172/pr398588/Blah.java",
        "tests/bugs172/pr398588/AspectB.java"
      ]
    }
  },
  "6a8fa08": {
    "bug_report": {
      "summary": "Bug 33948  inter-type no-arg constructor declaration conflict with compiler-generated constructor",
      "description": "Get error\n\n  \"inter-type declaration from A conflicts with existing member\"\n\nwhen declaring a no-arg constructor in an aspect on another type which has no \nconstructors.  Likely the compiler is generating a default constructor which \ncollides in the weaver.  See test case:\n\n  tests/bugs/ConstructorDeclaration.java\n\nCan the weaver reliably check that a default constructor was generated by the \ncompiler (ours or javac or ...)?  Otherwise, this could be a known limitation."
    },
    "commit": {
      "diff": [
        "tests/bugs/ConstructorDeclaration.java"
      ]
    }
  },
  "27d204c": {
    "bug_report": {
      "summary": "Bug 72528  around advice throws java.lang.VerifyError at runtime",
      "description": "I have an aspect that captures around() a pcd and returns an Object[], though\nthe actual methods being instrumented might return any valid POJO array, i\nunderstand that AspectJ will take care of casting at assignment.\n\nI expected the following code to work properly, but at runtime i get a\njava.lang.VerifyError as shown below:\n\nF:\\wd\\Hello>ajbrowser HelloWorld.lst\njava.lang.VerifyError: (class: de/rohith/PrinterWorld, method: returnArrayWithCl\noning signature: ()[Ljava/lang/Integer;) Incompatible argument to function\n        at de.rohith.HelloWorld.main(HelloWorld.java:18)\nException in thread \"main\"\n\nI suspect the compiler fails to notice the return types of the methods being\ncaught at compile time.\n\nI have tested this code with both ajbrowser as well as AJDT, both result in the\nsame error output.\n\n-----------HelloWorldAspect.java---------------\npackage de.rohith;\n\nimport java.lang.Object;\n\npublic aspect HelloWorldAspect {\n    \n\tprivate int callDepth = -1;\n\n    public HelloWorldAspect() {\n    }\n    \n    pointcut hello(): !within(HelloWorldAspect);\n    \n    pointcut method(): execution(public (*[]) de..*(..));\n    \n    pointcut cloning(): call(* java.lang.Object.clone());\n\n    declare warning: method() && hello(): \"*[] returning method called\" ;\n    \n    Object[] around(): cflow(method()) && cloning() && hello() {\n    \tprint(\"\", thisEnclosingJoinPointStaticPart);\n    \tObject[] ret = proceed(); \n    \treturn (Object[])ret.clone();\n    }\n\n    private void print(String prefix, Object message) {\n        for (int i = 0, spaces = callDepth * 2; i < spaces; i++) {\n            System.out.print(\" \");\n        }\n        System.out.println(prefix + message);\n    }\n\n}\n\n\n-----------PrinterWorld.java------------\npackage de.rohith;\npublic class PrinterWorld {\n\tprivate Integer[] intArray = new Integer[2];\n\tpublic PrinterWorld() {\n\t\t\n\t}\n    public void print() {\n        System.out.println(\"Hello World!\"); \n    }\n    \n    public Integer returnInt() {\n    \treturn new Integer(3);\n    }\n    \n    public Integer[] returnArrayWithCloning() {\n    \tfor (int i = 0; i < intArray.length; i++) {\n\t\t\tintArray[i] = new Integer(i++);\n\t\t}\n    \treturn (Integer[])intArray.clone();\n    }\n    \n    public Integer[] returnArrayWithoutCloning() {\n    \treturn intArray;\n    }\n}\n\n-----------HelloWorld.java------------\npackage de.rohith;\n\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n        PrinterWorld p = new PrinterWorld();\n        p.print(); \n        Integer i = p.returnInt();\n        Integer[] intArray = p.returnArrayWithCloning();\n        Integer[] array2 = p.returnArrayWithoutCloning();\n    }\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java",
        "tests/bugs/ArrayCloning.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "a4a1234": {
    "bug_report": {
      "summary": "Bug 49814  ConfigParser.java:132",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java",
        "util/src/org/aspectj/util/ConfigParser.java"
      ]
    }
  },
  "dbe1024": {
    "bug_report": {
      "summary": "Bug 49657  Weaver results in rt error if affected base class not exposed",
      "description": "I was weaving a 3rd party library and wrote an aspect that should affect both a \nbase class and a derived class, but inadvertently wove only the derived class.  \nThis resulted in the following error. I would like the weaver to catch this \nkind of error at weave (link) time, rather than creating code that results in a \nrt error... I get this error in 1.1.1 final and in a fairly recent version from \nCVS HEAD:\n\njava.lang.AbstractMethodError\n\tat ajee.logging.LogManager.ajc$interMethodDispatch1\n$ajee_logging_LogManager$ajee_logging_Loggable$getLogger(LogManager.java)\n\tat \najee.tracing.ExecutionTracer.ajc$before$ajee_tracing_ExecutionTracer$926\n(ExecutionTracer.java:62)\n\tat library.Derived.<init>(Derived.java:46)\n\nThis line is a call to super();\n\nI've attached a small example that reproduces another error that I think is \nrelated:\nC:\\devel\\test\\ctors\\twoPass>build\n\nC:\\devel\\test\\ctors\\twoPass>call ajc -outjar fullBase.jar sample\\Base.java sampl\ne\\Derived.java\nException in thread \"main\" java.lang.ExceptionInInitializerError\n        at sample.Derived.<init>(Derived.java:6)\n        at sample.Derived.main(Derived.java:13)\nCaused by: org.aspectj.lang.NoAspectBoundException\n        at sample.Trace.aspectOf(Trace.aj)\n        at sample.Trace.<init>(Trace.aj:5)\n        at sample.Trace.ajc$postClinit(Trace.aj)\n        at sample.Trace.<clinit>(Trace.aj:5)\n        ... 2 more"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/testdata/partialHierarchy/sample/Derived.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/PartiallyExposedHierarchyTestCase.java",
        "org.aspectj.ajdt.core/testdata/partialHierarchy/sample/Base.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java",
        "weaver/src/org/aspectj/weaver/WeaverMessages.java",
        "org.aspectj.ajdt.core/testdata/partialHierarchy/sample/Iface.java"
      ]
    }
  },
  "199299c": {
    "bug_report": {
      "summary": "Bug 327134  Cant suppress raw types warning in a pointcut",
      "description": "Build Identifier: I20100608-0911\n\nGeneric type used in a pointcut and bound to target() or this() must omit actual type name and thus causes 'raw type must be parametrized' compiler warning. @SuppressAJWarning or @SuppressWarning annotations does not turn it off\n\nReproducible: Always\n\nSteps to Reproduce:\nCode snippets:\n\npointcut IVOListUpdate(IVOList list):\n\t\t&& target(list) && call(void updateList(*));\n\npublic interface IVOList<T extends IValueObject> extends List<T>, Externalizable, Serializable {\n\n\t\n\tvoid updateList(List<T> newList);\n\t\n}\n\npublic interface IValueObject extends Comparable<IValueObject>, Serializable {\n}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java",
        "tests/bugs1612/pr327134/Code.java"
      ]
    }
  },
  "9ffc63b": {
    "bug_report": {
      "summary": "Bug 135068  VerifyError with LTW and @AJ style aspects",
      "description": "I get \"VerifyError: Incompatible object argument for function call\" error when using LTW with @Aspect stype aspects. Interestingly enough, LTW works as expected with equivalent .aj style aspect. Compile time weaving works with both aspect styles. Tested on Linux with AspectJ 1.5.0, 1.5.1 and DEVELOPMENT-20060404163823 and SUN 1.5.0_06 and IBM 1.5.0SR1 JVMs. I will attach example project shortly."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java",
        "tests/bugs152/pr135068/A.java",
        "tests/bugs152/pr135068/C2.java",
        "tests/bugs152/pr135068/t/C2.java",
        "tests/bugs152/pr135068/Ajava2.java",
        "tests/bugs152/pr135068/Ajava.java",
        "tests/bugs152/pr135068/C.java",
        "tests/bugs152/pr135068/t/C.java",
        "tests/bugs152/pr135068/t/Ajava.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java",
        "tests/bugs152/pr135068/t/Ajava2.java"
      ]
    }
  },
  "0a77939": {
    "bug_report": {
      "summary": "Bug 75568  ajc changes classfile timestamps even if compilation fails (regression)",
      "description": "It appears that ajc 1.2 updates a classfile timestamps even if the compilation \nfails. This breaks the integration with the Ant build system. E.g. using the \nant \"javac\" task with the Ajc11CompilerAdapter interface, the compilation may \nfail on the first attempt and succeed on the second attempt, - because ajc has \ntouched the timestamp and Ant hence decides that nothing needs to be recompiled.\n\nThis did not happen in ajc 1.1.\n\nTo reproduce:\n1. In the examples/observer folder, run a build:\n ajc -sourceroots . \n2. Edit the \"Demo.java\" class and insert the line \"DONT COMPILE\"\n3. Run the compilation again. The compiler displays the correct error message \nbut the Demo.class file has been updated with the compile-time timestamp."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java",
        "org.aspectj.ajdt.core/testdata/src1/C2.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/ProceedOnErrorTestCase.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java",
        "org.aspectj.ajdt.core/testdata/src1/C1.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "e874581": {
    "bug_report": {
      "summary": "Bug 122370  [@AspectJ] @DeclareParents/declare parents not equivalent",
      "description": "Adding a setter to the Moody example makes it clear that the annotation style (@DeclareParents) results in different behavior than the classic (declare parents) style.\n\nCalling the setter in a \"declare parents\"-advised object behaves as one would expect.  However, calling the setter with a \"@DeclareParents\"-advised object has no effect -- that is, you can call the setter (and see that it's been called) and immediately call the getter, only to find that the value didn't change.  The following examples (all in \"package moody;\") illustrate:\n\npublic enum Mood { HAPPY, JOLLY }\n\nClassic style:\n-------------\npublic aspect ClassicMoodIndicator {\n   public interface Moody {\n      Mood getMood();\n      void setMood(Mood mood);\n   }\n\n   private Mood Moody.mood = Mood.HAPPY;\n\n   public Mood Moody.getMood() { return mood; }\n   public void Moody.setMood(Mood mood) { this.mood = mood; }\n\n   declare parents : moody.ClassicMoodImplementor implements Moody;\n}\n\npublic class ClassicMoodImplementor { }\n\nAnnotation style:\n----------------\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.DeclareParents;\n\n@Aspect\npublic class AnnotationMoodIndicator {\n   public interface Moody {\n      Mood getMood();\n      void setMood(Mood mood);\n   }\n\n   public static class MoodyImpl implements Moody {\n      private Mood mood = Mood.HAPPY;\n\n      public Mood getMood() { return mood; }\n      public void setMood(Mood mood) { this.mood = mood; }\n   }\n\n   @DeclareParents(value=\"moody.AnnotationMoodImplementor\",defaultImpl=MoodyImpl.class)\n   private Moody implementedInterface;\n}\n\npublic class AnnotationMoodImplementor { }\n\nJUnit TestCase:\n--------------\nimport junit.framework.TestCase;\n\npublic class MoodTester extends TestCase {\n   public MoodTester(String name) { super(name); }\n\n   public void testClassic() {\n      ClassicMoodImplementor cmi0 = new ClassicMoodImplementor();\n      ClassicMoodImplementor cmi1 = new ClassicMoodImplementor();\n      \n      assertEquals(\"cmi0 should be HAPPY\", Mood.HAPPY, cmi0.getMood());\n      \n      cmi1.setMood(Mood.JOLLY);\n      assertEquals(\"cmi1 should be JOLLY\", Mood.JOLLY, cmi1.getMood());\n      assertEquals(\"cmi0 should be *still* be HAPPY\", Mood.HAPPY, cmi0.getMood());\n   }\n   \n   public void testAnnotation() {\n      AnnotationMoodImplementor ami0 = new AnnotationMoodImplementor();\n      AnnotationMoodImplementor ami1 = new AnnotationMoodImplementor();\n      \n      assertEquals(\"ami0 should be HAPPY\", Mood.HAPPY, ((AnnotationMoodIndicator.Moody) ami0).getMood());\n      \n      ((AnnotationMoodIndicator.Moody) ami1).setMood(Mood.JOLLY);\n      assertEquals(\"ami1 should be JOLLY\", Mood.JOLLY, ((AnnotationMoodIndicator.Moody) ami1).getMood());\n      assertEquals(\"ami0 should be *still* be HAPPY\", Mood.HAPPY, ((AnnotationMoodIndicator.Moody) ami0).getMood());\n   }\n}\n\nResult:\n------\nThe test run is as follows:\n..F\nTime: 0.021\nThere was 1 failure:\n1) testAnnotation(moody.MoodTester)junit.framework.AssertionFailedError: ami1 should be JOLLY expected:<JOLLY> but was:<HAPPY>\n       at moody.MoodTester.testAnnotation(MoodTester.java:27)\n       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n       at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n       at moody.MoodTester.main(MoodTester.java:7)\n\nFAILURES!!!\nTests run: 2,  Failures: 1,  Errors: 0\n\nFor classic, you can see that cmi1.setMood was successful and cmi0/cmi1 are decoupled (that is, calling setMood on cmi1 has no impact on cmi0).  The annotation style, however, fails because ami1.setMood appears to have done nothing.  The result should have been that ami1 is JOLLY and ami0 HAPPY (I include the second assert because both ami0 & ami1 ended up JOLLY in RC1).\n\nThe current behavior makes @DeclareParents unusable for retaining field state (near as I can tell, it retains state throughout the method invocation, but not beyond it, like it is creating and discarding a backing object with each method invocation)."
    },
    "commit": {
      "diff": [
        "tests/bugs151/pr122370/moody/MainClass.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "tests/bugs151/pr122370/moody/AnnotationMoodIndicator.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "tests/bugs151/pr122370/moody/AnnotationMoodImplementor.java",
        "tests/bugs151/pr122370/moody/Mood.java"
      ]
    }
  },
  "3417cbe": {
    "bug_report": {
      "summary": "Bug 279120  NPE determining annotation target kind during weaving",
      "description": "reported on the list:\n\nHi,\n\n \n\nI am using aspectj LTW (aspectjweaver-1.6.1) for weaving an aspect available in another jar within my web application code.\n\n \n\nWhile building the jar which contains the aspect, using maven, I have JUnits which run without any problems using LTW.\n\n \n\nMy aspect code looks as below\n\n      @Around(\"execution (@com.arisglobal.aglite.annotations.OperationTrail public * *(..)) && this(executor)\")\n\n      public Object auditOperation(ProceedingJoinPoint thisJoinPoint,\n\n                  Object executor) {\n\n            ...\n\n... aspect code\n\n...\n\n            }\n\n \n\nHowever when I deploy the application in tomcat (with javaagent:aspectjweaver-1.6.1.jar option), I get a NPE which I have pasted below.\n\n \n\nJun 4, 2009 12:06:18 PM org.aspectj.weaver.tools.Jdk14Trace error\n\nSEVERE: com/arisglobal/aglite/services/actiontrail/ActionTrailAspect\n\njava.lang.NullPointerException\n\n        at org.aspectj.weaver.bcel.BcelObjectType.getAnnotationTargetKinds(BcelO\n\nbjectType.java:612)\n\n        at org.aspectj.weaver.ReferenceType.getAnnotationTargetKinds(ReferenceTy\n\npe.java:265)\n\n        at org.aspectj.weaver.patterns.SignaturePattern.checkForIncorrectTargetK\n\nind(SignaturePattern.java:112)\n\n        at org.aspectj.weaver.patterns.SignaturePattern.checkForIncorrectTargetK\n\nind(SignaturePattern.java:94)\n\n        at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings(Signatur\n\nePattern.java:87)\n\n        at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings(KindedPoin\n\ntcut.java:262)\n\n        at org.aspectj.weaver.patterns.AndPointcut.resolveBindings(AndPointcut.j\n\nava:75)\n\n        at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:196)\n\n        at org.aspectj.weaver.bcel.AtAjAttributes.handleAroundAnnotation(AtAjAtt\n\nributes.java:1308)\n\n        at org.aspectj.weaver.bcel.AtAjAttributes.readAj5MethodAttributes(AtAjAt\n\ntributes.java:403)\n\n        at org.aspectj.weaver.bcel.BcelMethod.unpackAjAttributes(BcelMethod.java\n\n:189)\n\n        at org.aspectj.weaver.bcel.BcelMethod.<init>(BcelMethod.java:96)\n\n        at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredMethods(BcelObjectT\n\nype.java:264)\n\n        at org.aspectj.weaver.bcel.LazyClassGen.<init>(LazyClassGen.java:303)\n\n        at org.aspectj.weaver.bcel.BcelObjectType.getLazyClassGen(BcelObjectType\n\n.java:524)\n\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1728)\n\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1\n\n696)\n\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:145\n\n8)\n\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1244)\n\n        at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.\n\njava:423)\n\n        at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.jav\n\na:286)\n\n        at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:95)\n\n        at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(C\n\nlassPreProcessorAgentAdapter.java:52)\n\n        at sun.instrument.TransformerManager.transform(TransformerManager.java:1\n\n22)\n\n        at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java\n\n:155)\n\n        at java.lang.ClassLoader.defineClass1(Native Method)\n\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\n \n\nI also tried using aspectjweaver-1.6.4 version however got the same error."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"
      ]
    }
  },
  "155a888": {
    "bug_report": {
      "summary": "Bug 256400  An internal error occurred during: \"Delete and update AspectJ markers for CoreSource\".",
      "description": "this occured during a clean and build of the project i'm working on. The following was inthe details.\n\nAn internal error occurred during: \"Delete and update AspectJ markers for CoreSource\".\njava.lang.NullPointerException"
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java"
      ]
    }
  },
  "7d5002a": {
    "bug_report": {
      "summary": "Bug 100227  [generics][itds] inner class with generic enclosing class",
      "description": "ajc crashes with a NullPointerException when an intertype declaration tries to\nmodify an inner class, if the enclosing (outer) class is generic:\n\nclass Outer {\n  class Inner {}\n}\n\nclass Generic_Outer<T> {\n  class Inner {}\n}\n\naspect Injector {\n  int Outer.outer; // works\n  int Outer.Inner.inner; // works\n  int Generic_Outer.outer; // works\n  int Generic_Outer.Inner.inner; // crashes\n}\n\n\n/home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error\njava.lang.NullPointerException\n        at\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:202)\n        at\norg.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration.build(InterTypeFieldDeclaration.java:173)\n        at\norg.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclaration.java:1020)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupEnvironment.java:306)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:122)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:302)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:316)\n..."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "weaver/src/org/aspectj/weaver/TypeX.java"
      ]
    }
  },
  "945402f": {
    "bug_report": {
      "summary": "Bug 339300  problem weaving anonymous inner (member owned) classes in scala library",
      "description": "Reported by Ramnivas.\n\nDue to the use of numerous $ chars in scala classnames, some of the AspectJ handling of inner classes breaks down.  It should be possible to correctly use the available class attributes rather than mess around with attributes.  A while back one use did contribute a change to enable scala weaving which tried to use the InnerClasses attribute before falling back on string chopping.  However we have now hit another case.\n\nIn the scenario we are dealing with the class scala.Predef$$anon$3 in the scala library (a 2.9.0-SNAPSHOT version).  What we normally do here is in that type we discover the InnerClass attribute and refer to the outerclass index it holds.  Unfortunately, due to it being an anonymous inner inside a method, the index is 0.  So we fail to process the attribute and with string chopping come up with a stupid guessed name for the outer.\n\nThe solution is to use the EnclosingMethod attribute in these situations.  The EnclosingMethod attribute is an optional attribute. A class must have an EnclosingMethod attribute if and only if it is a local class or an anonymous class. A class may have no more than one EnclosingMethod attribute.\n\nThe EnclosingMethod attribute includes a pointer to the containing outerclass (that had the method in which encloses this inner type)."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"
      ]
    }
  },
  "94d8b82": {
    "bug_report": {
      "summary": "Bug 134541  adviceDidNotMatch's line number doesn't keep up with line number of advice",
      "description": "When advice doesn't match in a 1.5.0 enabled project, there is an adviceDidNotMatch warning against the line number of the advice. If you insert a line before this advice and save then the warning stays associated with the original line and not the new one. Full building puts the warning against the new line. \n\nThis is a regression and didn't happen in AJ 1.5.0."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/CrosscuttingMembers.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java"
      ]
    }
  },
  "03b20bc": {
    "bug_report": {
      "summary": "Bug 109173  Weaving Adaptor enhancements for performance, configuration and diagnosis",
      "description": "Here are some suggested enhancements as a result of exhaustive testing in the \nEclipse/OSGi environment.\n\n1.\tIf no aspects are declared for a particular class loader, either \nbecause there are no visible aop.xml files or they contain no aspect \ndefinitions, then we should short-circuit the implementation of weaveClass() \nso that byte-code is not unnecessarily passed to the weaver. This is \nespecially important under OSGi where there may be hundreds of class bundles, \neach with their own class loader only some of which are being woven. We can \nuse the existing enabled flag.\n2.\tAs previously discussed on aspectj-dev the META-INF directory is \nconsidered private in OSGi and is therefore an inappropriate location for \naop.xml files declaring shared aspects. I therefore propose a System property \nto set the a resource names for finding aop.xml files which would default \nto META-INF/aop.xml e.g. -Dorg.aspectj.weaver.loadtime.configuration=META-\nINF/aop.xml;org/aspectj/aop.xml.\n3.\tWe should not be catching Throwable  in Aj. Instead we should catch \nknown exceptions e.g. BCException and issue messages while letting other \nruntime exceptions pass back to the class loader. A user provided \nIMessageHandler implementation can decide under what circumstances to abort. \nAlternatively if Aj is considered to be a safe interface for weaving agents \ne.g. JVMTI then the dump logic it contains should be moved to the \nWeavingAdaptor so that it can be used directly from a class loader."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "loadtime/src/org/aspectj/weaver/loadtime/Aj.java",
        "loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java",
        "loadtime/src/org/aspectj/weaver/loadtime/IWeavingContext.java"
      ]
    }
  },
  "02f75ba": {
    "bug_report": {
      "summary": "Bug 92630  Null Pointer Exception thrown by ajc compiler",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java"
      ]
    }
  },
  "6249672": {
    "bug_report": {
      "summary": "Bug 324804  NullPointerException at AspectJElementHierarchy.java:677",
      "description": "Build Identifier: 20100617-1415\n\nAfter removing a \"throws\" clause from the constructor of a class and then saving I got the following error:\n\njava.lang.NullPointerException\nat org.aspectj.asm.internal.AspectJElementHierarchy.getCanonicalFilePath(AspectJElementHierarchy.java:677)\nat org.aspectj.asm.internal.AspectJElementHierarchy.updateHandleMap(AspectJElementHierarchy.java:641)\nat org.aspectj.asm.AsmManager.removeStructureModelForFiles(AsmManager.java:572)\nat org.aspectj.asm.AsmManager.processDelta(AsmManager.java:604)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager ... oBuildJob.run(AutoBuildJob.java:242)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n\nCompile error: NullPointerException thrown: null\n\nReproducible: Didn't try"
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"
      ]
    }
  },
  "6dbb5f3": {
    "bug_report": {
      "summary": "Bug 269522  [handles] Cross reference view and markers mix up joinpoints assigned to advice",
      "description": "Build ID: M20090211-1700\n\nSteps To Reproduce:\nI have two pieces of after advice in my aspect.  \n\nIn the cross reference view I see all of the joinpoints for both after advice selecting one of the after advice statements.  When I select the other after advice statement I see no joinpoints.\n\nWhen I select the marker for either piece of after advice, I see all the joinpoints for both pieces of advice.\n\n1. open and perform a clean compile on the attached project\n2. open the xref view\n3. select line 22 an note that you see 5 joinpoints (should only be 3)\n4. select line 68 and note that you see zero joinpoints (should be 2 here)\n5. right click the marker at line 68 and choose \"advises\" - note you see all 5 joinpoints\n6. right click the marker at line 22 and choose \"advises\" - note you see all 5 joinpoints\n\n\nMore information:"
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java"
      ]
    }
  },
  "24a785f": {
    "bug_report": {
      "summary": "Bug 122458  java.lang.StringIndexOutOfBoundsException when compiling (build no.: 20051220093604)",
      "description": "This exception occurs using the ajdt eclipse plugin when compiling a project the first time I add the ajdt nature. There are no aspects defined in the project.\nI suppose the exception occurs when compiling a class (sorry I can't post the entire source code) with this signature: \n\npublic class FixedWidthParser<T> extends TabularDataParser<T>\n\nThe only noticeable things about this class are the presence of an inherited type parameter (and redefined with same name) some custom annotations on methods and a varags on a method parameter, but all of this things are present on other classes in the same project that AspectJ apprently compiles well (I'm not sure about the fact it compiles them).\n\nHope I helped you with this clues, here's the complete stacktrace.\n\njava.lang.StringIndexOutOfBoundsException\nat java.lang.String.substring(Unknown Source)\nat org.aspectj.weaver.TypeFactory.createTypeFromSignature(TypeFactory.java:86)\nat org.aspectj.weaver.TypeFactory.createTypeFromSignature(TypeFactory.java:116)\nat org.aspectj.weaver.UnresolvedType.forSignature(UnresolvedType.java:430)\nat org.aspectj.weaver.UnresolvedType.makeArray(UnresolvedType.java:286)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:214)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:516)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:494)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:451)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.genBytecodeInfo(AsmHierarchyBuilder.java:525)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:400)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:142)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:82)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:926)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:195)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:89)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:528)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nStringIndexOutOfBoundsException thrown: String index out of range: -2"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/TypeFactory.java"
      ]
    }
  },
  "2781720": {
    "bug_report": {
      "summary": "Bug 28919  waever tries to weave into native methods ...",
      "description": "If you don't find the exception below in a bug, please add a new bug\nTo make the bug a priority, please include a test program\nthat can reproduce this exception.\nbad non-abstract method with no code: private native int \nnativeMessagePumpInitialize() on public class \nplc.comm.pvi.PviCom$LinkEventHandlerImpl\nbad non-abstract method with no code: private native int \nnativeMessagePumpInitialize() on public class \nplc.comm.pvi.PviCom$LinkEventHandlerImpl\njava.lang.RuntimeException: bad non-abstract method with no code: private \nnative int nativeMessagePumpInitialize() on public class \nplc.comm.pvi.PviCom$LinkEventHandlerImpl\n        at org.aspectj.weaver.bcel.LazyMethodGen.<init>(Unknown Source)\n        at org.aspectj.weaver.bcel.LazyClassGen.<init>(Unknown Source)\n        at org.aspectj.weaver.bcel.BcelObjectType.getLazyClassGen(Unknown \nSource)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(Unknown Source)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(Unknown Source)\n        at \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles\n(Unknown Source)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(Unknown Source)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(Unknown Source)\n        at org.aspectj.tools.ajc.Main.run(Unknown Source)\n        at org.aspectj.tools.ajc.Main.runMain(Unknown Source)\n        at org.aspectj.tools.ajc.Main.main(Unknown Source)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"
      ]
    }
  },
  "3e5af0f": {
    "bug_report": {
      "summary": "Bug 395221  weird error about unbound formals when mixing generics with annotation style",
      "description": "From the mailing list:\n\nI have following problem with following Aspect:\n\n@Aspect\npublic class CounterAspect extends AbstractMoskitoAspect {\n\n\t@Around(value = \"execution(* *(..)) && (@annotation(method))\")\n    public Object countMethod(ProceedingJoinPoint pjp, Count method) throws Throwable {\n    \treturn count(pjp, method.producerId(), method.subsystem(), method.category());\n    }\n\n\t@Around(value = \"execution(* *(..)) && (@annotation(method))\")\n\tpublic Object countByParameter(ProceedingJoinPoint pjp, CountByParameter method) throws Throwable {\n\t\treturn countByParameter(pjp, method.producerId(), method.subsystem(), method.category());\n\t}\n\n\t@Around(value = \"execution(* *.*(..)) && (@within(clazz))\")\n    public Object countClass(ProceedingJoinPoint pjp, Count clazz) throws Throwable {\n    \treturn count(pjp, clazz.producerId(), clazz.subsystem(), clazz.category());\n    }\n\n\tprivate Object countByParameter(ProceedingJoinPoint pjp, String aProducerId, String aSubsystem, String aCategory) throws Throwable {\n....\n\nIt works. However, since I have two similar aspects that differ only in using some internal classes, I made my super class using generics:\npublic class AbstractMoskitoAspect<S extends IStats> {\n\n@Aspect\npublic class CounterAspect extends AbstractMoskitoAspect<CounterStats> {\n\nthis breaks the build instantly with the very unhelpful error message:\n[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.4:compile (default) on project moskito-aop: Compiler errors:\n[ERROR] error at @Around(value = \"execution(* *(..)) && (@annotation(method))\")\n[ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n[ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:24:0::0 the parameter pjp is not bound in [all branches of] pointcut\n[ERROR] error at @Around(value = \"execution(* *(..)) && (@annotation(method))\")\n[ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n[ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:29:0::0 the parameter pjp is not bound in [all branches of] pointcut\n[ERROR] error at @Around(value = \"execution(* *.*(..)) && (@within(clazz))\")\n[ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n[ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:34:0::0 the parameter pjp is not bound in [all branches of] pointcut\n\nwhat am i doing wrong here?"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/patterns/AndPointcut.java"
      ]
    }
  },
  "0fb5f69": {
    "bug_report": {
      "summary": "Bug 29934  runtime NullPointerException when applying around advice to other around advice",
      "description": "When the program below is run, it produces a NullPointerException...\njava.lang.NullPointerException\n\tat A2.ajc$around$A2$3b6proceed(CflowCycles.java)\n\tat A2.ajc$around$A2$3b6_aroundBody3(CflowCycles.java:35)\n\tat Target.run(CflowCycles.java:24)\n\tat CflowCycles.run_aroundBody4(CflowCycles.java:8)\n\tat CflowCycles.main_aroundBody6(CflowCycles.java:24)\n\tat CflowCycles.main(CflowCycles.java:24)\n\n---(in new/CflowCycles.java and in ajcTestsFailing.xml)\n\nimport org.aspectj.testing.Tester; \n\n/** @testcase cflow cycles in advice from different aspects */\npublic class CflowCycles {\n  public static void main( String args[] ) {\n        Tester.expectEvent(\"target A1\");\n        Tester.expectEvent(\"target A2\");\n        new Target().run();\n        Tester.checkAllEventsIgnoreDups();\n  }\n}\n\nclass Target {\n    public void run(){ }\n}\n\naspect A1 {\n    pointcut TargetRunFlow () \n        // ok if no cflow: within(Target) && execution(* *(..)) && !within\n(A1+);\n        : !within(A1+) && !preinitialization(new(..)) && !initialization(new\n(..))//cflow(within(Target) && execution(* *(..))) && !within(A1+)\n        ;\n    Object around () : TargetRunFlow() {\n        Tester.event(\"target A1\");\n        return proceed();\n    }\n    // ok if in the same class\n}\n\naspect A2 {\n    pointcut TargetRun () \n        : within(Target) && execution(* *(..)) && !within(A2+);\n        ;\n    Object around () : TargetRun() {\n        Tester.event(\"target A2\");\n        return proceed();\n    }\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"
      ]
    }
  },
  "f06df41": {
    "bug_report": {
      "summary": "Bug 113073  weaveinfo messages not reported if applying declare @method on an ITD'd method",
      "description": "Given the following class:\n\n@interface Annotation{}\naspect B {\n\t\n\tdeclare @method : public * C.anotherMethod(..) : @Annotation;\n}\n\nclass C {\n}\n\naspect D {\n\tpublic void C.anotherMethod(String s) {\n\t}\n\tpublic void C.anotherMethod() {\n\t}\n}\n\nI would expect a two weaveinfo messages of the form:\n\nweaveinfo 'public void C.anotherMethod()' (pr99191_4.java) is annotated with\n@Annotation method annotation from 'B' (pr99191_4.java:3)\nweaveinfo 'public void C.anotherMethod(String)' (pr99191_4.java) is annotated\nwith @Annotation method annotation from 'B' (pr99191_4.java:3)\n\nHowever, only the two \"intertyped\" messages are coming out."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "tests/bugs150/pr113073.java"
      ]
    }
  },
  "acdf688": {
    "bug_report": {
      "summary": "Bug 40257  parsing of \"../\" paths in LST files is broken",
      "description": "Relative paths (e.g. \"../\") are no longer parser properly in AJDE 1.1.0."
    },
    "commit": {
      "diff": [
        "ajbrowser/testsrc/org/aspectj/tools/ajbrowser/InteractiveBrowserTest.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/AjdtAjcTests.java",
        "org.aspectj.ajdt.core/testdata/bug-40257/d3/C.java",
        "ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java",
        "org.aspectj.ajdt.core/testdata/bug-40257/d1/A.java",
        "ajbrowser/testsrc/org/aspectj/tools/ajbrowser/BrowserManagerTest.java",
        "org.aspectj.ajdt.core/testdata/bug-40257/d1/d2/B.java"
      ]
    }
  },
  "70ae0f8": {
    "bug_report": {
      "summary": "Bug 153845  [generics] Problem with signature for generic type",
      "description": "public aspect OuterAspect {\n\n  private pointcut isSetter() : execution(void set*(..));\n\n  public static aspect InnerAspect pertarget(isSetter()) {\n\n  }\n\n}\n\n\njava.lang.IllegalStateException\nat org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseFieldTypeSignature(GenericSignatureParser.java:163)\nat org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseTypeArgument(GenericSignatureParser.java:253)\nat org.aspectj.apache.bcel.classfile.GenericSignatureParser.maybeParseTypeArguments(GenericSignatureParser.java:261)\nat org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseClassTypeSignature(GenericSignatureParser.java:208)\nat org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseAsClassSignature(GenericSignatureParser.java:56)\nat org.aspectj.apache.bcel.classfile.Signature.asClassSignature(Signature.java:315)\nat org.aspectj.apache.bcel.classfile.JavaClass.getGenericClassTypeSignature(JavaClass.java:973)\nat org.aspectj.weaver.bcel.BcelObjectType.initializeFromJavaclass(BcelObjectType.java:164)\nat org.aspectj.weaver.bcel.BcelObjectType.<init>(BcelObjectType.java:131)\nat org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate(BcelWorld.java:337)\nat org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType(BcelWorld.java:395)\nat org.aspectj.weaver.bcel.BcelWeaver.addIfAspect(BcelWeaver.java:263)\nat org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromDirectory(BcelWeaver.java:255)\nat org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile(BcelWeaver.java:205)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld(AjBuildManager.java:698)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:223)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:199)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nIllegalStateException thrown: Expecting [,L, or T, but found Pjava while unpacking Ljava/util/AbstractSet<Pjava/util/Map$Entry<TK;TV;>;>;"
    },
    "commit": {
      "diff": [
        "tests/bugs153/pr153845/Interface.java",
        "tests/bugs153/pr153845/Aspect2.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java",
        "tests/bugs153/pr153845/GenericType.java",
        "tests/bugs153/pr153845/Aspect.java",
        "weaver/src/org/aspectj/weaver/ReferenceType.java",
        "tests/bugs153/pr153845/Nothing.java"
      ]
    }
  },
  "8549d86": {
    "bug_report": {
      "summary": "Bug 150271  Allow multiple levels of LTW information",
      "description": "It would be nice if basic information about load-time weaving (what version of AspectJ is being used, what loaders are doing weaving and what configuration is being used) was available without all of the -verbose information listing of all classes woven or not woven.\n\nIt's also unfortunate that the flags for weaving level are 2 quite different ones:\n-Daj.weaving.verbose -Dorg.aspectj.weaver.showWeaveInfo\n\nWhy not something like -Dorg.aspectj.weaver.level=[none|summary|info|verbose]\n\nsummary: just what configuration is used\ninfo: list affected join points etc. (like showWeaveInfo)\nverbose: all (like verbose now)"
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "loadtime/src/org/aspectj/weaver/loadtime/DefaultMessageHandler.java",
        "tests/java5/ataspectj/ataspectj/TestHelper.java",
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java",
        "loadtime/src/org/aspectj/weaver/loadtime/Options.java"
      ]
    }
  },
  "936459c": {
    "bug_report": {
      "summary": "Bug 53999  \"can't bind type\" message has $ for . in type name for declare soft",
      "description": "cosmetic mistake in error message...\n\nexpected: can't bind type name 'unknown.Error'\n  actual: can't bind type name 'unknown$Error'\n\n(not sure why it would ever be munged with $)\n\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\ttest();\n\t}\n\tstatic void test() {\n\t\tthrow new Error(\"hello\");\n\t}\n\tstatic aspect A {\n\t\tdeclare soft : unknown.Error : call(void test()); // CE\n\t}\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs/Cosmetic.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java"
      ]
    }
  },
  "477c575": {
    "bug_report": {
      "summary": "Bug 106634  regression: argument causes BcelGenericSignatureToTypeXConverter.java:203",
      "description": "the following reported a compile error using\nAspectJ Compiler DEVELOPMENT built on Monday Jun 20, 2005 at 08:14:57 GMT\nbut now crashes using\nAspectJ Compiler DEVELOPMENT built on Wednesday Aug 10, 2005 at 13:12:53 GMT\n\n\nimport java.util.Vector; // works if java.util.* is used\n\npublic class Bug extends Vector { // works if Vector is not extended\n  void test(DoesNotExist argument) {} // works without the argument\n}\n\n\nalso, the bug only appears if the -1.5 flag is used."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "f14646f": {
    "bug_report": {
      "summary": "Bug 96371  Patch to support loading aop.xml properly",
      "description": "AspectJ 5 load-time weaving in CVS HEAD isn't loading aop.xml files properly \nfrom a jar file without specifying the global -D flag. The following patch \nfixes the problem for me so I can load aop.xml files from jars on the \nclasspath without a global flag:\n\nClassLoaderWeavingAdaptor.java:109:\n-             Enumeration xmls = loader.getResources(\"/META-INF/aop.xml\");\n+            Enumeration xmls = loader.getResources(\"META-INF/aop.xml\");\n\n\nI.e., getResources doesn't work with a leading separator, at least not on the \nSun VM or JRockIt on Windows. Writing a unit test for this would require \nsignificant changes to the loadtime module, so I wrote a standalone test of \nthe API:\n\npublic class TestApi extends TestCase {\n    public void testLoadResource() throws Exception {\n        URL urlList[] = { new URL\n(\"file:testsrc/org/aspectj/weaver/loadtime/test/sample.jar\") };\n        ClassLoader loader = new URLClassLoader(urlList);\t\n          \n        Enumeration xmls = loader.getResources(\"META-INF/aop.xml\");\n        //this version fails:\n        //Enumeration xmls = loader.getResources(\"/META-INF/aop.xml\");\n\n        assertTrue(xmls.hasMoreElements());\n    }\n}"
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java",
        "tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java"
      ]
    }
  },
  "0cb826c": {
    "bug_report": {
      "summary": "Bug 86832  Internal compiler error (generics?)",
      "description": "Attached is project that will generate an \"Internal compiler error\" for a single\nclass that extends \"ArrayList<Object>\". If the class extends just \"ArrayList\"\nthe compiler error does not occur. \n\nNote that the \"extends ArrayList<Object>\" class compiles successuflly without\nthe aspectj nature.\n\n\n--- exception ---\n\nSeverity\tDescription\tResource\tIn Folder\tLocation\tCreation Time\n2\tInternal compiler error\njava.lang.NullPointerException\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.detectHierarchyCycle(ClassScope.java:945)\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference.internalResolveType(ParameterizedSingleTypeReference.java:143)\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference.resolveType(ParameterizedSingleTypeReference.java:208)\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveSuperType(TypeReference.java:112)\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.findSupertype(ClassScope.java:1092)\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:747)\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:884)\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:249)\n\tat\norg.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:91)\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:331)\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:348)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:682)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:168)\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:102)\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\n\tat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:165)\n\tFlattenedListExtendsArrayListObject.java\nopentrader.infra/src/org/opentrader/infra/springframework\t\tFebruary 28, 2005\n9:59:42 AM"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "a502da8": {
    "bug_report": {
      "summary": "Bug 310704  Bug in ProgramElement.getCorrespondingType()",
      "description": "Here is the code for the method:\n\n\tpublic String getCorrespondingType(boolean getFullyQualifiedType) {\n\t\tString returnType = (String) kvpairs.get(\"returnType\");\n\t\tif (returnType == null)\n\t\t\treturnType = \"\";\n\t\tif (getFullyQualifiedType) {\n\t\t\treturn returnType;\n\t\t}\n\t\tint index = returnType.lastIndexOf(\".\");\n\t\tif (index != -1) {\n\t\t\treturn returnType.substring(index);\n\t\t}\n\t\treturn returnType;\n\t}\n\nthe line:\nreturn returnType.substring(index);\nshould be using 'index+1'"
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/ProgramElement.java"
      ]
    }
  },
  "044542c": {
    "bug_report": {
      "summary": "Bug 161217  NPE in BcelAdvice",
      "description": "I've been playing with some aspect deployment models and got into this error during project rebuild from AJDT:\n\njava.lang.NullPointerException\nat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:199)\nat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:699)\nat org.aspectj.weaver.Shadow.implement(Shadow.java:471)\nat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2832)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:506)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeave ... lasses \nwhen weaving \nwhen batch building BuildConfig[...] #Files=6\n\nHere is the aspect and classes it is applied to:\n\n-----\n@Aspect(\"percflow(execution(* InstrumentedBean.getProperty2()))\")\npublic class GetFieldAtAspect {\n\n  @Around(\"execution(* ConfigurableBean.getProperty2())\")\n  public Object onGet(ProceedingJoinPoint jp) throws Throwable {\n    return jp.proceed();\n  }\n}\n------\nimport org.springframework.beans.factory.InitializingBean;\n\n\npublic class InstrumentedBean implements InitializingBean, IInstrumentedBean {\n\n  private ConfigurableBean configurableBean;\n\n  private String value;\n\n  private transient String transientValue = \"aaa\";\n\n  \n  public void afterPropertiesSet() throws Exception {\n    this.configurableBean = new ConfigurableBean();\n  }\n  \n  public String getProperty1() {\n    synchronized(this) {\n      return this.configurableBean.getProperty1();\n    }\n  }\n\n  public String getProperty2() {\n    synchronized(this) {\n      return this.configurableBean.getProperty2();\n    }\n  }\n  \n  public void setValue(String value) {\n    synchronized(this) {\n      this.value = value;\n    }\n  }\n\n  public Object getValue() {\n    synchronized(this) {\n      return value;\n    }\n  }\n\n  public Object getTransientValue() {\n    return transientValue;\n  }\n  \n  public void setTransientValue(String transientValue) {\n    this.transientValue = transientValue;\n  }\n\n}\n\n------\n\nimport java.io.Serializable;\n\nimport org.springframework.beans.factory.annotation.Configurable;\n\n\n@Configurable\npublic class ConfigurableBean implements Serializable {\n  private static final long serialVersionUID = 1L;\n  \n  private String property1;\n  private String property2;\n  \n  public ConfigurableBean() {\n  }\n  \n  public String getProperty1() {\n    return this.property1;\n  }\n  \n  public String getProperty2() {\n    return this.property2;\n  }\n  \n  public void setProperty1(String property1) {\n    this.property1 = property1;\n  }\n  \n  public void setProperty2(String property2) {\n    this.property2 = property2;\n  }\n  \n}"
    },
    "commit": {
      "diff": [
        "tests/bugs153/pr161217/AtAspectJAspect.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "tests/bugs153/pr161217/C.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "228fc8d": {
    "bug_report": {
      "summary": "Bug 61374  Version the BCEL libraries to allow graceful failure when the wrong version is found.",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelVar.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelMethod.java",
        "weaver/src/org/aspectj/weaver/bcel/Utility.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "weaver/src/org/aspectj/weaver/bcel/ShadowRange.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelCflowAccessVar.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "weaver/testsrc/org/aspectj/weaver/bcel/WeaveTestCase.java",
        "weaver/testsrc/org/aspectj/weaver/bcel/ArgsWeaveTestCase.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelRenderer.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelFieldRef.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "weaver/testsrc/org/aspectj/weaver/bcel/MoveInstructionsWeaveTestCase.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "weaver/src/org/aspectj/weaver/bcel/Tag.java",
        "weaver/src/org/aspectj/weaver/bcel/ExceptionRange.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelCflowStackFieldAdder.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelField.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java",
        "weaver/src/org/aspectj/weaver/bcel/Range.java"
      ]
    }
  },
  "97ab1e9": {
    "bug_report": {
      "summary": "Bug 41952  XLint warning for call PCD's using subtype of defining type",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/OrPointcut.java",
        "tests/new/CallTypesI.java",
        "weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java",
        "bridge/src/org/aspectj/bridge/MessageUtil.java",
        "weaver/src/org/aspectj/weaver/patterns/Pointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java",
        "tests/new/IndeterminateArgType.java",
        "weaver/src/org/aspectj/weaver/Lint.java",
        "bridge/src/org/aspectj/bridge/SourceLocation.java",
        "weaver/src/org/aspectj/weaver/Checker.java",
        "weaver/src/org/aspectj/weaver/patterns/NotPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java",
        "testing/src/org/aspectj/testing/xml/SoftMessage.java",
        "org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java",
        "tests/bugs/DeclaringTypeWarning.java",
        "weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java",
        "bridge/src/org/aspectj/bridge/Message.java",
        "bridge/src/org/aspectj/bridge/IMessage.java",
        "tests/new/IndeterminateArg.java",
        "weaver/src/org/aspectj/weaver/patterns/AndPointcut.java"
      ]
    }
  },
  "e56a69a": {
    "bug_report": {
      "summary": "Bug 158412  @Pointcut in declare error results in NPE",
      "description": "I am trying to use an @AspectJ @Pointcut in a \"normal\" AspectJ declare error expression. That  results in the following exception.\n\n\njava.lang.NullPointerException\nat org.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:361)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:233)\nat org.aspectj.weaver.patterns.NotPointcut.concretize1(NotPointcut.java:100)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:233)\nat org.aspectj.weaver.patterns.AndPointcut.concretize1(AndPointcut.java:97)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:233)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:220)\nat org.aspectj.weaver.Checker.concretize(Checker.java:45)\nat org.aspectj.weaver.CrosscuttingMembers.addShadowMunger(CrosscuttingMembers.java:91)\nat org.aspectj.weaver.CrosscuttingMembers.addDeclare(CrosscuttingMembers.java:122)\nat org.aspectj.weaver.CrosscuttingMembers.addDeclares(CrosscuttingMembers.java:113)\nat org.aspectj.weaver.CrosscuttingMembersSet.addAdviceLikeDeclares(CrosscuttingMembersSet.java:117)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addAdviceLikeDeclares(AjLookupEnvironment.java:382)\nat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:245)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:199)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java",
        "tests/bugs153/pr158412/layering/SystemArchitektur.java",
        "tests/bugs153/pr158412/dao/Foo.java"
      ]
    }
  },
  "5336603": {
    "bug_report": {
      "summary": "Bug 170102  iajc Ant task doesn't support all warn options",
      "description": "The iajc Ant task currently supports only a few of the options provided by the ajc compiler.\n\nIt would be nice if it could support them all so that builds done using the Ant task generate the same errors/warnings as the ones done within the Eclipse IDE."
    },
    "commit": {
      "diff": [
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"
      ]
    }
  },
  "bbd832b": {
    "bug_report": {
      "summary": "Bug 40771  ajde apis are unnecessariy coupled to swing",
      "description": "The AJDE APIs are coupled to javax.swing by org.aspectj.ajde.EditorManager.  \nThe EditorManager needs to be refactored, have swing specific parts moved to \norg.aspectj.ajde.ui.swing and org.aspectj.ajbrowser."
    },
    "commit": {
      "diff": [
        "ajde/testsrc/org/aspectj/ajde/NullIdeEditorAdapter.java",
        "ajbrowser/src/org/aspectj/tools/ajbrowser/EditorManager.java",
        "ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java",
        "ajde/src/org/aspectj/ajde/ui/swing/BrowserViewManager.java",
        "ajde/src/org/aspectj/ajde/Ajde.java",
        "ajde/src/org/aspectj/ajde/ui/swing/StructureViewPanel.java",
        "ajde/testsrc/AjdeModuleTests.java",
        "ajbrowser/src/org/aspectj/tools/ajbrowser/BuildConfigPopupMenu.java",
        "ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java",
        "ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java",
        "ajde/src/org/aspectj/ajde/ui/swing/BuildConfigPopupMenu.java",
        "ajde/src/org/aspectj/ajde/ui/swing/BasicEditor.java",
        "ajde/src/org/aspectj/ajde/ui/EditorManager.java",
        "ajde/src/org/aspectj/ajde/ui/StructureViewManager.java",
        "ajbrowser/src/org/aspectj/tools/ajbrowser/CompilerMessagesPanel.java",
        "ajde/testsrc/org/aspectj/ajde/NullIdeManager.java",
        "ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java",
        "ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java",
        "ajde/testsrc/org/aspectj/ajde/CompilerMessagesTest.java",
        "ajbrowser/src/org/aspectj/tools/ajbrowser/BasicEditor.java",
        "ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java"
      ]
    }
  },
  "2ae4f53": {
    "bug_report": {
      "summary": "Bug 103740  Compiler failure on @annotation",
      "description": "I'm using the ajc embedded in the latest dev build of AJDT (build \n20050713163417)\n\nThis small example illustrates the problem:\npublic abstract aspect AbstractRequestMonitor {\n\n    public pointcut requestExecution(RequestContext requestContext) :\n        execution(* RequestContext.execute(..)) && this(requestContext);\n\n    public abstract class RequestContext {\n        public abstract Object execute();\n    }\n    \n    after(RequestContext requestContext) throwing (Throwable t) : \nrequestExecution(requestContext) {\n    }\n    \n}\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface AroundAdvice {\n\n}\n\npublic aspect ErrorHandling {\n\n    declare soft: Exception: !@annotation(AroundAdvice) && !withincode(* *\n(..));\n    \n    Object around() : adviceexecution() && !@annotation(AroundAdvice) {\n        try {\n            return proceed();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n}\n\nHere's the stack trace I get:\n\norg.aspectj.weaver.BCException: bad\n\tat org.aspectj.weaver.bcel.BcelRenderer.visit(BcelRenderer.java:228)\n\tat org.aspectj.weaver.ast.Literal.accept(Literal.java:29)\n\tat org.aspectj.weaver.bcel.BcelRenderer.recur(BcelRenderer.java:151)\n\tat org.aspectj.weaver.bcel.BcelRenderer.renderTest\n(BcelRenderer.java:117)\n\tat org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions\n(BcelAdvice.java:445)\n\tat org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure\n(BcelShadow.java:2585)\n\tat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:182)\n\tat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:480)\n\tat org.aspectj.weaver.Shadow.implement(Shadow.java:358)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.implement\n(BcelClassWeaver.java:1703)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave\n(BcelClassWeaver.java:389)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave\n(BcelClassWeaver.java:94)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1362)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump\n(BcelWeaver.java:1327)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify\n(BcelWeaver.java:1106)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:981)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave\n(AjCompilerAdapter.java:286)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling\n(AjCompilerAdapter.java:165)\n\tat \norg.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspec\ntj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile\n(Compiler.java:368)\n\tat \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation\n(AjBuildManager.java:727)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:206)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:140)\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile\n(CompilerAdapter.java:121)\n\tat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run\n(AspectJBuildManager.java:191)"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java"
      ]
    }
  },
  "f5d31ba": {
    "bug_report": {
      "summary": "Bug 39974  Some strange error when compiling the observer example with JBuilder7 integrated AJDE",
      "description": "When I compiled the observer/subject protocol example with JBuilder7 \nintegrated AJDE,there was a strange internal error\n\nC:/JBuilder7/extras/aspectj-110/doc/examples/observer/Observer.java:0: \nInternal compiler error\njava.lang.NullPointerException\n\n\tat \norg.aspectj.ajdt.internal.compiler.lookup.EclipseWorld.makeResolvedMember\n(Unknown Source)\n\n\tat org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit(Unknown \nSource)\n\n\tat org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse\n(Unknown Source)\n\n\tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse\n(Unknown Source)\n\n\tat \norg.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse\n(Unknown Source)\n\n\tat org.aspectj.ajdt.internal.core.builder.AsmBuilder.internalBuild\n(Unknown Source)\n\n\tat org.aspectj.ajdt.internal.core.builder.AsmBuilder.build(Unknown \nSource)\n\n\tat \norg.aspectj.ajdt.internal.compiler.lookup.EclipseWorld.finishedCompilationUnit\n(Unknown Source)\n\n\tat org.aspectj.ajdt.internal.compiler.AjCompiler.process(Unknown \nSource)\n\n\tat org.eclipse.jdt.internal.compiler.Compiler.compile(Unknown Source)\n\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile\n(Unknown Source)\n\n\tat org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile\n(Unknown Source)\n\n\tat \norg.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.run(Unknown \nSource)\n\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(Unknown Source)\n\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile(Unknown Source)\n\n\tat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run\n(Unknown Source)\n\nI firstly fix it by changing the interface Subject and Observer like this:\ninterface Observer {    void update();}\ninterface Subject { Object getData(); }\nthen it could compile successfully ,however,I immediately got another \nconfusing.The compiler only made Display.java Observer.java Subject.java \nSubjectObserverProtocol.java and SubjectObserverProtocolImpl.java but ignoring \nthe others.I don't know why,it seems to be a bug.\n\nMeanwhile, I use ajc command-line  to compile this example ,it can get through \nwithout any exceptions."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"
      ]
    }
  },
  "ba42a09": {
    "bug_report": {
      "summary": "Bug 128237  [@AspectJ] NPE on @AJ code with pointcut which contains logical OR operation.",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "tests/bugs151/pr128237.java"
      ]
    }
  },
  "5beab0e": {
    "bug_report": {
      "summary": "Bug 220172  [compiler] NullpointerException during compile",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/Shadow.java"
      ]
    }
  },
  "78a483d": {
    "bug_report": {
      "summary": "Bug 246021  FindBugs reporting another optimization",
      "description": "Ben Hale reported that FindBugs was producing a warning about a dead store to a local variable (a variable that is never then read within the method).  This bug is to investigate and hopefully remove the dead store."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"
      ]
    }
  },
  "86880f7": {
    "bug_report": {
      "summary": "Bug 114495  unqualified superaspect<T> pointcut sortafunny in subaspect",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/ResolvedType.java",
        "weaver/src/org/aspectj/weaver/ReferenceType.java"
      ]
    }
  },
  "45bce91": {
    "bug_report": {
      "summary": "Bug 61536  Front-end bug,  shouldn't allow patterns of the form  foo.., should be foo..*",
      "description": "See following code:\n\npublic class Test2 {\n  public static void main(String args[])\n    { System.out.println(\"Hi\");\n    }\n}\n\naspect Aspect2 {\n  // shouldn't one have to say,  java..* instead of java.. in the following??\n  // Note that the first advice (incorrect one) passes the front-end, but does\n  // not match,  whereas the second one does match.   I believe the front-end\n  // should reject the first one.\n  before () : call( * java..(..)) && within(Test2)\n    { System.out.println(\n        \"Incorrect One: Before a call of method in a java package \");\n    }\n\n  before () : call( * java..*(..)) && within(Test2)\n    { System.out.println(\n        \"Correct One: Before a call of method in a java package \");\n    }\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/PatternParser.java",
        "tests/bugs/EllipsesStar.java"
      ]
    }
  },
  "3f942a4": {
    "bug_report": {
      "summary": "Bug 92053  @args causes a VerifyError: Unable to pop operand off an empty stack",
      "description": "I'm getting a VerifyError exception when I try to use @args\nin following code:\n\n------------------ Test3.java -------------------------\nimport java.lang.annotation.*;\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@interface Ann {}\n\n@Ann\nclass AClass{}\n\npublic class Test3 {\n        void abc(AClass y) {}\n\n        public static void main(String[] args) {\n                new Test3().abc(new AClass());\n        }\n}\n\n\naspect Annotations {\n        before(Ann ann) : call(* Test3.*(..)) && @args(ann) {\n                System.out.println(\"Before: \" + thisJoinPoint);\n        }\n}\n----\n\nOn JRockIt5 jre and AspectJ 1.5.0M2 I get following result:\n-----------\njava.lang.VerifyError: (class: Test3, method: main signature:\n([Ljava/lang/String;)V) Unable to pop operand off an empty stack\n-----------\n\nI'm getting similar error with sun jre and with older versions\nof AspectJ5 (20050324155000 and from 10th feb)."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java",
        "tests/java5/annotations/binding/bugs/Test3.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java"
      ]
    }
  },
  "b17ff4e": {
    "bug_report": {
      "summary": "Bug 102212  [itds] abstract synchronized: compile error expected",
      "description": "when using intertype declaration, the compiler doesn't check for illegal\nmodifier combinations such as \"abstract synchronized\".\n\nanother manifestation of this problem is when using intertype declaration to add\na synchronized method to an interface. the problem is more severe in this case\nbecause conceptually, this method is not abstract at all.\n\n\ninterface Interface {}\nabstract class Parent {}\nclass Child extends Parent implements Interface {}\n\naspect Bug {\n  // illegal modifier combination not caught by ajc\n  public abstract synchronized void Parent._abstract();\n\n  public synchronized void Child._abstract() {}\n\n\n  // the following has the same effect, but is easier to miss\n  public /* implicit abstract */ synchronized void Interface._interface() {}\n\n\n  // use Child to make java complain: \"illegal modifiers: 0x421\"\n  // (this corresponds to \"public abstract synchronized\")\n  public static void main(String[] args) {\n    new Child();\n  }\n}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"
      ]
    }
  },
  "4177bed": {
    "bug_report": {
      "summary": "Bug 171667  When ordering a Clean with Build Automatico I receive the error below.",
      "description": "When executing an Clean Project in Eclipse with Automatic Building I receive the error below.\n\nline from the top stack, e.g. \"SomeFile.jara:243\"\n\njava.lang.NullPointerException\nat org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.methodMustOverride(AjProblemReporter.java:380)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:153)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:400)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDe ... pter.java:107)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java"
      ]
    }
  },
  "2072ac1": {
    "bug_report": {
      "summary": "Bug 37739  Unexpected Xlint:unresolvableMember warning with withincode",
      "description": "The following code produces an Xlint:unresolvableMember warning:\n\nclass A {\n    A(Class type) {}\n\n    A() {\n        this(String.class);\n    }\n}\n\nclass B {\n\n    public void test() {\n    }\n\n    public void test2() {\n        test();\n    }\n}\n\naspect C {\n    void around() :\n        (call (void B.test()) &&\n         withincode (void B.test2())) {\n        proceed();\n    }\n}\n\nThe warning text is:\n\nWarning.java:22 can not resolve this member:\nvoid A.<catch>(java.lang.ClassNotFoundException) [Xlint:unresolvableMember]\n\nLine 22 is the line in the aspect that says \"withincode\".  If I comment out \nthe aspect, the warning goes away.  Also, if I comment out A's default \nconstructor, it goes away.  The \"String.class\" seems to have something to do \nwith the warning.  \n\nI can reproduce this with 1.1rc1 and 1.1rc2."
    },
    "commit": {
      "diff": [
        "tests/bugs/CatchSig.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"
      ]
    }
  },
  "5f80c8c": {
    "bug_report": {
      "summary": "Bug 71811  AJDoc: should be able to set encoding like javadoc",
      "description": "ajdoc doesn't support the -encoding -docencoding and -charset options of javadoc.\n\nEspecially, it doesn't pass on the -encoding to ajc.\nIf your project uses a source file encoding (e.g. UTF-8) \ndiffering form the platform standard, and some java identifiers \nuse characters byond the standard ASCII range, you won't be able \nto use ajdoc at all."
    },
    "commit": {
      "diff": [
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/Main.java"
      ]
    }
  },
  "2309f7b": {
    "bug_report": {
      "summary": "Bug 266996  AspectJElementHierarchy.java:427 NullPointerException",
      "description": "Since an recent update to eclipse I get errors when using ajdt compile time weaving. Single used aspect is @Configurable from spring 2.5.6. I call this critical because my application wont run without that aspect compiled in.\n\nWhen doing a build two popups \"AspectJ Internal Compiler Error\" are showing up with instructions to look for and post bugreports.\n\n\n1st popup:\n--------------------------------\njava.lang.NullPointerException\nat org.aspectj.asm.internal.AspectJElementHierarchy.findCloserMatchForLineNumber(AspectJElementHierarchy.java:427)\nat org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship(AsmRelationshipProvider.java:130)\nat org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:124)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:441)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave( ... \nend abstract interface org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect$ConfigurableDeserializationSupport\n--------------------------------\n\n\n2nd popup\n--------------------------------\njava.lang.NullPointerException\nat org.aspectj.asm.internal.AspectJElementHierarchy.findCloserMatchForLineNumber(AspectJElementHierarchy.java:427)\nat org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship(AsmRelationshipProvider.java:130)\nat org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:124)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:441)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave( ... ibatis/domain/Banf;)I\n                    IRETURN\n  end public volatile int compareTo(Object)\nend public class de.synaix.k070_Banf.ibatis.domain.Banf\n--------------------------------\n\n\nOutput of AJDT Event trace window:\n--------------------------------\n11:21:34 Removed problems and tasks for project SOME_webapp\n11:21:34 Builder: Tidied output folder(s), removed class files and derived resources\n11:21:35 Timer event: 1ms: Delete markers: SOME_webapp (Finished deleting markers for SOME_webapp\n11:21:38 Compiler configuration for project SOME_webapp doesn't know previous state, so assuming EVERYTHING has changed.\n11:21:38 ===========================================================================================\n11:21:38 Build kind = FULLBUILD\n11:21:38 Project=SOME_webapp, kind of build requested=Full AspectJ compilation\n11:21:38 Builder: Tidied output folder(s), removed class files and derived resources\n11:21:38 Timer event: 442ms: Pre compile\n11:21:38 Compiler configuration for project SOME_webapp has been read by compiler.  Resetting.\n11:21:38      Configuration was [PROJECTSOURCEFILES_CHANGED, JAVAOPTIONS_CHANGED, ASPECTPATH_CHANGED, CLASSPATH_CHANGED, INPATH_CHANGED, NONSTANDARDOPTIONS_CHANGED, OUTJAR_CHANGED, PROJECTSOURCERESOURCES_CHANGED, OUTPUTDESTINATIONS_CHANGED, INJARS_CHANGED]\n11:21:38 Resetting list of modified source files.  Was null\n11:21:38 Preparing for build: not going to be incremental because no successful previous full build\n11:21:40 Timer event: 1252ms: Time to first compiled message\n11:21:40 Timer event: 1276ms: Time to first woven message\n11:21:45 AspectJ reports build successful, build was: FULL\n11:21:45 AJDE Callback: finish. Was full build: true\n11:21:45 Timer event: 6456ms: Total time spent in AJDE\n11:21:45 Timer event: 157ms: Refresh after build\n11:21:45 Types affected during build = 308\n11:21:45 Crosscutting model sanity checked with no problems\n11:21:45 Timer event: 0ms: Post compile\n11:21:45 Timer event: 7248ms: Total time spent in AJBuilder.build()\n11:21:45 Timer event: 2ms: Delete markers: SOME_webapp (Finished deleting markers for SOME_webapp)\n11:21:45 Timer event: 179ms: Create markers: SOME_webapp (Finished creating markers for SOME_webapp)\n--------------------------------"
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"
      ]
    }
  },
  "c5c18aa": {
    "bug_report": {
      "summary": "Bug 138798  BCException on invalid annotation match",
      "description": "This unfortunately invalid code:\n\nbefore(Throwable throwable, NormalException normalException) : handler(*) && args(throwable) && @withincode(normalException) {\n...\n\nGenerates this exception in AJDT with post-1.5.1a AspectJ\n\norg.aspectj.weaver.BCException\nat org.aspectj.weaver.bcel.BcelRenderer.visit(BcelRenderer.java:237)\nat org.aspectj.weaver.ast.Literal.accept(Literal.java:29)\nat org.aspectj.weaver.bcel.BcelRenderer.recur(BcelRenderer.java:153)\nat org.aspectj.weaver.bcel.BcelRenderer.renderTest(BcelRenderer.java:119)\nat org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions(BcelAdvice.java:537)\nat org.aspectj.weaver.bcel.BcelAdvice.getAdviceInstructions(BcelAdvice.java:376)\nat org.aspectj.weaver.bcel.BcelShadow.weaveBefore(BcelShadow.java:1690)\nat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:208)\nat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:639)\nat org.aspectj.weaver.Shadow.implement(Shadow.java:456)\nat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2236)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:491)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1113)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic class glassbox.client.ConnectionManager extends java.lang.Object:\n  public static String propnameNum\n  public static String propnameDefault\n  public static String propnameViewed\n  public static String propnameNickPrefix\n  public static String propnameUrlPrefix\n  public static String propnameViewedPrefix\n  private static String propFilename\n  private static String localhostNickname\n  public static String localhostURL\n  private java.util.List connectionList [Signature(Ljava/util/List<Lglassbox/client/ConnectionManager$AgentConnection;>;)]\n  private int defaultConnectionIndex\n  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0\n  static void <clinit>():\n    staticinitialization(void glassbox.client.ConnectionManager.<clinit>())\n    |               LDC \"glassbox.connections.num\"   (line 13)\n    |               PUTSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String;\n    |               LDC \"glassbox.connections.default\"   (line 14)\n    |               PUTSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String;\n    |               LDC \"glassbox.connections.viewed\"   (line 15)\n    |               PUTSTATIC glassbox.client.ConnectionManager.propnameViewed Ljava/lang/String;\n    |               LDC \"glassbox.connections.nickname_\"   (line 16)\n    |               PUTSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String;\n    |               LDC \"glassbox.connections.url_\"   (line 17)\n    |               PUTSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String;\n    |               LDC \"glassbox.connections.viewed_\"   (line 18)\n    |               PUTSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String;\n    |               LDC \"connection.properties\"   (line 20)\n    |               PUTSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String;\n    |               LDC \"localhost\"   (line 21)\n    |               PUTSTATIC glassbox.client.ConnectionManager.localhostNickname Ljava/lang/String;\n    |               LDC \"service:jmx:rmi://localhost:7131/jndi/rmi://localhost:7132/GlassboxTroubleshooter\"   (line 22)\n    |               PUTSTATIC glassbox.client.ConnectionManager.localhostURL Ljava/lang/String;\n    |               RETURN   (line 11)\n    staticinitialization(void glassbox.client.ConnectionManager.<clinit>())\n  end static void <clinit>()\n\n  public void <init>()    org.aspectj.weaver.MethodDeclarationLineNumber: 23:966\n:\n                    ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 23)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void glassbox.client.ConnectionManager.<init>())\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 24)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager.init ()V\n    |               RETURN   (line 25)\n    constructor-execution(void glassbox.client.ConnectionManager.<init>())\n  end public void <init>()\n\n  public void init()    org.aspectj.weaver.MethodDeclarationLineNumber: 67:1992\n:\n    method-execution(void glassbox.client.ConnectionManager.init())\n    | catch java.lang.RuntimeException -> E0\n    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 69)\n    | |             INVOKEVIRTUAL glassbox.client.ConnectionManager.readFromFile ()V\n    | |             GOTO L0\n    | catch java.lang.RuntimeException -> E0\n    |           E0: ASTORE_2\n    | exception-handler(void glassbox.client.ConnectionManager.<catch>(java.lang.RuntimeException))\n    | |             ALOAD_2\n    | exception-handler(void glassbox.client.ConnectionManager.<catch>(java.lang.RuntimeException))\n    |               ASTORE_1   (line 70)\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 71)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager.createDefaultList ()V\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 72)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager.writeToFile ()V\n    |           L0: RETURN   (line 74)\n    method-execution(void glassbox.client.ConnectionManager.init())\n  end public void init()\n\n  public void createDefaultList()    org.aspectj.weaver.MethodDeclarationLineNumber: 76:2134\n:\n    method-execution(void glassbox.client.ConnectionManager.createDefaultList())\n    |               NEW glassbox.client.ConnectionManager$AgentConnection   (line 77)\n    |               DUP\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETSTATIC glassbox.client.ConnectionManager.localhostNickname Ljava/lang/String;\n    |               GETSTATIC glassbox.client.ConnectionManager.localhostURL Ljava/lang/String;\n    |               ICONST_1\n    |               INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.<init> (Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z)V\n    |               ASTORE_1\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 78)\n    |               NEW java.util.ArrayList\n    |               DUP\n    |               INVOKESPECIAL java.util.ArrayList.<init> ()V\n    |               PUTFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 79)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ALOAD_1     // Lglassbox/client/ConnectionManager$AgentConnection; localhost\n    |               INVOKEINTERFACE java.util.List.add (Ljava/lang/Object;)Z\n    |               POP\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 80)\n    |               ICONST_0\n    |               PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    |               RETURN   (line 81)\n    method-execution(void glassbox.client.ConnectionManager.createDefaultList())\n  end public void createDefaultList()\n\n  public void writeToFile()    org.aspectj.weaver.MethodDeclarationLineNumber: 84:2433\n:\n    method-execution(void glassbox.client.ConnectionManager.writeToFile())\n    |               NEW java.util.Properties   (line 85)\n    |               DUP\n    |               INVOKESPECIAL java.util.Properties.<init> ()V\n    |               ASTORE_1\n    |               ALOAD_1     // Ljava/util/Properties; properties   (line 86)\n    |               GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String;\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.size ()I\n    |               INVOKESTATIC java.lang.String.valueOf (I)Ljava/lang/String;\n    |               INVOKEVIRTUAL java.util.Properties.setProperty (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;\n    |               POP\n    |               ALOAD_1     // Ljava/util/Properties; properties   (line 87)\n    |               GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String;\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               INVOKEVIRTUAL java.util.Properties.setProperty (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;\n    |               POP\n    |               ICONST_0   (line 88)\n    |               ISTORE_2\n    |               GOTO L1\n    |           L0: ALOAD_1     // Ljava/util/Properties; properties   (line 89)\n    |               NEW java.lang.StringBuilder\n    |               DUP\n    |               GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String;\n    |               INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;\n    |               INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    |               ILOAD_2     // I i\n    |               INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;\n    |               INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ILOAD_2     // I i\n    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               INVOKEVIRTUAL java.util.Properties.setProperty (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;\n    |               POP\n    |               ALOAD_1     // Ljava/util/Properties; properties   (line 90)\n    |               NEW java.lang.StringBuilder\n    |               DUP\n    |               GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String;\n    |               INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;\n    |               INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    |               ILOAD_2     // I i\n    |               INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;\n    |               INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ILOAD_2     // I i\n    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl ()Ljava/lang/String;\n    |               INVOKEVIRTUAL java.util.Properties.setProperty (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;\n    |               POP\n    |               ALOAD_1     // Ljava/util/Properties; properties   (line 91)\n    |               NEW java.lang.StringBuilder\n    |               DUP\n    |               GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String;\n    |               INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;\n    |               INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    |               ILOAD_2     // I i\n    |               INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;\n    |               INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ILOAD_2     // I i\n    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.isViewed ()Z\n    |               INVOKESTATIC java.lang.String.valueOf (Z)Ljava/lang/String;\n    |               INVOKEVIRTUAL java.util.Properties.setProperty (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;\n    |               POP\n    |               IINC 2 1     // I i   (line 88)\n    |           L1: ILOAD_2     // I i\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.size ()I\n    |               IF_ICMPLT L0\n    | catch java.io.IOException -> E0\n    | |             NEW java.io.File   (line 94)\n    | |             DUP\n    | |             GETSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String;\n    | |             INVOKESPECIAL java.io.File.<init> (Ljava/lang/String;)V\n    | |             ASTORE_2\n    | |             NEW java.io.FileOutputStream   (line 95)\n    | |             DUP\n    | |             ALOAD_2     // Ljava/io/File; f\n    | |             ICONST_0\n    | |             INVOKESPECIAL java.io.FileOutputStream.<init> (Ljava/io/File;Z)V\n    | |             ASTORE_3\n    | |             ALOAD_1     // Ljava/util/Properties; properties   (line 96)\n    | |             ALOAD_3     // Ljava/io/FileOutputStream; fos\n    | |             ACONST_NULL\n    | |             INVOKEVIRTUAL java.util.Properties.store (Ljava/io/OutputStream;Ljava/lang/String;)V\n    | |             ALOAD_3     // Ljava/io/FileOutputStream; fos   (line 97)\n    | |             INVOKEVIRTUAL java.io.FileOutputStream.close ()V\n    | |             GOTO L2\n    | catch java.io.IOException -> E0\n    |           E0: ASTORE_2   (line 98)\n    |               GETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 99)\n    |               LDC \"Failed to write connection.properties file\"\n    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    |               GETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 100)\n    |               ALOAD_2     // Ljava/io/IOException; e\n    |               INVOKEVIRTUAL java.io.IOException.toString ()Ljava/lang/String;\n    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    |           L2: RETURN   (line 102)\n    method-execution(void glassbox.client.ConnectionManager.writeToFile())\n  end public void writeToFile()\n\n  public void readFromFile()    org.aspectj.weaver.MethodDeclarationLineNumber: 105:3495\n:\n    method-execution(void glassbox.client.ConnectionManager.readFromFile())\n    |               NEW java.util.ArrayList   (line 107)\n    |               DUP\n    |               INVOKESPECIAL java.util.ArrayList.<init> ()V\n    |               ASTORE_1\n    |               NEW java.util.Properties   (line 108)\n    |               DUP\n    |               INVOKESPECIAL java.util.Properties.<init> ()V\n    |               ASTORE_2\n    |               NEW java.io.File   (line 110)\n    |               DUP\n    |               GETSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String;\n    |               INVOKESPECIAL java.io.File.<init> (Ljava/lang/String;)V\n    |               ASTORE 4\n    | catch java.io.IOException -> E0\n    | |             ALOAD_2     // Ljava/util/Properties; properties   (line 112)\n    | |             NEW java.io.FileInputStream\n    | |             DUP\n    | |             ALOAD 4     // Ljava/io/File; f\n    | |             INVOKESPECIAL java.io.FileInputStream.<init> (Ljava/io/File;)V\n    | |             INVOKEVIRTUAL java.util.Properties.load (Ljava/io/InputStream;)V\n    | |             GOTO L0\n    | catch java.io.IOException -> E0\n    |           E0: ASTORE 5   (line 113)\n    |               NEW java.lang.RuntimeException   (line 116)\n    |               DUP\n    |               NEW java.lang.StringBuilder\n    |               DUP\n    |               LDC \"Can't open \"\n    |               INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    |               ALOAD 4     // Ljava/io/File; f\n    |               INVOKEVIRTUAL java.io.File.getAbsolutePath ()Ljava/lang/String;\n    |               INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;\n    |               INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    |               INVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/String;)V\n    |               ATHROW\n    | catch java.lang.Exception -> E1\n    | |         L0: ALOAD_2     // Ljava/util/Properties; properties   (line 119)\n    | |             GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String;\n    | |             INVOKEVIRTUAL java.util.Properties.getProperty (Ljava/lang/String;)Ljava/lang/String;\n    | |             INVOKESTATIC java.lang.Integer.valueOf (Ljava/lang/String;)Ljava/lang/Integer;\n    | |             INVOKEVIRTUAL java.lang.Integer.intValue ()I\n    | |             ISTORE 5\n    | |             ALOAD_2     // Ljava/util/Properties; properties   (line 120)\n    | |             GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String;\n    | |             INVOKEVIRTUAL java.util.Properties.getProperty (Ljava/lang/String;)Ljava/lang/String;\n    | |             ASTORE 6\n    | |             ALOAD 6     // Ljava/lang/String; defNickname   (line 121)\n    | |             IFNONNULL L1\n    | |             NEW java.lang.RuntimeException\n    | |             DUP\n    | |             NEW java.lang.StringBuilder\n    | |             DUP\n    | |             LDC \"missing \"\n    | |             INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    | |             GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    | |             INVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/String;)V\n    | |             ATHROW\n    | |         L1: ILOAD 5     // I num   (line 122)\n    | |             ICONST_1\n    | |             IF_ICMPGE L2\n    | |             NEW java.lang.RuntimeException\n    | |             DUP\n    | |             NEW java.lang.StringBuilder\n    | |             DUP\n    | |             LDC \"Bad \"\n    | |             INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    | |             GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;\n    | |             LDC \"=\"\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;\n    | |             ILOAD 5     // I num\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    | |             INVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/String;)V\n    | |             ATHROW\n    | |         L2: ICONST_0   (line 123)\n    | |             ISTORE 7\n    | |             GOTO L9\n    | |         L3: ALOAD_2     // Ljava/util/Properties; properties   (line 124)\n    | |             NEW java.lang.StringBuilder\n    | |             DUP\n    | |             GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String;\n    | |             INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;\n    | |             INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    | |             ILOAD 7     // I i\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    | |             INVOKEVIRTUAL java.util.Properties.getProperty (Ljava/lang/String;)Ljava/lang/String;\n    | |             ASTORE 8\n    | |             ALOAD 8     // Ljava/lang/String; nickname   (line 125)\n    | |             IFNONNULL L4\n    | |             NEW java.lang.RuntimeException\n    | |             DUP\n    | |             NEW java.lang.StringBuilder\n    | |             DUP\n    | |             LDC \"missing \"\n    | |             INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    | |             GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;\n    | |             ILOAD 7     // I i\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    | |             INVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/String;)V\n    | |             ATHROW\n    | |         L4: ALOAD_2     // Ljava/util/Properties; properties   (line 126)\n    | |             NEW java.lang.StringBuilder\n    | |             DUP\n    | |             GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String;\n    | |             INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;\n    | |             INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    | |             ILOAD 7     // I i\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    | |             INVOKEVIRTUAL java.util.Properties.getProperty (Ljava/lang/String;)Ljava/lang/String;\n    | |             ASTORE 9\n    | |             ALOAD 9     // Ljava/lang/String; url   (line 127)\n    | |             IFNONNULL L5\n    | |             NEW java.lang.RuntimeException\n    | |             DUP\n    | |             NEW java.lang.StringBuilder\n    | |             DUP\n    | |             LDC \"missing \"\n    | |             INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    | |             GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;\n    | |             ILOAD 7     // I i\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    | |             INVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/String;)V\n    | |             ATHROW\n    | |         L5: ALOAD_2     // Ljava/util/Properties; properties   (line 128)\n    | |             NEW java.lang.StringBuilder\n    | |             DUP\n    | |             GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String;\n    | |             INVOKESTATIC java.lang.String.valueOf (Ljava/lang/Object;)Ljava/lang/String;\n    | |             INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    | |             ILOAD 7     // I i\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    | |             INVOKEVIRTUAL java.util.Properties.getProperty (Ljava/lang/String;)Ljava/lang/String;\n    | |             ASTORE 10\n    | |             ALOAD 10     // Ljava/lang/String; viewedStr   (line 129)\n    | |             LDC \"true\"\n    | |             INVOKEVIRTUAL java.lang.String.contentEquals (Ljava/lang/CharSequence;)Z\n    | |             IFEQ L6\n    | |             ICONST_1\n    | |             GOTO L7\n    | |         L6: ICONST_0\n    | |         L7: ISTORE_3\n    | |             ALOAD 9     // Ljava/lang/String; url   (line 130)\n    | |             IFNONNULL L8\n    | |             NEW java.lang.RuntimeException\n    | |             DUP\n    | |             NEW java.lang.StringBuilder\n    | |             DUP\n    | |             LDC \"missing \"\n    | |             INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    | |             GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;\n    | |             ILOAD 7     // I i\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (I)Ljava/lang/StringBuilder;\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    | |             INVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/String;)V\n    | |             ATHROW\n    | |         L8: ALOAD_1     // Ljava/util/List; agcon   (line 131)\n    | |             NEW glassbox.client.ConnectionManager$AgentConnection\n    | |             DUP\n    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    | |             ALOAD 8     // Ljava/lang/String; nickname\n    | |             ALOAD 9     // Ljava/lang/String; url\n    | |             ILOAD_3     // Z viewed\n    | |             INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.<init> (Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z)V\n    | |             INVOKEINTERFACE java.util.List.add (Ljava/lang/Object;)Z\n    | |             POP\n    | |             IINC 7 1     // I i   (line 123)\n    | |         L9: ILOAD 7     // I i\n    | |             ILOAD 5     // I num\n    | |             IF_ICMPLT L3\n    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 133)\n    | |             ICONST_M1\n    | |             PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 134)\n    | |             ALOAD_1     // Ljava/util/List; agcon\n    | |             PUTFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 135)\n    | |             ALOAD 6     // Ljava/lang/String; defNickname\n    | |             INVOKEVIRTUAL glassbox.client.ConnectionManager.setAsDefault (Ljava/lang/String;)V\n    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 136)\n    | |             GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    | |             ICONST_M1\n    | |             IF_ICMPNE L10\n    | |             ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 137)\n    | |             ICONST_0\n    | |             PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    | |             GOTO L10\n    | catch java.lang.Exception -> E1\n    |           E1: ASTORE 5   (line 140)\n    |               GETSTATIC java.lang.System.err Ljava/io/PrintStream;   (line 141)\n    |               LDC \"Failed to read connection.properties file\"\n    |               INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    |               ALOAD 5     // Ljava/lang/Exception; e2   (line 142)\n    |               INVOKEVIRTUAL java.lang.Exception.printStackTrace ()V\n    |               NEW java.lang.RuntimeException   (line 143)\n    |               DUP\n    |               ALOAD 5     // Ljava/lang/Exception; e2\n    |               INVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/Throwable;)V\n    |               ATHROW\n    |          L10: RETURN   (line 145)\n    method-execution(void glassbox.client.ConnectionManager.readFromFile())\n  end public void readFromFile()\n\n  public void delete(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 147:5452\n:\n    method-execution(void glassbox.client.ConnectionManager.delete(java.lang.String))\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 148)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.size ()I\n    |               ICONST_1\n    |               IF_ICMPGT L0\n    |               RETURN\n    |           L0: ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 149)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n    |               ASTORE_3\n    |               GOTO L3\n    |           L1: ALOAD_3\n    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               ASTORE_2\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 151)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               ALOAD_1     // Ljava/lang/String; nickname\n    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    |               IFEQ L3\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 152)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con\n    |               INVOKEINTERFACE java.util.List.lastIndexOf (Ljava/lang/Object;)I\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    |               IF_ICMPNE L2\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               ICONST_0\n    |               PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    |           L2: ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 154)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con\n    |               INVOKEINTERFACE java.util.List.remove (Ljava/lang/Object;)Z\n    |               POP\n    |               GOTO L4   (line 155)\n    |           L3: ALOAD_3   (line 149)\n    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z\n    |               IFNE L1\n    |           L4: RETURN   (line 158)\n    method-execution(void glassbox.client.ConnectionManager.delete(java.lang.String))\n  end public void delete(String)\n\n  public void setAsDefault(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 160:5880\n:\n    method-execution(void glassbox.client.ConnectionManager.setAsDefault(java.lang.String))\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 161)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n    |               ASTORE_3\n    |               GOTO L1\n    |           L0: ALOAD_3\n    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               ASTORE_2\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 162)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               ALOAD_1     // Ljava/lang/String; nickname\n    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    |               IFEQ L1\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 163)\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con\n    |               INVOKEINTERFACE java.util.List.lastIndexOf (Ljava/lang/Object;)I\n    |               PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 164)\n    |               ICONST_1\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setViewed (Z)V\n    |               GOTO L2   (line 165)\n    |           L1: ALOAD_3   (line 161)\n    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z\n    |               IFNE L0\n    |           L2: RETURN   (line 168)\n    method-execution(void glassbox.client.ConnectionManager.setAsDefault(java.lang.String))\n  end public void setAsDefault(String)\n\n  public void setSelectViewed(String, boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 170:6156\n:\n    method-execution(void glassbox.client.ConnectionManager.setSelectViewed(java.lang.String, boolean))\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 171)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager.getDefaultNick ()Ljava/lang/String;\n    |               ASTORE_3\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 172)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n    |               ASTORE 5\n    |               GOTO L2\n    |           L0: ALOAD 5\n    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               ASTORE 4\n    |               ALOAD 4     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 173)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               ALOAD_1     // Ljava/lang/String; nickname\n    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    |               IFEQ L2\n    |               ILOAD_2     // Z val   (line 174)\n    |               IFNE L1\n    |               ALOAD_3     // Ljava/lang/String; defNick\n    |               ALOAD 4     // Lglassbox/client/ConnectionManager$AgentConnection; con\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               IF_ACMPEQ L2\n    |           L1: ALOAD 4     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 177)\n    |               ILOAD_2     // Z val\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setViewed (Z)V\n    |               GOTO L3   (line 178)\n    |           L2: ALOAD 5   (line 172)\n    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z\n    |               IFNE L0\n    |           L3: RETURN   (line 182)\n    method-execution(void glassbox.client.ConnectionManager.setSelectViewed(java.lang.String, boolean))\n  end public void setSelectViewed(String, boolean)\n\n  public boolean getSelectViewed(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 184:6636\n:\n    method-execution(boolean glassbox.client.ConnectionManager.getSelectViewed(java.lang.String))\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 185)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n    |               ASTORE_3\n    |               GOTO L1\n    |           L0: ALOAD_3\n    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               ASTORE_2\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 186)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               ALOAD_1     // Ljava/lang/String; nickname\n    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    |               IFEQ L1\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 187)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.isViewed ()Z\n    |               IRETURN\n    |           L1: ALOAD_3   (line 185)\n    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z\n    |               IFNE L0\n    |               ICONST_0   (line 190)\n    |               IRETURN\n    method-execution(boolean glassbox.client.ConnectionManager.getSelectViewed(java.lang.String))\n  end public boolean getSelectViewed(String)\n\n  public String getNicknameFromURL(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 193:6903\n:\n    method-execution(java.lang.String glassbox.client.ConnectionManager.getNicknameFromURL(java.lang.String))\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 194)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n    |               ASTORE_3\n    |               GOTO L1\n    |           L0: ALOAD_3\n    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               ASTORE_2\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 195)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl ()Ljava/lang/String;\n    |               ALOAD_1     // Ljava/lang/String; url\n    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    |               IFEQ L1\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 196)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               ARETURN\n    |           L1: ALOAD_3   (line 194)\n    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z\n    |               IFNE L0\n    |               LDC_W \" \"   (line 199)\n    |               ARETURN\n    method-execution(java.lang.String glassbox.client.ConnectionManager.getNicknameFromURL(java.lang.String))\n  end public String getNicknameFromURL(String)\n\n  public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromURL(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 202:7168\n:\n    method-execution(glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromURL(java.lang.String))\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 203)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n    |               ASTORE_3\n    |               GOTO L1\n    |           L0: ALOAD_3\n    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               ASTORE_2\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 204)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl ()Ljava/lang/String;\n    |               ALOAD_1     // Ljava/lang/String; url\n    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    |               IFEQ L1\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 205)\n    |               ARETURN\n    |           L1: ALOAD_3   (line 203)\n    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z\n    |               IFNE L0\n    |               ACONST_NULL   (line 209)\n    |               ARETURN\n    method-execution(glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromURL(java.lang.String))\n  end public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromURL(String)\n\n  public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromNick(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 212:7429\n:\n    method-execution(glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromNick(java.lang.String))\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 213)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n    |               ASTORE_3\n    |               GOTO L1\n    |           L0: ALOAD_3\n    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               ASTORE_2\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 214)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               ALOAD_1     // Ljava/lang/String; nickname\n    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    |               IFEQ L1\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 215)\n    |               ARETURN\n    |           L1: ALOAD_3   (line 213)\n    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z\n    |               IFNE L0\n    |               ACONST_NULL   (line 218)\n    |               ARETURN\n    method-execution(glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromNick(java.lang.String))\n  end public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromNick(String)\n\n  public String getURLFromNick(String)    org.aspectj.weaver.MethodDeclarationLineNumber: 221:7695\n:\n    method-execution(java.lang.String glassbox.client.ConnectionManager.getURLFromNick(java.lang.String))\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 222)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n    |               ASTORE_3\n    |               GOTO L1\n    |           L0: ALOAD_3\n    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               ASTORE_2\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 223)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               ALOAD_1     // Ljava/lang/String; nick\n    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    |               IFEQ L1\n    |               ALOAD_2     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 224)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl ()Ljava/lang/String;\n    |               ARETURN\n    |           L1: ALOAD_3   (line 222)\n    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z\n    |               IFNE L0\n    |               LDC_W \" \"   (line 227)\n    |               ARETURN\n    method-execution(java.lang.String glassbox.client.ConnectionManager.getURLFromNick(java.lang.String))\n  end public String getURLFromNick(String)\n\n  public void edit(String, String)    org.aspectj.weaver.MethodDeclarationLineNumber: 231:7947\n:\n    method-execution(void glassbox.client.ConnectionManager.edit(java.lang.String, java.lang.String))\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 232)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n    |               ASTORE 4\n    |               GOTO L1\n    |           L0: ALOAD 4\n    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               ASTORE_3\n    |               ALOAD_3     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 233)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               ALOAD_1     // Ljava/lang/String; nickname\n    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    |               IFEQ L1\n    |               ALOAD_3     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 234)\n    |               ALOAD_2     // Ljava/lang/String; newurl\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setUrl (Ljava/lang/String;)V\n    |               GOTO L2   (line 235)\n    |           L1: ALOAD 4   (line 232)\n    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z\n    |               IFNE L0\n    |           L2: RETURN   (line 238)\n    method-execution(void glassbox.client.ConnectionManager.edit(java.lang.String, java.lang.String))\n  end public void edit(String, String)\n\n  public void add(String, String, boolean, boolean)    org.aspectj.weaver.MethodDeclarationLineNumber: 240:8150\n:\n    method-execution(void glassbox.client.ConnectionManager.add(java.lang.String, java.lang.String, boolean, boolean))\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 241)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.iterator ()Ljava/util/Iterator;\n    |               ASTORE 6\n    |               GOTO L1\n    |           L0: ALOAD 6\n    |               INVOKEINTERFACE java.util.Iterator.next ()Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               ASTORE 5\n    |               ALOAD 5     // Lglassbox/client/ConnectionManager$AgentConnection; con   (line 242)\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               ALOAD_1     // Ljava/lang/String; nickname\n    |               INVOKEVIRTUAL java.lang.String.equals (Ljava/lang/Object;)Z\n    |               IFEQ L1\n    |               RETURN\n    |           L1: ALOAD 6   (line 241)\n    |               INVOKEINTERFACE java.util.Iterator.hasNext ()Z\n    |               IFNE L0\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 244)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               NEW glassbox.client.ConnectionManager$AgentConnection\n    |               DUP\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               ALOAD_1     // Ljava/lang/String; nickname\n    |               ALOAD_2     // Ljava/lang/String; url\n    |               ILOAD_3     // Z viewed\n    |               INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.<init> (Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z)V\n    |               INVOKEINTERFACE java.util.List.add (Ljava/lang/Object;)Z\n    |               POP\n    |               ILOAD 4     // Z makeDefault   (line 245)\n    |               IFEQ L2\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               INVOKEINTERFACE java.util.List.size ()I\n    |               ICONST_1\n    |               ISUB\n    |               PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    |           L2: RETURN   (line 246)\n    method-execution(void glassbox.client.ConnectionManager.add(java.lang.String, java.lang.String, boolean, boolean))\n  end public void add(String, String, boolean, boolean)\n\n  public int getDefaultIndex()    org.aspectj.weaver.MethodDeclarationLineNumber: 248:8519\n:\n    method-execution(int glassbox.client.ConnectionManager.getDefaultIndex())\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 249)\n    |               GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    |               IRETURN\n    method-execution(int glassbox.client.ConnectionManager.getDefaultIndex())\n  end public int getDefaultIndex()\n\n  public java.util.List getConnectionList()    org.aspectj.weaver.MethodDeclarationLineNumber: 252:8611\n:\n    method-execution(java.util.List glassbox.client.ConnectionManager.getConnectionList())\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 253)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ARETURN\n    method-execution(java.util.List glassbox.client.ConnectionManager.getConnectionList())\n  end public java.util.List getConnectionList()\n\n  public String getDefaultURL()    org.aspectj.weaver.MethodDeclarationLineNumber: 256:8683\n:\n    method-execution(java.lang.String glassbox.client.ConnectionManager.getDefaultURL())\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 257)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl ()Ljava/lang/String;\n    |               ARETURN\n    method-execution(java.lang.String glassbox.client.ConnectionManager.getDefaultURL())\n  end public String getDefaultURL()\n\n  public String getDefaultNick()    org.aspectj.weaver.MethodDeclarationLineNumber: 260:8793\n:\n    method-execution(java.lang.String glassbox.client.ConnectionManager.getDefaultNick())\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this   (line 261)\n    |               GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List;\n    |               ALOAD_0     // Lglassbox/client/ConnectionManager; this\n    |               GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I\n    |               INVOKEINTERFACE java.util.List.get (I)Ljava/lang/Object;\n    |               CHECKCAST glassbox.client.ConnectionManager$AgentConnection\n    |               INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname ()Ljava/lang/String;\n    |               ARETURN\n    method-execution(java.lang.String glassbox.client.ConnectionManager.getDefaultNick())\n  end public String getDefaultNick()\nend public class glassbox.client.ConnectionManager\n\nwhen implementing on shadow exception-handler(void glassbox.client.ConnectionManager.<catch>(java.lang.RuntimeException))\nwhen weaving type glassbox.client.ConnectionManager\nwhen weaving classes \nwhen weaving \nwhen batch building BuildConfig[C:\\devel\\glassbox\\.metadata\\.plugins\\org.eclipse.ajdt.core\\crankjClient.generated.lst] #Files=52"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "40cf610": {
    "bug_report": {
      "summary": "Bug 155213  [ltw] can get into a state with the Version static initializer",
      "description": "The static initializer in Version that parses the time_text string and turns it into a long field seems to sometimes get loadtime weaving into a state - touching DateFormatters early on is always a pain, so I'm moving it to be processed on first reference.  I could take it a step further ... if WeaverStateInfo didn't write out the time (it doesnt read it back in!!) it would never be used at all in normal processing - potentially saving us from loading a bunch of underpinning junk to do the formatting..."
    },
    "commit": {
      "diff": [
        "ajde/src/org/aspectj/ajde/ui/swing/OptionsFrame.java",
        "bridge/testsrc/org/aspectj/bridge/VersionTest.java",
        "weaver/src/org/aspectj/weaver/AjAttribute.java",
        "bridge/src/org/aspectj/bridge/Version.java"
      ]
    }
  },
  "11ab99f": {
    "bug_report": {
      "summary": "Bug 117681  VerifyError when using annotations to define inter-type annotation",
      "description": "Using Sun JDK1.5.0_04\n\nAudit.java\npublic interface Audit {\n   public String getLastUpdatedBy();\n   public void   setLastUpdatedBy(String un);\n}\n\nAuditImpl.java\npublic class AuditImpl implements Audit {\n   private String lastUpdatedBy;\n   public String getLastUpdatedBy() {\n       return lastUpdatedBy;\n   }\n   public void setLastUpdatedBy(String un) {\n       lastUpdatedBy = un;\n   }\n}\n\nTestAspect.java\nimport org.aspectj.lang.annotation.*;\n\nTest.java\n@Aspect\npublic class TestAspect {\n      @DeclareParents(\"Test\")\n      public static Audit introduced = new AuditImpl();\n}\npublic class Test {\n    public static void main(String[] args) {\n        Test t = new Test();\n        Audit a = (Audit)t;\n\t    a.setLastUpdatedBy(\"username\");\n\t\tSystem.out.println(\"Username =\"+a.getLastUpdatedBy());\n    }\n}\n\nfiles.lst\nAudit.java\nAuditImpl.java\nTestAspect.java\nTest.java\n\nCompiled using the following command\nd:\\aspectj1.5\\bin\\ajc -classpath \"d:\\aspectj1.5\\lib\\aspectjrt.jar\" -argfi\nle files.lst -1.5\n\nd:\\aspectj1.5\\bin\\aj5 Test\nException in thread \"main\" java.lang.VerifyError: (class: Test, method: setLastUpdatedBy signature: (Ljava/lang/String;)V) Incompatible argument to function\n\nd:\\aspectj1.5\\bin\\aj5 -noverify Test\nUsername="
    },
    "commit": {
      "diff": [
        "tests/bugs150/pr117681/Audit.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "tests/bugs150/pr117681/Test.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/pr117681/TestAspect.java",
        "tests/bugs150/pr117681/MoodIndicator.java",
        "tests/bugs150/pr117681/AuditImpl.java"
      ]
    }
  },
  "34dbb0c": {
    "bug_report": {
      "summary": "Bug 47910  ajc -outjar jarfile does not contain MANIFEST.MF",
      "description": "I call ajc -sourceroots <mydir> -outjar <my.jar> and an output file is created \nwith a .jar extension, but it is not a valid jar file because there is no \nMANIFEST.MF file. I see that the text for ajc says:\n\n-outjar <file>      put output classes in zip file <file>\n\nwhich might imply that it is supposed to be a zip file, but a parameter called -\noutjar which creates a zip file doesn't really make sense. If -outjar is used, \nthe resulting file should be a valid jar file, i.e. with a META-INF/MANIFEST.MF \nfile inside."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "ajde/testdata/JarManifestTest/src/Main.java",
        "ajde/testsrc/org/aspectj/ajde/JarManifestTest.java",
        "ajde/testsrc/org/aspectj/ajde/ResourceCopyTestCase.java",
        "ajde/testsrc/org/aspectj/ajde/InpathTestcase.java",
        "ajde/testsrc/org/aspectj/ajde/AjdeTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "d9757d7": {
    "bug_report": {
      "summary": "Bug 114005  annotated ITD fields on interfaces have no annotation",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/pr114005/Declaration2.java",
        "tests/bugs150/pr114005/Declaration1.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"
      ]
    }
  },
  "4feb835": {
    "bug_report": {
      "summary": "Bug 30439  spurious \"circular dependency\" error",
      "description": "AspectJ Compiler 1.1beta4\nThis program:\n\naspect Foo { \n  pointcut p1(): execution(void f()) && cflow(execution(void f1()));\n  pointcut p2(): execution(void f()) && cflow(execution(void f2()));\n\n  before(): p1() { }\n  after():  p1() { }\n  before(): p2() { }\n  after():  p2() { }\n}\n\nclass A {\n  void f1() { f(); }\n  void f2() { f(); }\n  void f() { }\n}\n\nresults in these errors:\n\ncircular dependency at method-execution(void A.f())\ncircular dependency at method-execution(void A.f())\ncircular dependency at method-execution(void A.f())\ncircular dependency at method-execution(void A.f())\n\n4 errors\n\nIf I comment out any one of the four pieces of advice, all the errors go away.\nAlso, assuming that there is a valid reason for printing this error sometimes, how come there's no line number?\n\n--Doug"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java",
        "weaver/src/org/aspectj/weaver/Advice.java",
        "weaver/testsrc/org/aspectj/weaver/BcweaverTests.java",
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java",
        "weaver/src/org/aspectj/weaver/NewConstructorTypeMunger.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareParents.java",
        "weaver/src/org/aspectj/weaver/patterns/TypePattern.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java",
        "weaver/src/org/aspectj/weaver/WeaverStateInfo.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "weaver/src/org/aspectj/weaver/Lint.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "weaver/testsrc/org/aspectj/weaver/WeaverMessagesTestCase.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "weaver/src/org/aspectj/weaver/Shadow.java",
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java",
        "weaver/src/org/aspectj/weaver/WeaverMessages.java",
        "weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java",
        "weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"
      ]
    }
  },
  "7a1002a": {
    "bug_report": {
      "summary": "Bug 112756  ajdt compiler generate false warnings",
      "description": "I was working on aspect that should raise an error for junit test methods that didn't\nuse any assertions. Apparently I had to use pointcut like \"call(void Assert+.assert*(..))\"\non which ajdt compiler complained about using \"assert\" keyword. I don't think such warning\nshould be shown in such case.\n\nAnyway, here is the complete aspect code.\n\n\nimport\njunit.framework.Test;\nimport junit.framework.Assert;\nimport junit.framework.AssertionFailedError;\n\n\npublic\naspect AssertionCounter {\n  private ThreadLocal counts = new ThreadLocal();\n\n  public\npointcut testMethodExecution() : \n    execution(void Test+.test*());\n\n  public pointcut\nassertCall() : \n    cflow(testMethodExecution()) && call(void Assert+.assert*(..));\n\n \n  \n  void around() : testMethodExecution() {\n    counts.set( new Counter());\n  \n proceed();\n    if(((Counter) counts.get()).getCount()==0) {\n      throw new AssertionFailedError(\"No\nassertions had been called\");\n    }\n  }\n\n  before() : assertCall() {\n    ((Counter)\ncounts.get()).inc();\n  }\n  \n}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "b0d32ca": {
    "bug_report": {
      "summary": "Bug 57436  Java 1.5 fails to run classes produced by ajc",
      "description": "Java 1.5 beta reports a ClassFormatError when running programs (e.g., spacewar)\ncompiled by ajc 1.1.1 and the latest CVS head.  Sun's Java 1.5 beta\nbinary-compatibility docs say that some obfuscators violated the .class format\nspecification, so those .class files will fail when run under 1.5.  (The docs\nalso say they are still incomplete.)  \n\nAlthough 1.5 is still beta, we would want to submit a bug to Sun if our\nimplementation techniques are valid, so we don't have to change those\ntechniques.  For 1.2, we should at document if we don't fix, since many people\nare using 1.5."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java"
      ]
    }
  },
  "8e6cef0": {
    "bug_report": {
      "summary": "Bug 30026  NullPointerException when compiling",
      "description": "With the following program I get a NullPointerException during compiling and a\nwarning that the source code of Object is not available for weaving:\n\npublic class NullPtr {\n    public static void main(String args[]) {\n        NullPtr np = new NullPtr();\n        np = null;\n    }\n\n    public void finalize() throws Throwable {\n    }\n}\n\naspect FinalizeContract {\n    pointcut finalizeCall(Object o):\n        this(Object+) &&\n        this(o) &&\n        execution(void finalize());\n\n    void around(Object o) throws Throwable: finalizeCall(o) {\n        o.finalize();               // error\n        ((NullPtr) o).finalize();   // ok\n        proceed(o);\n    }\n}\n\nIt works if I comment out the line indicated by the // error comment or if I\ndeclare the aspect as privileged."
    },
    "commit": {
      "diff": [
        "tests/bugs/Finalizer.java"
      ]
    }
  },
  "0b39aa5": {
    "bug_report": {
      "summary": "Bug 119882  BCException when deleting a java-source-file",
      "description": "org.aspectj.weaver.BCException\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1087)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nBCException thrown: Can't find bcel delegate for training.casino.Konto type=class org.aspectj.weaver.ReferenceType\nwhen weaving classes \nwhen weaving \nwhen incrementally building BuildConfig[C:\\Documents and Settings\\mheidt\\workspace 3.1.1\\.metadata\\.plugins\\org.eclipse.ajdt.core\\AspJTraining.generated.lst] #Files=11\n\ndeleted  a java-source-file before (but not the class-file), possibly pointed by a LogAspect. Created a new source file. Error occurs after saving the new file."
    },
    "commit": {
      "diff": [
        "tests/multiIncremental/PR119882/base/src/pack/C1.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "tests/multiIncremental/PR119882/inc1/src/pack/C1.java",
        "tests/multiIncremental/PR119882/base/src/pack/C2.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"
      ]
    }
  },
  "a8739e3": {
    "bug_report": {
      "summary": "Bug 231467  Cant Compile new Statement for the Generic Class",
      "description": "[aspectj:iajc] error at (no source information available)\n[aspectj:iajc] C:\\Development\\PI\\JavaSrc\\com\\centricsoftware\\pi\\service\\expression\\FuncNewMatrix.java:0::0 Internal compiler error\n[aspectj:iajc] java.lang.ArrayIndexOutOfBoundsException: 1\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.getMemberParameterizationMap(ResolvedType.java:744)\n[aspectj:iajc] \tat org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:411)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:68)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1206)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1185)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1255)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:646)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:522)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1105)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:599)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:276)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:113)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:49)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:99)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType(BinaryTypeBinding.java:755)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType(Scope.java:986)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getMemberType(Scope.java:2116)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.findNextTypeBinding(QualifiedTypeReference.java:43)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:77)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:142)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:258)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:196)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:433)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:196)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:404)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1109)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1188)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:366)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:625)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:990)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:264)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:180)\n[aspectj:iajc] \tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n[aspectj:iajc] \tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n[aspectj:iajc] \tat org.aspectj.tools.ajc.Main.run(Main.java:378)\n[aspectj:iajc] \tat org.aspectj.tools.ajc.Main.runMain(Main.java:253)\n[aspectj:iajc] \tat org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1303)\n[aspectj:iajc] \tat org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1101)\n[aspectj:iajc] \tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n[aspectj:iajc] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[aspectj:iajc] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n[aspectj:iajc] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[aspectj:iajc] \tat java.lang.reflect.Method.invoke(Method.java:585)\n[aspectj:iajc] \tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n[aspectj:iajc] \tat org.apache.tools.ant.Task.perform(Task.java:348)\n[aspectj:iajc] \tat org.apache.tools.ant.Target.execute(Target.java:357)\n[aspectj:iajc] \tat org.apache.tools.ant.Target.performTasks(Target.java:385)\n[aspectj:iajc] \tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n[aspectj:iajc] \tat org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n[aspectj:iajc] \tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n[aspectj:iajc] \tat org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:32)\n[aspectj:iajc] \tat org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n[aspectj:iajc] \tat org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run(InternalAntRunner.java:423)\n[aspectj:iajc] \tat org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main(InternalAntRunner.java:137)\n[aspectj:iajc] abort ABORT -- (ArrayIndexOutOfBoundsException) 1\n[aspectj:iajc] 1\n[aspectj:iajc] java.lang.ArrayIndexOutOfBoundsException: 1\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.getMemberParameterizationMap(ResolvedType.java:744)\n[aspectj:iajc] \tat org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:411)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:68)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1206)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1185)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1255)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:646)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:522)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1105)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:599)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:276)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:113)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:49)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:99)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType(BinaryTypeBinding.java:755)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType(Scope.java:986)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getMemberType(Scope.java:2116)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.findNextTypeBinding(QualifiedTypeReference.java:43)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:77)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:142)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:258)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:196)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:433)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:196)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:404)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1109)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1188)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:366)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:625)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:990)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:264)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:180)\n[aspectj:iajc] \tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n[aspectj:iajc] \tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n[aspectj:iajc] \tat org.aspectj.tools.ajc.Main.run(Main.java:378)\n[aspectj:iajc] \tat org.aspectj.tools.ajc.Main.runMain(Main.java:253)\n[aspectj:iajc] \tat org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1303)\n[aspectj:iajc] \tat org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1101)\n[aspectj:iajc] \tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n[aspectj:iajc] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[aspectj:iajc] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n[aspectj:iajc] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[aspectj:iajc] \tat java.lang.reflect.Method.invoke(Method.java:585)\n[aspectj:iajc] \tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n[aspectj:iajc] \tat org.apache.tools.ant.Task.perform(Task.java:348)\n[aspectj:iajc] \tat org.apache.tools.ant.Target.execute(Target.java:357)\n[aspectj:iajc] \tat org.apache.tools.ant.Target.performTasks(Target.java:385)\n[aspectj:iajc] \tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n[aspectj:iajc] \tat org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n[aspectj:iajc] \tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n[aspectj:iajc] \tat org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:32)\n[aspectj:iajc] \tat org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n[aspectj:iajc] \tat org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run(InternalAntRunner.java:423)\n[aspectj:iajc] \tat org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main(InternalAntRunner.java:137)\n[aspectj:iajc] May 11, 2008 9:35:06 AM org.aspectj.weaver.tools.Jdk14Trace info\n[aspectj:iajc] INFO: Dumping to C:\\Development\\PI\\Projects\\PI-ServiceCommon\\.\\ajcore.20080511.093506.214.txt\n[aspectj:iajc] MessageHolder:  (92 info)  (1 error)  (1 abort) \n[aspectj:iajc] [error   0]: error at (no source information available)\n[aspectj:iajc] C:\\Development\\PI\\JavaSrc\\com\\centricsoftware\\pi\\service\\expression\\FuncNewMatrix.java:0::0 Internal compiler error\n[aspectj:iajc] java.lang.ArrayIndexOutOfBoundsException: 1\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.getMemberParameterizationMap(ResolvedType.java:744)\n[aspectj:iajc] \tat org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:411)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:68)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1206)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1211)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1185)\n[aspectj:iajc] \tat org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1255)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:646)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:522)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1105)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:599)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:276)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:113)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:49)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:99)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType(BinaryTypeBinding.java:755)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType(Scope.java:986)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getMemberType(Scope.java:2116)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.findNextTypeBinding(QualifiedTypeReference.java:43)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:77)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:142)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:258)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:196)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:433)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:196)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:404)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1109)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1188)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:366)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:625)\n[aspectj:iajc] \tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:990)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:264)\n[aspectj:iajc] \tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:180)\n[aspectj:iajc] \tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n[aspectj:iajc] \tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n[aspectj:iajc] \tat org.aspectj.tools.ajc.Main.run(Main.java:378)\n[aspectj:iajc] \tat org.aspectj.tools.ajc.Main.runMain(Main.java:253)\n[aspectj:iajc] \tat org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1303)\n[aspectj:iajc] \tat org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1101)\n[aspectj:iajc] \tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n[aspectj:iajc] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[aspectj:iajc] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n[aspectj:iajc] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[aspectj:iajc] \tat java.lang.reflect.Method.invoke(Method.java:585)\n[aspectj:iajc] \tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n[aspectj:iajc] \tat org.apache.tools.ant.Task.perform(Task.java:348)\n[aspectj:iajc] \tat org.apache.tools.ant.Target.execute(Target.java:357)\n[aspectj:iajc] \tat org.apache.tools.ant.Target.performTasks(Target.java:385)\n[aspectj:iajc] \tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n[aspectj:iajc] \tat org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n[aspectj:iajc] \tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n[aspectj:iajc] \tat org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets(EclipseDefaultExecutor.java:32)\n[aspectj:iajc] \tat org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n[aspectj:iajc] \tat org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run(InternalAntRunner.java:423)\n[aspectj:iajc] \tat org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main(InternalAntRunner.java:137)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/TypeFactory.java"
      ]
    }
  },
  "2d21db0": {
    "bug_report": {
      "summary": "Bug 108886  Getting Exception during compilation :  java.lang.RuntimeException: Internal Compiler Error: Unexpected null source location passed as 'see also' location.",
      "description": "Am attaching a small test case to reproduce the error \n(Not sure how to attach it - hopefully should be feasible to do so after I log\nthe bug)."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "weaver/src/org/aspectj/weaver/ResolvedType.java"
      ]
    }
  },
  "5f6a6b1": {
    "bug_report": {
      "summary": "Bug 141956  Null Pointer Exception when trying to skip Parent Mungers.",
      "description": "I don't know much about the internal workings of aspectJ but this bug keeps popping up so I went through the trouble of checking of trying to debug it so that I could hopefully provide enough information to get it fixed.\n\nThis happens while using eclipse AJDT. It never happens if I fully do a clean before rebuild. It only seems to happen when doing incrmental builds (using  the project->build automatically setting). \n\nThe error happens in the iterator that recursively builds a list of methods\nto return for matching. The error is triggered here:\n\n\n    // we need to know if it is an interface from Parent kind munger\n            // as those are used for @AJ ITD and we precisely want to skip those\n            boolean shouldSkip = false;\n            for (int j = 0; j < rtx.interTypeMungers.size(); j++) {\n                ConcreteTypeMunger munger = (ConcreteTypeMunger) rtx.interTypeMungers.get(j);\n                if (munger.getMunger().getKind() == ResolvedTypeMunger.Parent) {\n                    shouldSkip = true;\n                    break;\n                }\n            }\n\nmunger.getMunger() returns null because the munger instance is a BcelPerClauseAspectAdder. My naive fix would be to check munger.getMunger() == null or check munger.getKind(). I'm assuming that BcelPerClausAspectAdder is one that should be skipped since it is related to @AJ ??? \n\nAgain, I don't know very much about the internal architecture of the weaver magic so I hope this is enough information. \n\nI would appreciate it if someone who knows more of the internals could speculate as to why this bug would never pop up on a clean build but only on incremental builds? Also it's not on all incremental builds and I haven't been able to isolate what kind of changes or compiles it triggers this, although it seems that  once I got the exception once, I keep getting it on every build until I do a clean. \n\njava.lang.NullPointerException\nat org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:288)\nat org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator(ResolvedType.java:257)\nat org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:378)\nat org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:178)\nat org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:69)\nat org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:287)\nat org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:103)\nat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:144)\nat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:51)\nat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:144)\nat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64)\nat org.aspectj.weaver.Advice.match(Advice.java:109)\nat org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:104)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2210)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1752)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:479)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:321)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:192)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:269)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/ResolvedType.java",
        "tests/multiIncremental/PR141956/base/C.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "tests/multiIncremental/PR141956/base/A.java",
        "tests/multiIncremental/PR141956/inc1/C.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"
      ]
    }
  },
  "426cbdc": {
    "bug_report": {
      "summary": "Bug 148007  boolean methods with after advice return incorrect result on JRockit under WLS",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "tests/bugs152/pr148007/purejava/test/LoggingAspect.java",
        "tests/bugs152/pr148007/test/TestServlet.java",
        "tests/bugs152/pr148007/purejava/test/BooleanUnitTest.java",
        "tests/bugs152/pr148007/test/BooleanUnitTest.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java",
        "weaver/src/org/aspectj/weaver/bcel/Utility.java"
      ]
    }
  },
  "01a8b2e": {
    "bug_report": {
      "summary": "Bug 124808  [generics] detecting field-get of field of parameterized type.",
      "description": "Hi,\n\nHere is the second generics issue:\n\nJava code:\n==========\n\npublic class Test<T extends Integer> {\n\tSet<T> ints = new HashSet<T>();\n\n\tpublic Set<T> foo() {\n\t\treturn ints;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tTest<Integer> t = new Test<Integer>();\n\t\tSet<Integer> ints = t.foo();\n\t}\n}\n\nAspect:\n=======\npublic privileged aspect TestAspect {\n\n    pointcut gettingMemberCollection(Test t) :\n                   target(t) &&\n                   get(!public Set<Number+> com.mprv.secsph.*.*) &&\n                   !within(TestAspect);\n\n\tafter (Test test) : gettingMemberCollection(test) {\n\t\tSystem.out.println(\"GO Aspects!\");\n\t}\n}\n\nCompiler output:\n================\nwarning at after (Test test) : gettingMemberCollection(test) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/IdeaProjects/aspectsTest/src/com/mprv/secsph/TestAspect.aj:19:0::0 advice defined in com.mprv.secsph.TestAspect has not been applied [Xlint:adviceDidNotMatch]\n\n\nI would expect \"gettingMemberCollection\" to catch access to \"ints\" member of \"Test\" ...\n\nThanks a lot!\nMisha."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/TypePattern.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java",
        "tests/bugs151/pr124808/Test.java",
        "tests/bugs151/pr124808/TestAspect.java"
      ]
    }
  },
  "f747b82": {
    "bug_report": {
      "summary": "Bug 84260  import static fails when importing a method",
      "description": "I got the following error:\n==============================================\nMyClass2.java:3 [error] The import MyClass.myMethod cannot be resolved\nimport static MyClass.myMethod;\n==============================================\n\nother import static statements (Strings/Enums) appear to work."
    },
    "commit": {
      "diff": [
        "tests/bugs150/pr84260/I2.java",
        "tests/bugs150/pr84260/I1.java",
        "tests/bugs150/pr84260/A.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "451fea8": {
    "bug_report": {
      "summary": "Bug 108117  Complete implementation of abstract generic aspects",
      "description": "this requires\n1/ completion of the parameterizeWith implementation in the pointcut AST nodes\n2/ a much more exhaustive test suite around it."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/Pointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/TypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java",
        "weaver/src/org/aspectj/weaver/patterns/PerCflow.java",
        "weaver/src/org/aspectj/weaver/patterns/PerObject.java",
        "weaver/src/org/aspectj/weaver/patterns/PerSingleton.java",
        "weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java",
        "weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java",
        "weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java"
      ]
    }
  },
  "ad753aa": {
    "bug_report": {
      "summary": "Bug 108062  NPE when opening resources from CVS resources history",
      "description": "NPE when opening resources (double-click) from CVS resources history view.\n\njava.lang.NullPointerException\n\tat\norg.eclipse.mylar.java.ui.editor.MylarJavaElementDescriptor.drawCompositeImage(MylarJavaElementDescriptor.java:40)\n\tat\norg.eclipse.jface.resource.CompositeImageDescriptor.getImageData(CompositeImageDescriptor.java:205)\n\tat\norg.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:279)\n\tat\norg.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:233)\n\tat\norg.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:211)\n\tat\norg.eclipse.mylar.ui.MylarImages.getImage(MylarImages.java:108)\n\tat org.eclipse.mylar.java.ui.editor.MylarCompilationUnitEditor.updatedTitleImage(MylarCompilationUnitEditor.java:55)\n\tat\norg.eclipse.jdt.internal.ui.javaeditor.JavaEditorErrorTickUpdater$1.run(JavaEditorErrorTickUpdater.java:86)\n\tat\norg.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:152)\n\tat org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:28)\n\tat\norg.eclipse.swt.widgets.Display.syncExec(Display.java:3413)\n\tat org.eclipse.jdt.internal.ui.javaeditor.JavaEditorErrorTickUpdater.postImageChange(JavaEditorErrorTickUpdater.java:84)\n\tat\norg.eclipse.jdt.internal.ui.javaeditor.JavaEditorErrorTickUpdater.updateEditorImage(JavaEditorErrorTickUpdater.java:77)\n\tat\norg.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSetInput(CompilationUnitEditor.java:1548)\n\tat\norg.eclipse.ui.texteditor.AbstractTextEditor$16.run(AbstractTextEditor.java:2360)\n\tat\norg.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:346)\n\tat\norg.eclipse.jface.operation.ModalContext.run(ModalContext.java:291)\n\tat org.eclipse.jface.window.ApplicationWindow$1.run(ApplicationWindow.java:624)\n\tat\norg.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)\n\tat org.eclipse.jface.window.ApplicationWindow.run(ApplicationWindow.java:621)\n\tat\norg.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2135)\n\tat\norg.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:2378)\n\tat\norg.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:2405)\n\tat\norg.eclipse.ui.internal.EditorManager.createSite(EditorManager.java:773)\n\tat\norg.eclipse.ui.internal.EditorReference.createPartHelper(EditorReference.java:572)\n\tat\norg.eclipse.ui.internal.EditorReference.createPart(EditorReference.java:365)\n\tat\norg.eclipse.ui.internal.WorkbenchPartReference.getPart(WorkbenchPartReference.java:552)\n\tat\norg.eclipse.ui.internal.EditorReference.getEditor(EditorReference.java:214)\n\tat\norg.eclipse.ui.internal.WorkbenchPage.busyOpenEditorBatched(WorkbenchPage.java:2325)\n\tat\norg.eclipse.ui.internal.WorkbenchPage.busyOpenEditor(WorkbenchPage.java:2258)\n\tat\norg.eclipse.ui.internal.WorkbenchPage.access$9(WorkbenchPage.java:2250)\n\tat\norg.eclipse.ui.internal.WorkbenchPage$9.run(WorkbenchPage.java:2236)\n\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)\n\tat\norg.eclipse.ui.internal.WorkbenchPage.openEditor(WorkbenchPage.java:2231)\n\tat\norg.eclipse.ui.internal.WorkbenchPage.openEditor(WorkbenchPage.java:2204)\n\tat\norg.eclipse.team.internal.ccvs.ui.actions.OpenLogEntryAction$1.run(OpenLogEntryAction.java:85)\n\tat\norg.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.run(RepositoryManager.java:651)\n\tat\norg.eclipse.team.internal.ccvs.ui.actions.CVSAction$2.run(CVSAction.java:347)\n\tat\norg.eclipse.team.internal.ccvs.ui.actions.CVSAction$3.run(CVSAction.java:356)\n\tat\norg.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)\n\tat org.eclipse.team.internal.ccvs.ui.actions.CVSAction.run(CVSAction.java:353)\n\tat\norg.eclipse.team.internal.ccvs.ui.actions.OpenLogEntryAction.execute(OpenLogEntryAction.java:64)\n\tat\norg.eclipse.team.internal.ccvs.ui.actions.CVSAction.run(CVSAction.java:117)\n\tat\norg.eclipse.team.internal.ccvs.ui.HistoryView$6.handleEvent(HistoryView.java:199)\n\tat\norg.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:843)\n\tat\norg.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3080)\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2713)\n\tat\norg.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1699)\n\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1663)\n\tat\norg.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:367)\n\tat\norg.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)\n\tat org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)\n\tat\norg.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:226)\n\tat\norg.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:376)\n\tat\norg.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:163)\n\tat\nsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat\njava.lang.reflect.Method.invoke(Method.java:585)\n\tat org.eclipse.core.launcher.Main.invokeFramework(Main.java:334)\n\tat\norg.eclipse.core.launcher.Main.basicRun(Main.java:278)\n\tat org.eclipse.core.launcher.Main.run(Main.java:973)\n\tat\norg.eclipse.core.launcher.Main.main(Main.java:948)"
    },
    "commit": {
      "diff": [
        "bcel-builder/src/org/aspectj/apache/bcel/classfile/GenericSignatureParser.java",
        "tests/bugs150/pr108602.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "d7d5947": {
    "bug_report": {
      "summary": "Bug 113118  ClassFormatException with tracing aspect",
      "description": "Build id: 20051017111807\nAspectJ version: 1.5.0.200510141300\n\nThe following aspect resulted in the CFE:\n\npublic aspect CallTrace {\n\t/**\n\t * A marker interface used to pick the classes to trace. Declare any class you\nwant to\n\t * trace to implement this interface. The best way is using an aspect like the\none in\n\t * the class comment block above.\n\t */\n\tpublic static interface Traced {}\n\t\n\t/**\n\t * A marker annoation, can be used instead of {@link Traced}.\n\t */\n\t@Documented\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})\n\tpublic @interface TracedAnno {}\n\t\n\tprivate static Level level = Level.INFO;\n\t\n\t/**\n\t * Set the global logging level used for reporting traced calls. Defaults to INFO.\n\t * @param newLevel\n\t */\n\tpublic static void setLevel (Level newLevel) {\n\t\tlevel = newLevel;\n\t}\n\t\n\t/**\n\t * @return the Level used for writing traced output.\n\t */\n\tpublic static Level getLevel () {\n\t\treturn level;\n\t}\n\t\n\tprivate static Logger log = Logger.getLogger(Traced.class);\n\tprivate int nesting = 0;\n\tprivate static StringBuffer prefixStr = null;\n\tstatic {\n\t\tnew StringBuffer(1024);\n\t\tfor (int i=0; i<128; i++) { // stuff with \"+\".\n\t\t\tprefixStr.append(\"++++++++\"); \n\t\t}\n\t}\n\tpublic pointcut exclusions(): within(CallTrace) || within(*Tracer);\n\t\n\t// Distinguish between initialization JPs and other method calls, to work\n\t// around AJ limitation that around advice isn't supported for initializations.\n\t\n\tpublic pointcut traceIntfInit(): initialization(Traced+.new(..));\n\tpublic pointcut traceIntf(): call(* Traced+.*(..));\n\t\n\tpublic pointcut traceAnnoInit(): \n\t\tinitialization(com.adteractive..*.new(..)) && @target(TracedAnno);\n\tpublic pointcut traceAnno(): \n\t\t call(* com.adteractive..*.*(..)) && @target(TracedAnno);\n\n\tpublic pointcut traceInit(): !exclusions() && (traceIntfInit() || traceAnnoInit());\n\tpublic pointcut trace(): !exclusions() && (traceIntf() || traceAnno());\n\t\n\tbefore(): traceInit() {\n\t\tnesting++;\n\t\tString pre = prefixStr.substring(0,nesting);\n\t\tlog.log (level, pre+\"> \"+thisJoinPointStaticPart);\n\t}\n\t\n\tafter(): traceInit() {\n\t\tString pre = prefixStr.substring(0,nesting);\n\t\tlog.log (level, pre+\"< \"+thisJoinPointStaticPart);\n\t\tnesting--;\n\t}\n\t\n\tObject around(): trace() {\n\t\tnesting++;\n\t\tString pre = prefixStr.substring(0,nesting);\n\t\tlog.log (level, pre+\"> \"+thisJoinPointStaticPart);\n\t\tObject result = proceed();\n\t\tlog.log (level, pre+\"< \"+thisJoinPointStaticPart);\n\t\tnesting--;\n\t\treturn result;\n\t}\n}\n\nA separate aspect is used to \"declare parent\" or \"declare @type\" either the\nmarker interface or annotation, thereby adding tracing to the user-specified\nclasses. E.g.,\n\npublic aspect CallTraceTestTracer {\n//\tdeclare @type:   com.me.foo..*: @CallTrace.TracedAnno;\n\tdeclare parents: com.me.foo..* implements CallTrace.Traced;\n}\n\nThe exception wasn't thrown in a previous version when I used just before advice\nfor both the \"trace\" and \"traceInit\" pointcuts. \n\norg.aspectj.apache.bcel.classfile.ClassFormatException\nat org.aspectj.apache.bcel.classfile.Utility.typeOfSignature(Utility.java:1293)\nat org.aspectj.apache.bcel.generic.Type.getTypeInternal(Type.java:166)\nat org.aspectj.apache.bcel.generic.Type.getTypeInternal(Type.java:174)\nat org.aspectj.apache.bcel.generic.Type.getType(Type.java:155)\nat org.aspectj.weaver.bcel.BcelWorld.makeBcelType(BcelWorld.java:198)\nat org.aspectj.weaver.bcel.BcelShadow.createMethodGen(BcelShadow.java:2999)\nat org.aspectj.weaver.bcel.BcelShadow.extractMethod(BcelShadow.java:2826)\nat org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:2020)\nat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:211)\nat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:514)\nat org.aspectj.weaver.Shadow.implement(Shadow.java:391)\nat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:1781)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:394)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:98)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1464)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1429)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1203)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1039)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\nat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat\norg.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.a\n\njdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:759)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:249)\nat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:158)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic class com.adteractive.framework.test.ConditionTestFilterTest extends\njunit.framework.TestCase:\n  com.adteractive.framework.ConditionTestFilter ctf\n[Signature(Lcom/adteractive/framework/ConditionTestFilter<Lcom/adteractive/framework/test/InputStub;Lcom/adteractive/framework/test/OutputStub;>;)]\n  static Class class$0\n  private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0\n  public void <init>():\n                    ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 16)\n                    INVOKESPECIAL junit.framework.TestCase.<init> ()V\n    constructor-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.<init>())\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 17)\n    |               ACONST_NULL\n    |               PUTFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               RETURN   (line 16)\n    constructor-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.<init>())\n  end public void <init>()\n\n  protected void setUp() throws java.lang.Exception   \norg.aspectj.weaver.MethodDeclarationLineNumber: 23:543\n:\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.setUp())\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 24)\n    |               INVOKESPECIAL junit.framework.TestCase.setUp ()V\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 25)\n    |               NEW com.adteractive.framework.test.ConditionTestFilterStub\n    |               DUP\n    |               LDC \"ctf\"\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this\n    |               ASTORE_1\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches())\n    | |             ALOAD_1\n    | |             INVOKESPECIAL\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches())\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.ConditionTestFilterStub.<init>\n(Ljava/lang/String;[Lcom/adteractive/framework/Filter;)V\n    |               PUTFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               RETURN   (line 26)\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.setUp())\n  end protected void setUp() throws java.lang.Exception\n\n  public void testExecute()    org.aspectj.weaver.MethodDeclarationLineNumber:\n31:754\n:\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testExecute())\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 32)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               NEW com.adteractive.framework.test.InputStub\n    |               DUP\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.InputStub.<init> ()V\n    | method-call(com.adteractive.framework.Output\ncom.adteractive.framework.ConditionTestFilter.execute(com.adteractive.framework.Input))\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.execute\n(Lcom/adteractive/framework/Input;)Lcom/adteractive/framework/Output;\n    | method-call(com.adteractive.framework.Output\ncom.adteractive.framework.ConditionTestFilter.execute(com.adteractive.framework.Input))\n    |               CHECKCAST com.adteractive.framework.test.OutputStub\n    |               ASTORE_1\n    |               LDC \"bf12\"   (line 33)\n    |               ALOAD_1     // com.adteractive.framework.test.OutputStub output\n    | method-call(com.adteractive.framework.Status\ncom.adteractive.framework.test.OutputStub.getStatus())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.test.OutputStub.getStatus\n()Lcom/adteractive/framework/Status;\n    | method-call(com.adteractive.framework.Status\ncom.adteractive.framework.test.OutputStub.getStatus())\n    | method-call(java.lang.String\ncom.adteractive.framework.Status.getAdditionalMessage())\n    | |             INVOKEINTERFACE\ncom.adteractive.framework.Status.getAdditionalMessage ()Ljava/lang/String;\n    | method-call(java.lang.String\ncom.adteractive.framework.Status.getAdditionalMessage())\n    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,\njava.lang.String))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertEquals\n(Ljava/lang/String;Ljava/lang/String;)V\n    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,\njava.lang.String))\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 34)\n    |               NEW com.adteractive.framework.test.ConditionTestFilterStub\n    |               DUP\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.ConditionTestFilterStub.<init> ()V\n    |               PUTFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 35)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               NEW com.adteractive.framework.test.InputStub\n    |               DUP\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.InputStub.<init> ()V\n    | method-call(com.adteractive.framework.Output\ncom.adteractive.framework.ConditionTestFilter.execute(com.adteractive.framework.Input))\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.execute\n(Lcom/adteractive/framework/Input;)Lcom/adteractive/framework/Output;\n    | method-call(com.adteractive.framework.Output\ncom.adteractive.framework.ConditionTestFilter.execute(com.adteractive.framework.Input))\n    |               CHECKCAST com.adteractive.framework.test.OutputStub\n    |               ASTORE_1     // com.adteractive.framework.test.OutputStub output\n    |               ALOAD_1     // com.adteractive.framework.test.OutputStub\noutput   (line 36)\n    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertNotNull\n(Ljava/lang/Object;)V\n    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))\n    |               RETURN   (line 37)\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testExecute())\n  end public void testExecute()\n\n  public void testGetFilterBranches()   \norg.aspectj.weaver.MethodDeclarationLineNumber: 42:1111\n:\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testGetFilterBranches())\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 43)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertNotNull\n(Ljava/lang/Object;)V\n    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))\n    |               ICONST_3   (line 44)\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    |               ARRAYLENGTH\n    | method-call(void junit.framework.Assert.assertEquals(int, int))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertEquals (II)V\n    | method-call(void junit.framework.Assert.assertEquals(int, int))\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 45)\n    |               NEW com.adteractive.framework.test.ConditionTestFilterStub\n    |               DUP\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.ConditionTestFilterStub.<init> ()V\n    |               PUTFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 46)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertNull\n(Ljava/lang/Object;)V\n    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))\n    |               RETURN   (line 47)\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testGetFilterBranches())\n  end public void testGetFilterBranches()\n\n  public void testSetFilterBranches()   \norg.aspectj.weaver.MethodDeclarationLineNumber: 52:1441\n:\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testSetFilterBranches())\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 53)\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches())\n    | |             INVOKESPECIAL\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches())\n    |               ASTORE_1\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 54)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               ALOAD_1     // com.adteractive.framework.Filter[] branches\n    | method-call(void\ncom.adteractive.framework.ConditionTestFilter.setFilterBranches(com.adteractive.framework.Filter[]))\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.setFilterBranches\n([Lcom/adteractive/framework/Filter;)V\n    | method-call(void\ncom.adteractive.framework.ConditionTestFilter.setFilterBranches(com.adteractive.framework.Filter[]))\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 55)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertNotNull\n(Ljava/lang/Object;)V\n    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))\n    |               ICONST_3   (line 56)\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    |               ARRAYLENGTH\n    | method-call(void junit.framework.Assert.assertEquals(int, int))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertEquals (II)V\n    | method-call(void junit.framework.Assert.assertEquals(int, int))\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 57)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               ACONST_NULL\n    | method-call(void\ncom.adteractive.framework.ConditionTestFilter.setFilterBranches(com.adteractive.framework.Filter[]))\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.setFilterBranches\n([Lcom/adteractive/framework/Filter;)V\n    | method-call(void\ncom.adteractive.framework.ConditionTestFilter.setFilterBranches(com.adteractive.framework.Filter[]))\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 58)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertNull\n(Ljava/lang/Object;)V\n    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))\n    |               RETURN   (line 59)\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testSetFilterBranches())\n  end public void testSetFilterBranches()\n\n  public void testConditionTestFilter()   \norg.aspectj.weaver.MethodDeclarationLineNumber: 64:1847\n:\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilter())\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 65)\n    |               NEW com.adteractive.framework.test.ConditionTestFilterStub\n    |               DUP\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.ConditionTestFilterStub.<init> ()V\n    |               PUTFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 66)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertNull\n(Ljava/lang/Object;)V\n    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))\n    |               LDC com.adteractive.framework.test.ConditionTestFilterStub \n (line 67)\n    | method-call(java.lang.String java.lang.Class.getSimpleName())\n    | |             INVOKEVIRTUAL java.lang.Class.getSimpleName ()Ljava/lang/String;\n    | method-call(java.lang.String java.lang.Class.getSimpleName())\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())\n    | |             INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName\n()Ljava/lang/String;\n    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())\n    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,\njava.lang.String))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertEquals\n(Ljava/lang/String;Ljava/lang/String;)V\n    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,\njava.lang.String))\n    |               RETURN   (line 68)\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilter())\n  end public void testConditionTestFilter()\n\n  public void testConditionTestFilterString()   \norg.aspectj.weaver.MethodDeclarationLineNumber: 73:2158\n:\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterString())\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 74)\n    |               NEW com.adteractive.framework.test.ConditionTestFilterStub\n    |               DUP\n    |               LDC \"foo\"\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.ConditionTestFilterStub.<init> (Ljava/lang/String;)V\n    |               PUTFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 75)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertNull\n(Ljava/lang/Object;)V\n    | method-call(void junit.framework.Assert.assertNull(java.lang.Object))\n    |               LDC \"foo\"   (line 76)\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())\n    | |             INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName\n()Ljava/lang/String;\n    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())\n    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,\njava.lang.String))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertEquals\n(Ljava/lang/String;Ljava/lang/String;)V\n    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,\njava.lang.String))\n    |               RETURN   (line 77)\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterString())\n  end public void testConditionTestFilterString()\n\n  public void testConditionTestFilterStringFilterOfIOArray()   \norg.aspectj.weaver.MethodDeclarationLineNumber: 82:2456\n:\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterStringFilterOfIOArray())\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 83)\n    |               NEW com.adteractive.framework.test.ConditionTestFilterStub\n    |               DUP\n    |               LDC \"foo\"\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches())\n    | |             INVOKESPECIAL\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches())\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.ConditionTestFilterStub.<init>\n(Ljava/lang/String;[Lcom/adteractive/framework/Filter;)V\n    |               PUTFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this   (line 84)\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertNotNull\n(Ljava/lang/Object;)V\n    | method-call(void junit.framework.Assert.assertNotNull(java.lang.Object))\n    |               ICONST_3   (line 85)\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    | |             INVOKEVIRTUAL\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches\n()[Lcom/adteractive/framework/Filter;\n    | method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.ConditionTestFilter.getFilterBranches())\n    |               ARRAYLENGTH\n    | method-call(void junit.framework.Assert.assertEquals(int, int))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertEquals (II)V\n    | method-call(void junit.framework.Assert.assertEquals(int, int))\n    |               LDC \"foo\"   (line 86)\n    |               ALOAD_0     //\ncom.adteractive.framework.test.ConditionTestFilterTest this\n    |               GETFIELD\ncom.adteractive.framework.test.ConditionTestFilterTest.ctf\nLcom/adteractive/framework/ConditionTestFilter;\n    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())\n    | |             INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName\n()Ljava/lang/String;\n    | method-call(java.lang.String com.adteractive.framework.FilterHelper.getName())\n    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,\njava.lang.String))\n    | |             INVOKESTATIC\ncom.adteractive.framework.test.ConditionTestFilterTest.assertEquals\n(Ljava/lang/String;Ljava/lang/String;)V\n    | method-call(void junit.framework.Assert.assertEquals(java.lang.String,\njava.lang.String))\n    |               RETURN   (line 87)\n    method-execution(void\ncom.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterStringFilterOfIOArray())\n  end public void testConditionTestFilterStringFilterOfIOArray()\n\n  private com.adteractive.framework.Filter[] makeBranches()   \norg.aspectj.weaver.MethodDeclarationLineNumber: 89:2749\n:\n    method-execution(com.adteractive.framework.Filter[]\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches())\n    |               ICONST_3   (line 90)\n    |               ANEWARRAY com.adteractive.framework.test.FilterHelperStub\n    |               ASTORE_1\n    |               ALOAD_1     // com.adteractive.framework.Filter[] branches \n (line 91)\n    |               ICONST_0\n    |               NEW com.adteractive.framework.test.FilterHelperStub\n    |               DUP\n    |               LDC \"bf1\"\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.FilterHelperStub.<init> (Ljava/lang/String;)V\n    |               AASTORE\n    |               ALOAD_1     // com.adteractive.framework.Filter[] branches \n (line 92)\n    |               ICONST_1\n    |               NEW com.adteractive.framework.test.FilterHelperStub\n    |               DUP\n    |               LDC \"bf12\"\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.FilterHelperStub.<init> (Ljava/lang/String;)V\n    |               AASTORE\n    |               ALOAD_1     // com.adteractive.framework.Filter[] branches \n (line 93)\n    |               ICONST_2\n    |               NEW com.adteractive.framework.test.FilterHelperStub\n    |               DUP\n    |               LDC \"bf\"\n    |               INVOKESPECIAL\ncom.adteractive.framework.test.FilterHelperStub.<init> (Ljava/lang/String;)V\n    |               AASTORE\n    |               ALOAD_1     // com.adteractive.framework.Filter[] branches \n (line 94)\n    |               ARETURN\n    method-execution(com.adteractive.framework.Filter[]\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches())\n  end private com.adteractive.framework.Filter[] makeBranches()\n\nend public class com.adteractive.framework.test.ConditionTestFilterTest\n\nwhen implementing on shadow method-call(com.adteractive.framework.Filter[]\ncom.adteractive.framework.test.ConditionTestFilterTest.makeBranches())\nwhen weaving type com.adteractive.framework.test.ConditionTestFilterTest\nwhen weaving classes \nwhen weaving \nwhen incrementally building\nBuildConfig[C:\\cygwin\\home\\dwampler\\work\\workspace\\.metadata\\.plugins\\org.eclipse.ajdt.core\\adserver-service.generated.lst]\n#Files=259"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java"
      ]
    }
  },
  "d524403": {
    "bug_report": {
      "summary": "Bug 399408  NPE in ExactAnnotationTypePattern.matches",
      "description": "[ERROR] java.lang.NullPointerException\n[ERROR] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:137)\n[ERROR] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:96)\n[ERROR] at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly(AnyWithAnnotationTypePattern.java:55)\n[ERROR] at org.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:132)\n[ERROR] at org.aspectj.weaver.patterns.DeclareParents.match(DeclareParents.java:63)\n[ERROR] at org.aspectj.weaver.patterns.DeclareParents.findMatchingNewParents(DeclareParents.java:358)\n[ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents(AjLookupEnvironment.java:885)\n[ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:766)\n[ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes(AjLookupEnvironment.java:424)\n[ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes(AjLookupEnvironment.java:410)\n[ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:261)"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java"
      ]
    }
  },
  "a26cac9": {
    "bug_report": {
      "summary": "Bug 38717  \".lst\" file parsing errors should include sourceline information",
      "description": "To check for this bug add an erroneous line to an \".lst\" file and compile it \nwith AJDE.  The error message returned is project-specific.  It should be \nspecific to the \".lst\" file in which the error originated (i.e. the message \nneeds a SourceLocation)."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java"
      ]
    }
  },
  "62fca9a": {
    "bug_report": {
      "summary": "Bug 376139  AspectJ throws Nullpointer after its IDE plugin update",
      "description": "Build Identifier: Version: Indigo Service Release 2 Build id: 20120216-1857\n\njava.lang.NullPointerException\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.SwitchStatement.analyseCode(SwitchStatement.java:118)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:104)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:730)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseC ... oBuildJob.run(AutoBuildJob.java:241)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n\nCompile error: NullPointerException thrown: null\n\nReproducible: Always\n\nSteps to Reproduce:\n1. After updating the eclipse plugin"
    },
    "commit": {
      "diff": [
        "tests/bugs170/pr376139/Code.java",
        "tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java"
      ]
    }
  },
  "a4caeb9": {
    "bug_report": {
      "summary": "Bug 114054  NPE in CContentOutlinePage.createContentProvider()",
      "description": "CUIPlugin.getActiveWorkbenchWindow().getActivePage() can return null."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "56cc4f2": {
    "bug_report": {
      "summary": "Bug 34925  compiler crash on yesterday's rc1 build",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java",
        "tests/bugs/ConvertToUnchecked.java"
      ]
    }
  },
  "a38edd3": {
    "bug_report": {
      "summary": "Bug 152388  NPE in MessageUtil.addExtraSourceLocations",
      "description": "I get this message from an error in a recent dev build of AspectJ with load-time weaving. I don't know how there is a null source location associated with this message, but either it shouldn't be there or MessageUtil line 806 should use this patch:\n\nIndex: src/org/aspectj/bridge/MessageUtil.java\n===================================================================\nRCS file: /home/technology/org.aspectj/modules/bridge/src/org/aspectj/bridge/MessageUtil.java,v\nretrieving revision 1.11\ndiff -u -r1.11 MessageUtil.java\n--- src/org/aspectj/bridge/MessageUtil.java\t1 Jun 2006 09:36:37 -0000\t1.11\n+++ src/org/aspectj/bridge/MessageUtil.java\t31 Jul 2006 22:32:16 -0000\n@@ -803,7 +803,7 @@\n \t\twriter.println(baseMessage);\n \t\tfor (Iterator iter = message.getExtraSourceLocations().iterator(); iter.hasNext();) {\n \t\t    ISourceLocation element = (ISourceLocation) iter.next();\n-\t\t    writer.print(\"\\tsee also: \" + element.toString());\n+\t\t    writer.print(\"\\tsee also: \" + element);\n \t\t    if (iter.hasNext()) {\n \t\t        writer.println();\n \t\t    }\n\nNPE follows:\n\njava.lang.NullPointerException\n\tat org.aspectj.bridge.MessageUtil.addExtraSourceLocations(MessageUtil.java:806)\n\tat org.aspectj.bridge.MessageUtil.renderMessage(MessageUtil.java:793)\n\tat org.aspectj.bridge.Message.toString(Message.java:177)\n\tat org.aspectj.bridge.MessageWriter.render(MessageWriter.java:73)\n\tat org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.render(WeavingAdaptor.java:471)\n\tat org.aspectj.bridge.MessageWriter.handleMessage(MessageWriter.java:41)\n\tat org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage(WeavingAdaptor.java:425)\n\tat org.aspectj.weaver.bcel.BcelTypeMunger.error(BcelTypeMunger.java:378)\n\tat org.aspectj.weaver.bcel.BcelTypeMunger.enforceDecpRule1_abstractMethodsImplemented(BcelTypeMunger.java:273)\n\tat org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewParent(BcelTypeMunger.java:194)\n\tat org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:106)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:450)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1613)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1564)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1341)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1163)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:288)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:214)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:76)\n\tat org.aspectj.ext.ltw13.ClassPreProcessorAdapter.preProcess(ClassPreProcessorAdapter.java:65)\n\tat org.codehaus.aspectwerkz.hook.impl.ClassPreProcessorHelper.defineClass0Pre(ClassPreProcessorHelper.java:107)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:539)\n...\n\nNOTE: I'm using Alex Vasseur's adaptor to invoke AspectJ LTW from a 1.4 VM, but with recursion protection added. I don't think that should change the expected behavior of Aj."
    },
    "commit": {
      "diff": [
        "bridge/src/org/aspectj/bridge/MessageUtil.java"
      ]
    }
  },
  "6ae463a": {
    "bug_report": {
      "summary": "Bug 354022  constructor inlining can fail for some groovy built code",
      "description": "The file grails.util.BuildSettings contains bytecode where the constructors are recursive.\n\nYou can't compile this in Java\n\nA() {\n  this();\n}\n\nbut groovy generates some code where it switches on a value in the ctor and if it is a certain value, the recursive ctor call is made.  I imagine this 'never happens' in practice but because it is in the bytecode it trips up the AspectJ code which inlines this() calls before weaving - since it gets into an infinite loop.\n\nFor now, just keep track of ctors making the recursive call and so don't get trapped in the infinite loop."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"
      ]
    }
  },
  "38cc0dd": {
    "bug_report": {
      "summary": "Bug 146546  Remove hard coded dependency on \"|\" in getFileName(..) methods",
      "description": null
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java",
        "asm/src/org/aspectj/asm/AsmManager.java"
      ]
    }
  },
  "a748303": {
    "bug_report": {
      "summary": "Bug 382189  NPE in BcelTypeMunger.createBridgeMethod",
      "description": "Build Identifier: \n\nSince I updated to version     \n\nAspectJ Development Tools\t2.2.0.e37x-20120529-0900\n\nI get during compile:\n\njava.lang.NullPointerException\nat org.aspectj.weaver.bcel.BcelTypeMunger.createBridgeMethod(BcelTypeMunger.java:1325)\nat org.aspectj.weaver.bcel.BcelTypeMunger.createAnyBridgeMethodsForCovariance(BcelTypeMunger.java:1272)\nat org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewMethod(BcelTypeMunger.java:971)\nat org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:108)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeave ... )\n\nBefore, I had     AspectJ Development Tools\t2.2.0.e37x-20120507-1400 and the same project compiled without that exception.\n\n\nReproducible: Always"
    },
    "commit": {
      "diff": [
        "tests/bugs170/pr382189/two/A.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java",
        "tests/bugs170/pr382189/three/SuperA.java",
        "tests/bugs170/pr382189/covbug/pj/Foo.java",
        "tests/bugs170/pr382189/two/SuperB.java",
        "tests/bugs170/pr382189/three/B.java",
        "tests/bugs170/pr382189/one/SuperB.java",
        "tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java",
        "tests/bugs170/pr382189/three/A.java",
        "tests/bugs170/pr382189/covbug/cc/covbug/B.java",
        "tests/bugs170/pr382189/one/A.java",
        "tests/bugs170/pr382435/one/bug/A.java",
        "tests/bugs170/pr382189/one/B.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "tests/bugs170/pr382435/two/bug/A.java",
        "tests/bugs170/pr382189/covbug/A.java",
        "tests/bugs170/pr382189/two/B.java",
        "tests/bugs170/pr382189/covbug/cc/covbug/SuperA.java",
        "tests/bugs170/pr382189/two/SuperA.java",
        "tests/bugs170/pr382189/one/SuperA.java",
        "tests/bugs170/pr382189/covbug/SuperA.java",
        "tests/bugs170/pr382189/covbug/cc/covbug/SuperB.java",
        "tests/bugs170/pr382189/covbug/B.java",
        "tests/bugs170/pr382189/covbug/SuperB.java",
        "tests/bugs170/pr382189/three/SuperB.java",
        "tests/bugs170/pr382189/covbug/cc/covbug/A.java"
      ]
    }
  },
  "5f97d46": {
    "bug_report": {
      "summary": "Bug 230817  LazyMethodGen.remap() NullPointerException",
      "description": "This has been reported a few times by different users, but has always proved tough to diagnose.  The typical stack trace is something like:\n\njava.lang.NullPointerException\norg.aspectj.weaver.bcel.LazyMethodGen.remap(LazyMethodGen.java:1237)\norg.aspectj.weaver.bcel.LazyMethodGen.addExceptionHandlers(LazyMethodGen.java:1132)\norg.aspectj.weaver.bcel.LazyMethodGen.packBody(LazyMethodGen.java:1078)\norg.aspectj.weaver.bcel.LazyMethodGen.pack(LazyMethodGen.java:977)\norg.aspectj.weaver.bcel.LazyMethodGen.getMethod(LazyMethodGen.java:484)\norg.aspectj.weaver.bcel.LazyClassGen.writeBack(LazyClassGen.java:512)\norg.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable(LazyClassGen.java:652)\norg.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor(BcelWeaver.java:1420)\norg.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1390)\n\nAnd that is an exception on this line in remap()\n\nih = ih.getNext();\n\ncalled from the addExceptionHandlers() line:\n\n gen.addExceptionHandler(\n                remap(r.getRealStart(), map), \n                remap(r.getRealEnd(), map),\n                remap(r.getHandler(), map),\n                (r.getCatchType() == null)\n                ? null \n                : (ObjectType) BcelWorld.makeBcelType(r.getCatchType()));\n\nDuring weaving, an instruction list is augmented with extra entries representing where shadows start and end (method-call, method-execution, handler, etc).  When weaving is complete we want to remove these temporary elements and use the remaining instructions to produce the method bytecode.  Now sometimes these temporary entries are targeted by other elements (line number tags, local variable tags and exception handlers usually).  During packing we use remap() to reposition the locations so they move off of temporary placeholders and onto real instructions that will make it out into the bytecode.  What the above exception tells us is that we started walking over temporary placeholder entries, but before we came to a real instruction, we ran out of instructions!  This cannot happen, and indicates something went seriously wrong, we should always encounter an instruction when remapping off a temporary element.\n\nAfter some digging it is actually the remap() call for the handler (not the start or end) that leads to the problem.  The handler represents where to jump to in the code when an exception of the specified type occurs between the instructions pointed at by start and end.\n\nI sent a debug build to a user encountering this problem (I could not recreate it) and in that I was looking at where in fact the handler was pointing before we called remap().  I learned that when this problem occurs, the handler is not pointing to anywhere in the method currently being processed (not good).\n\nIn a second debug build I tried to ascertain who was setting these handlers to point to nowhere.  This debug never triggered, no-one was setting them to point to nowhere...\n\nI happened to notice whilst going through the instructions in the debug output that cobertura was being used, a coverage toolkit that works by doing bytecode manipulation to insert calls out to a library.  AspectJ was being called after cobertura and I asked the user to try the steps the other way round - it worked fine.  Indicating cobertura was doing something to the bytecode that gave us problems.  After much messing about, I recreated it by applying around advice to within(*) to all the classes in rt.jar (I just used that as a very large standalone jar file I could weave into).\n\nI learned that Cobertura creates catch blocks that look a little different to what javac and other compilers create.  The typical bytecode sequence a compiler produces for a catch block starts with a STORE instruction, to store the exception being caught (whether the body of the catch block uses it or not).  But the cobertura catch blocks started with an INVOKESTATIC instruction, a call out to another method.  What does this mean?  It means the same instruction has two shadows, a 'handler' shadow and a 'method-call' shadow - and it turns out this is what causes our problem.  If around advice is applied to the call join point and it cannot be inlined then the body of the call shadow (the call itself) is pulled out into a new method.  Because the handler was the same instruction, this meant the handler *was also being pulled out* into the new method, leaving behind an exception handler that jumped to an invalid location (in fact it 'jumped' to an instruction in a different method!).  So the reason I never saw the handler location being set incorrectly is that it was set correctly up front, but then dragged out with the method-call shadow into the wrong place.  In bytecode terms it looks like this:\n\n   method-execution()\n    |               ICONST_0\n    |               ISTORE_2\n    |               SIPUSH -1\n    |               ISTORE_3\n    | catch java.lang.Exception (1806389629) -> E0\n    | | method-call(ProjectData ProjectData.getGlobalProjectData())\n    | | |           INVOKESTATIC ProjectData.getGlobalProjectData ()\n    | | method-call(ProjectData getGlobalProjectData())\n    | |             LDC \"SomeString\"\n    | | method-call(ClassData getOrCreateClassData(java.lang.String))\n    | | |           INVOKEVIRTUAL  ProjectData.getOrCreateClassData (LString;)\n    | | method-call(ClassData ProjectData.getOrCreateClassData(String))\n    | |             SIPUSH 106\n    | | method-call(void ClassData.touch(int))\n    | | |           INVOKEVIRTUAL ClassData.touch (I)V\n    | | method-call(void ClassData.touch(int))\n    | |             ALOAD_1\n    | | method-call(Object Expression.getValue())\n    | | |           INVOKEVIRTUAL Expression.getValue ()\n    | | method-call(Object Expression.getValue())\n    | catch java.lang.Exception (1806389629) -> E0\n    |               ARETURN\n    | method-call(nProjectData ProjectData.getGlobalProjectData())\n    | |         E0: INVOKESTATIC ProjectData.getGlobalProjectData ()\n    | method-call(ProjectData ProjectData.getGlobalProjectData())\n    |               LDC \"Object\"\n\nWe can see the problem in that final method-call.  The target for the exception handler seen earlier (E0) is within the method-call shadow.\n\nWhat to do?"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"
      ]
    }
  },
  "f7b1193": {
    "bug_report": {
      "summary": "Bug 349636  AspectJ reports \"abort trouble\" while instrumenting a class on startup",
      "description": "Build Identifier: 20110218-0911\n\njava.lang.NullPointerException\n\tat org.aspectj.weaver.bcel.Utility.appendConversion(Utility.java:272)\n\tat org.aspectj.weaver.bcel.BcelVar.appendConvertableArrayLoad(BcelVar.java:81)\n\tat org.aspectj.weaver.bcel.BcelVar.createConvertableArrayLoad(BcelVar.java:101)\n\tat org.aspectj.weaver.bcel.BcelShadow.makeClosureClassAndReturnConstructor(BcelShadow.java:3066)\n\tat org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure(BcelShadow.java:2830)\n\tat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:342)\n\tat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:630)\n\tat org.aspectj.weaver.Shadow.implement(Shadow.java:544)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:3147)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:490)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:100)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1687)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1631)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1394)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1180)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:467)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:318)\n\tat org.eclipse.equinox.weaving.aspectj.loadtime.OSGiWeavingAdaptor.weaveClass(Unknown Source)\n\tat org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.preProcess(Unknown Source)\n\tat org.eclipse.equinox.weaving.adaptors.WeavingAdaptor.weaveClass(Unknown Source)\n\tat org.eclipse.equinox.weaving.hooks.WeavingHook.processClass(Unknown Source)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass(ClasspathManager.java:575)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:550)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:481)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass_LockClassLoader(ClasspathManager.java:469)\n\tat org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:449)\n\tat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:216)\n\tat org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:393)\n\tat org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:469)\n\tat org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:422)\n\tat org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:410)\n\tat org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n\tat org.eclipse.osgi.internal.loader.BundleLoader.loadClass(BundleLoader.java:338)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:232)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1197)\n\tat org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:99)\n\tat org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:157)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n\tat org.springframework.util.ClassUtils.forName(ClassUtils.java:257)\n\tat org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:408)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1271)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1242)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:576)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1319)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:315)\n\tat org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:391)\n\tat org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:364)\n\tat org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:256)\n\tat org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:87)\n\tat org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:222)\n\tat org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:225)\n\tat org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:178)\n\tat org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:159)\n\tat org.springframework.osgi.extender.internal.activator.LifecycleManager$1.run(LifecycleManager.java:223)\n\tat java.lang.Thread.run(Thread.java:662)\n\n\n\nReproducible: Sometimes"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/Utility.java"
      ]
    }
  },
  "5357086": {
    "bug_report": {
      "summary": "Bug 43033  Compiler crash in ajc head (post 1.1.1 rc1) on erroneous program",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs/concretizeNpe/model/ModelExceptionHandling.java",
        "tests/bugs/concretizeNpe/base/ExceptionHandling.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"
      ]
    }
  },
  "0109534": {
    "bug_report": {
      "summary": "Bug 44272  retitle warning to \"circular {advice} dependency at ...\"",
      "description": "When writing aspects with cycles in the advice precedence, get warning \"circular\ndependency at {join point}\" -- should be \"circular advice dependency...\" or\n\"circular advice precedences at {join point} -- reorder the advice in the aspect\".\n\nFWIW, here's an example of circularity in advice precedence:\n----\naspect A {\n    pointcut crun() : execution (void run()) ;\n    before() : crun() {}\n    after() returning : crun() {}\n    void around() : crun() { proceed(); }\n}\n----\n\nSee programming guide for more discussion of circularity in advice precedence."
    },
    "commit": {
      "diff": [
        "tests/bugs/CircularAdvicePrecedence.java",
        "weaver/src/org/aspectj/weaver/Shadow.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java"
      ]
    }
  },
  "7886970": {
    "bug_report": {
      "summary": "Bug 39626  Compiler error when compiling a buggy class",
      "description": "I use AspectJ 1.1 from within eclipse.\nAfter some time of developing, I get following stack trace (Wrapped in the \neclipse gui), when I try to compile a java file with a huge amount of syntax \nerrors, missing variables, and other problems.\n\nAs soon as I have fixed these issues, I can comnpile normally as ever.\n\nUnfortunatly I can not provide any more detailed information because:\nthis errors pops up randomly,\ndisappears when the bug is fixed, \nI have neither the time nor the permission to create a more accurate sample\n\njava.lang.NullPointerException\n    at java.lang.String.<init>(String.java:214)\n    at org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit\n(AsmBuilder.java:231)\n    at org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit\n(AsmBuilder.java:259)\n    at \norg.eclipse.jdt.internal.compiler.ast.AnonymousLocalTypeDeclaration.traverse\n(AnonymousLocalTypeDeclaration.java:138)\n    at \norg.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse\n(QualifiedAllocationExpression.java:342)\n    at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse\n(MessageSend.java:299)\n    at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:147)\n    at org.eclipse.jdt.internal.compiler.ast.ForStatement.traverse\n(ForStatement.java:347)\n    at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse\n(MethodDeclaration.java:157)\n    at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse\n(TypeDeclaration.java:946)\n    at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse\n(CompilationUnitDeclaration.java:303)\n    at org.aspectj.ajdt.internal.core.builder.AsmBuilder.internalBuild\n(AsmBuilder.java:169)\n    at org.aspectj.ajdt.internal.core.builder.AsmBuilder.build\n(AsmBuilder.java:66)\n    at \norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit\n(EclipseFactory.java:303)\n    at org.aspectj.ajdt.internal.compiler.AjCompiler.process(AjCompiler.java:67)\n    at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:338)\n    at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation\n(AjBuildManager.java:372)\n    at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:133)\n    at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:78)\n    at org.aspectj.ajde.internal.CompilerAdapter.compile\n(CompilerAdapter.java:117)\n    at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run\n(AspectJBuildManager.java:164)\n    LoadTest.java   CrefoClient/src/com/dcbank/scoring/socketserver \n \nkind regards\n   Arno Schmidmeier"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AsmBuilderTest.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjdtBuilderTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"
      ]
    }
  },
  "5648105": {
    "bug_report": {
      "summary": "Bug 282379  [plan] spaces in file names causes AspectJ weaver to fail",
      "description": "The WeavingAdaptor requires the aspect path to be composed by URLs. The URL of a file is encoded, for example if it contains spaces they will be represented with %20.\n\nIt then converts these file:// urls to simple string paths, and then tries to access files pointed by those paths.\n\nThis is done inside the FileUtil.makeClasspath(URL[]) . This method uses URL.getPath() to obtain the path. But this method does not decode the string, it returns it as it is in the URL. When later this string is used to create a new File instance, that file contains an invalid path, and the weaver fails as follows :\n\nCaused by: org.aspectj.bridge.AbortException: bad aspect library: '/home/sym/path%20with%20space/aspect-library.jar'\n        at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHolder.handleMessage(WeavingAdaptor.java:624)\n        at org.aspectj.bridge.MessageUtil.error(MessageUtil.java:80)\n        at org.aspectj.weaver.tools.WeavingAdaptor.error(WeavingAdaptor.java:504)\n        at org.aspectj.weaver.tools.WeavingAdaptor.addAspectLibrary(WeavingAdaptor.java:472)\n        at org.aspectj.weaver.tools.WeavingAdaptor.registerAspectLibraries(WeavingAdaptor.java:447)\n        at org.aspectj.weaver.tools.WeavingAdaptor.init(WeavingAdaptor.java:177)\n        at org.aspectj.weaver.tools.WeavingAdaptor.<init>(WeavingAdaptor.java:112)\n\nThis issue is quite important, because on older windows \"Documents and Settings\" is an unfortunately common path, for example Maven stores there its repository.\n\nMultiple solutions are possible for this simple bug, in order of impact :\n- Decode the string obtained by URL.getPath() using URLEncoder.decode() \n- Use Files instead of Strings and let Java handle the URL, using the File(URI) constructor\n- Don't assume that aspect libraries are files, and hence that urls are file url, and use URLConnection to fetch aspect library contents."
    },
    "commit": {
      "diff": [
        "util/src/org/aspectj/util/FileUtil.java"
      ]
    }
  },
  "cb5dfe7": {
    "bug_report": {
      "summary": "Bug 135780  Java 1.2 dependency in aspectjrt.jar bug with fix",
      "description": null
    },
    "commit": {
      "diff": [
        "runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java"
      ]
    }
  },
  "efb20c5": {
    "bug_report": {
      "summary": "Bug 125101  StackOverFlow in ReferenceType.isAssignableFrom()",
      "description": "Hi.\n\nI am weaving two aspects into a jar file \"jar-to-jar\". ajc 1.5.0 gives me a huge error message (see attachement). Would be great if I could get any recommendations on this.\n\nThanks!\nEric"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"
      ]
    }
  },
  "70b9ffd": {
    "bug_report": {
      "summary": "Bug 91719  Work with Oli B to pull in examples of generating all the LINT messages",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs/seven/lint/Main.java",
        "tests/src/org/aspectj/systemtest/xlint/XLintTests.java"
      ]
    }
  },
  "0d14ccf": {
    "bug_report": {
      "summary": "Bug 88862  Declare annotation on ITDs",
      "description": "I'll use this bug to capture info on the implementation..."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java",
        "weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java",
        "weaver/src/org/aspectj/weaver/NewFieldTypeMunger.java",
        "tests/src/org/aspectj/systemtest/ajc150/Annotations.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "weaver/src/org/aspectj/weaver/ResolvedMember.java"
      ]
    }
  },
  "04067a6": {
    "bug_report": {
      "summary": "Bug 122347  Contribution: Memory Efficient Expendable Type Map",
      "description": "Here is a patch for a single file (weaver/src/org/aspectj/weaver/World) that significantly improves the memory footprint of weaves (see details below). I would like help in resolving the one bug that this hit in the AspectJ weaver tests.\n\nIt does the following:\n* Keeps Weak References to the values in the expendable map to allow evicting them (whereas the Weak Hash Map keeps weak references only to the keys)\n* Allows configuring the expendable map to keep hard references to up to N types with -Dorg.aspectj.weaver.World.cacheRetention=number (the current default is 0). It's a nice tuning option so projects can use a bit more memory to avoid evicting types.\n* Moves the isExpendible check from the typeMap to the world, to allow different worlds (such as the LTWWorld) to change what's evictable (this lets the LTWWorld not keep references to already defined classes)\n\nThis change breaks 3 tests in the \"run these tests before checking in code\" suite, all of them an NPE in the same line of ReferenceType.getTypeVariables for generic signatures. Presumably this code is implicitly relying on \"expendable\" types never being evicted. I have attached the error output for all 3 cases.\n\nMy initial tests have shown a relatively small performance loss in return for significant memory footprint gains. E.g., using the AspectJ in CVS HEAD with the standard BcelWorld implementation (not LTWWorld) as the world, in Tomcat with the Glassbox Inspector & 4 web apps the AspectJ overhead with this optimization is 48 million heap bytes (of 60 million total heap bytes) versus 61 million bytes using CVS HEAD. \n\nThe optimization has limited benefit for a BcelWorld where almost all the code is exposed to the weaver (since few types are expendible). However, Martin Lippert tried a version of this in his AJEER Eclipse load-time weaving environment and reported a reduction from 230 MB of heap to 30 MB heap used at a cost of a 25% increase in start up time. Likewise, this facility is the major contributor to enabling my other LTW optimizations that can reduce the heap overhead in my test case to 9 million heap bytes (principally having the LTW world allow evicting types that are already woven and using reflective proxies). \n\nI see similar start up times when using this expendable map in my tests. The ability to increase the number of hard references in cache should provide users an ability to allocate more memory to speed up performance.\n\nNote that the only hard reference to the keys (the signatures) is from the values (at least I haven't noticed any cases in my load-time weaving tests), so the weak hash map is compacting itself properly: when the reference type is weakly reachable, the key is then weakly reachable and the map ultimately purges theses entries."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "weaver/src/org/aspectj/weaver/World.java"
      ]
    }
  },
  "4b8bed7": {
    "bug_report": {
      "summary": "Bug 115235  StackOverflowError on circular pointcut iff aspect parameterized",
      "description": "The code below overflows when concretizing a circular pointcut from a\nparameterized aspect.  Not true when the aspect is not parameterized.\n\n---------------------------------------------\npublic class SelfPC {\n\n\tpublic static void main(String[] args) {\n\t\tnew C().foo();\n\t}\n\tstatic class C { \n\t\tpointcut doit() : C.doit(); // CE expected\n\t\tvoid foo() {} \n\t}\n\t\n\t// ------------ pertarget<T>\n\tstatic abstract aspect PT_PARM<T> pertarget(pc()) {\n\t\tabstract protected pointcut pc();\n\t\tbefore() : pc() {}\n\t}\n\tstatic aspect CPT_PARM extends PT_PARM<C> {\n\t\tprotected pointcut pc() : C.doit();\n\t}\n\t\n//\t// ------------ issingleton<T>\n//\tstatic abstract aspect IS_PARM<T> {\n//\t\tabstract protected pointcut pc();\n//\t\tbefore() : pc() {}\n//\t}\n//\tstatic aspect CIS_PARM extends IS_PARM<C> {\n//\t\tprotected pointcut pc() : C.doit();\n//\t}\n//\t// ------------ pertarget\n//\tstatic abstract aspect PT pertarget(pc()) {\n//\t\tabstract protected pointcut pc();\n//\t\tbefore() : pc() {}\n//\t}\n//\tstatic aspect CPT extends PT{\n//\t\tprotected pointcut pc() : C.doit();\n//\t}\n//\t// ------------ issingleton\n//\tstatic abstract aspect SIS {\n//\t\tabstract protected pointcut pc();\n//\t\tbefore() : pc() {}\n//\t}\n//\tstatic aspect CSIS extends SIS {\n//\t\tprotected pointcut pc() : C.doit();\n//\t}\n\n}\n---------------------------------------------\njava.lang.StackOverflowError\nat java.lang.StringBuffer.append(StringBuffer.java:225)\nat org.aspectj.weaver.UnresolvedType.nameToSignature(UnresolvedType.java:734)\nat org.aspectj.weaver.UnresolvedType.forName(UnresolvedType.java:308)\nat\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:302)\nat\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromEclipse(EclipseFactory.java:129)\nat\norg.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getSuperclass(EclipseSourceType.java:119)\nat org.aspectj.weaver.ReferenceType.getSuperclass(ReferenceType.java:481)\nat org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:65)\nat org.aspectj.weaver.ResolvedType$6.get(ResolvedType.java:447)\nat org.aspectj.weaver.Iterators$4.next(Iterators.java:148)\nat org.aspectj.weaver.Iterators$3$1.hasNext(Iterators.java:117)\nat org.aspectj.weaver.Iterators$3.hasNext(Iterators.java:128)\nat org.aspectj.weaver.ResolvedType.findPointcut(ResolvedType.java:466)\nat\norg.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:269)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:229)\nat\norg.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:326)\nat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:229)\n...\n---------------------------------------------"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/Pointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"
      ]
    }
  },
  "619f8bc": {
    "bug_report": {
      "summary": "Bug 98290  no \"matches declare\" entry in structure model for single declare warning statement",
      "description": "A project containing one class and one aspect:\n\n-----------------------------------------------------\n\npackage pack;\n\npublic class C {\n\n\tpublic static void main(String[] args) {\n\t\tnew C().sayHello();\n\t}\n\t\n\tpublic void sayHello() {\n\t\tSystem.out.println(\"HELLO\");\n\t}\n}\n\n----------------------------------------------------\n\npackage pack;\n\npublic aspect A {\n\t\t\n\tdeclare warning : \n\t\texecution(* C.sayHello(..)) :\n\t\t\t\"blah blah\";\t\n\t\t\n}\n\n-----------------------------------------------------\n\nhas the \"matched by\" entry for A.aj, but doesn't have the \"matches declare\"\nentry for C.java.\n\nThis means that in AJDT, C.sayHello isn't added to our map and consequently we\ndon't get any relationships showing in the Cross Reference view for A.aj."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java"
      ]
    }
  },
  "76d7e83": {
    "bug_report": {
      "summary": "Bug 116899  Using -verbose in aop.xml does not yield info messages",
      "description": "The interpretation of the -verbose option for LTW is not consistent with other \nuses in AspectJ e.g. ajc, iajc. It should allow info as well as warining and \nerror messages to be output. The option parser and testcase need to be updated."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/Options.java",
        "tests/java5/ataspectj/ataspectj/ltwlog/MessageHolder.java",
        "tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java",
        "tests/java5/ataspectj/ataspectj/ltwlog/Main.java"
      ]
    }
  },
  "9052d5d": {
    "bug_report": {
      "summary": "Bug 80249  Order of types passed to compiler determines weaving behavior",
      "description": "Currently, the order in which you specify types when passing them to the\ncompiler can affect how they are woven:\n\nFor example, if we have class A and class B extends A - Also, an aspect that\n'declare parents: A+ implements Serializable' then depending on whether we see A\nfirst, we may or may not make B serializable.\n\nThe fix is that when we weave a type, we first weave its supertype then its\nsuperinterfaces (if they were also passed to the compiler).\n\nThe problematic construct is declare parents - so we only process the types in a\nspecial order if there are declare parents around.  Also, because we can't\ncurrently do decp when binary weaving, the order processing logic is only being\nput into the source weaving pipeline."
    },
    "commit": {
      "diff": [
        "tests/decp/AspectX.java",
        "tests/decp/B.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java",
        "tests/decp/A.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "caf8960": {
    "bug_report": {
      "summary": "Bug 220686  unsynchronized access to WeakHashMap",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/World.java"
      ]
    }
  },
  "fc39df1": {
    "bug_report": {
      "summary": "Bug 148908  incorrect source signature for field ipe with qualified allocation expression",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs153/pr148908/BadInterface.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "6f099df": {
    "bug_report": {
      "summary": "Bug 50200  aspectjrt.jar manifest file name needs changing to upper case",
      "description": null
    },
    "commit": {
      "diff": [
        "build/src/org/aspectj/internal/tools/ant/taskdefs/AntBuilder.java"
      ]
    }
  },
  "b21eb05": {
    "bug_report": {
      "summary": "Bug 309402  Changes to Main.java",
      "description": "In order to get the AJDT ant integration working, we need a small change to Main.java.\n\nWe need to be able to pass in a custom org.aspectj.bridge.ICommand object.  Currently, the ICommand object is created via reflection.\n\nHere is my suggestion:\n\n1. augment the ICommand local variable to being a field\n2. add a setter for this field\n3. change this:\nICommand command = ReflectionFactory.makeCommand(commandName, holder);\nto this:\nif (command != null)\n  command = ReflectionFactory.makeCommand(commandName, holder);"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"
      ]
    }
  },
  "ba41fae": {
    "bug_report": {
      "summary": "Bug 39458  Compiler crash in ajc 1.1",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java",
        "tests/bugs/MissingImport.java",
        "tests/bugs/NewVoid.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"
      ]
    }
  },
  "1f51499": {
    "bug_report": {
      "summary": "Bug 112830  Warning \"couldn't find aspectjrt.jar on classpath\"",
      "description": "The compiler makes this warning if \"aspectrt.jar\" file has a different name like\n\"aspectrt-1.3.jar\", which is the case when compiling with maven."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "397a19d": {
    "bug_report": {
      "summary": "Bug 151182  NPE in BcelWeaver using LTW",
      "description": "Hi,\n\nI created a logging aspect for our application some time ago using 1.5.0 of AspectJ. I enabled this from time to time using Load Time Weaving.\n\nI have recently recompiled the aspect using 1.5.2 and tried to run it also using the 1.5.2 weaver jar, but it fails with a NullPointerException.\n\nThis is part of one of the many stacktraces:\n\n20 jul 2006 07:42:49,046 - java.lang.NullPointerException\n20 jul 2006 07:42:49,062 - \tat org.aspectj.weaver.bcel.BcelWeaver.weaveParentTypeMungers(BcelWeaver.java:1367)\n20 jul 2006 07:42:49,062 - \tat org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1237)\n20 jul 2006 07:42:49,062 - \tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1072)\n20 jul 2006 07:42:49,062 - \tat org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:284)\n20 jul 2006 07:42:49,062 - \tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:212)\n20 jul 2006 07:42:49,062 - \tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)\n20 jul 2006 07:42:49,062 - \tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:55)\n20 jul 2006 07:42:49,062 - \tat sun.instrument.TransformerManager.transform(Unknown Source)\n20 jul 2006 07:42:49,062 - \tat sun.instrument.InstrumentationImpl.transform(Unknown Source)\n20 jul 2006 07:42:49,062 - \tat java.lang.ClassLoader.defineClass1(Native Method)\n20 jul 2006 07:42:49,062 - \tat java.lang.ClassLoader.defineClass(Unknown Source)\n\nI then tried with the 1.5.0 weaver jar (although the aspect was compiled using 1.5.2) and this ran without problems."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/Aj.java"
      ]
    }
  },
  "7b7c7b2": {
    "bug_report": {
      "summary": "Bug 82755  [ajdoc] update ajdoc to support Java 5 language features",
      "description": "Java 5 langauge features such as enums and annotations need to be supported by \najdoc."
    },
    "commit": {
      "diff": [
        "ajdoc/src/org/aspectj/tools/ajdoc/Declaration.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"
      ]
    }
  },
  "d1e5c0a": {
    "bug_report": {
      "summary": "Bug 32463  ajc reports error when encountering static declaration of nested classes",
      "description": "Version: AspectJ Compiler 1.1beta4\n\nThe ajc compiler issues a spurious error message and exits with a negative \nerror code when weaving code containing static declaration of a nested class. \nThe compiler seem to write the classfiles correctly but the negative exit \nstatus causes problems when e.g. using the AjcCompilerAdapter in ant.\n\nTo reproduce:\n1) Extract the following two files into an empty directory:\n// File: A.aj:\naspect A  {\n\n    pointcut withinTest(): within(Test);\n    pointcut callToHandleOrder() : (withinTest() &&\n                             call(* handleOrder(..)));\n\n    Object around(): callToHandleOrder() {\n\n      return \"DUMMY inserted by ASPECT\" ;\n   }\n}\n// End of File A.aj\n\n// File : Test.java\npublic class Test\n{\n    // Commenting out the static declaration makes everything work OK\n    static\n    {\n        class StaticNestedClass\n        {\n        }\n    }\n    \n    public static void main(String[] args)\n    {\n      System.out.println(new Test().handleOrder(\"test\"));\n    }\n\n    private String handleOrder(String t)\n    {\n      return t;\n    }\n\n}\n// End of Test.java\n\n2) Compile the files \n   ajc -sourceroots . -verbose\n\nOutput:\n-----\ncompiling c:/aspectj1.1/doc/examples/bug/./A.aj\ncompiling c:/aspectj1.1/doc/examples/bug/./Test.java\nweaving\nmight need to weave [UnwovenClassFile(null, Test$1$StaticNestedClass), \nUnwovenClassFile(null, A), UnwovenClassFile(null, Test)](world=true)\nwrote class file: c:\\aspectj1.1\\doc\\examples\\bug\\A.class\ncan't find type Test$1\nwrote class file: c:\\aspectj1.1\\doc\\examples\\bug\\Test$1$StaticNestedClass.class\nwrote class file: c:\\aspectj1.1\\doc\\examples\\bug\\Test.class\n\n1 error\n------"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/TypeX.java",
        "tests/bugs/WeaveLocal.java",
        "weaver/testsrc/org/aspectj/weaver/TypeXTestCase.java",
        "weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java",
        "weaver/src/org/aspectj/weaver/NameMangler.java"
      ]
    }
  },
  "7e0c3cd": {
    "bug_report": {
      "summary": "Bug 71159  pointcut call(MethodPattern) matches non-visible methods in parent class",
      "description": "aspectjtools.jar / ajc v1.2\n\nWe believe that the call(methodpattern) pointcut has matching behaviour that is\ninconsistent with what we expect from Java in relation to invocations of methods\non subclasses and superclasses.\n\nBackground: \nOur goal is to use an aspect to declare ajc compiler warnings on any invocation\nto a target method, where the space of targets is defined as any visible method\nof any class in a specified package P or its subpackages.\n\nAs well as straight invocations from types in packages oustide P and its\nsubpackages, we wish to match method invocations on P where the methods invoked\nare inherited from P -- that is , they are obtained in a type that directly\nextends a type in P or its subpackages.  \n\nThe fragment of the aspect we are using is:\npublic aspect Aspect1\n{\n  pointcut methodCalls() : \n    !within(Aspect1) &&\n    call(* P..*.*(..)) ;         // 'P' is the target package space\n  declare warning : methodCalls() : \"invoking\";\n  //...\n}\n\nConsider these cases:\n\nCase 1 method inheritance: \nSuperclass A in package P declares and implements a public method M.  A direct\nsubclass B (in a package outside P) directly extends A and inherits this method.\n Now, any calls inside B to M or this.M() are matched by the call() join point\nabove which seeks to match calls to P..*.*() This is as we would expect since\nthe implementation in package space P is actually being called.\n\nCase 2 method overriding: \nSuperclass A in package P declares and implements a public method M.  Direct\nsubclass B (in a package outside P) overrides A.M with its own implementation\nM'. M' does not invoke M.  Now, calls inside B to M' or this.M'() are still\nmatched by the call() join point above which seeks to match calls to P..*.*()\neven though M' does not invoke or depend on M.  We do not expect this result\nsince we do not think M is actually called.\n\nCase 3 redeclaration of non-visible method with the same name:  \nSuperclass A in package P declares and implements a private method M.  Direct\nsubclass B (in a package outside P) introduces its own method M having the same\nsignature as A.M.  Now, calls in B to M or this.M() are still matched by the\ncall() join point above which seeks to match calls to P..*.*() even though A.M\nis not visible to B and is never called by it. We do not expect this result\nsince we do not think A.M is ever called.\n\nThe only way we can explain this apparent behaviour is by reasoning that the\ncompiler is treating the subclass B \"as a type of\" its parent A and somehow\nconcluding that method calls on B can be equated with calls to methods of\nidentical signature on A.  However this seems at odds with the rules for Java\nvisibility and with our expectations for when the call(...) joinpoint should match.\n\nWe have experimented with execution(...) join points to perform this matching\nbut that has turned up a different set of problems which we are still analyzing.\n\nPlease can you shed any light on what the call joinpoint is doing here?\n\nregards, Dave"
    },
    "commit": {
      "diff": [
        "tests/bugs150/pr71159/pkg1/A.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/pr71159/pkg1/C.java",
        "weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java",
        "tests/bugs150/pr71159/pkg1/B.java"
      ]
    }
  },
  "3b2109a": {
    "bug_report": {
      "summary": "Bug 227295  AJC error, somehow connected with generics",
      "description": "Build ID: 1.5.0.20070607\n\nSteps To Reproduce:\nI cannot find a way to reproduce it, it's somehow \"randomic\", for example it happened to me now while creating a new class in an aspectj project, but when i then saved the .java it compiled properly. That's why I'm filing it in AJDT and not in AspectJ directly.\n\nBased on the exception, IIUC, there is a narrowing in a generic (UnresolvedType should be something like Converter<?>, while BoundedReferenceType should be somethinf like Converter<? extends Number>), and the weaver is not handling it properly, but simply casting from one to the other .. but this are just silly assumptions.\n\nMore information:\njava.lang.ClassCastException\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1(EclipseFactory.java:656)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding(EclipseFactory.java:579)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1(EclipseFactory.java:640)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding(EclipseFactory.java:579)\nat org.asp ... Worker.java:55)\n\nCompile error: ClassCastException thrown: org.aspectj.weaver.UnresolvedType cannot be cast to org.aspectj.weaver.BoundedReferenceType"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"
      ]
    }
  },
  "332a5df": {
    "bug_report": {
      "summary": "Bug 107299  -aspectpath -inpath arguments fail without drive letter",
      "description": "ajc doesn't recognize Windows absolute file paths that don't start with a drive \nletter, e.g., run:\najc -inpath \\test.jar\n[error] build config error: bad inpath component: \\test.jar\n\nbut\n\najc -inpath c:\\test.jar\nworks\n\najc -aspectpath \\test.jar Test.aj\n\n[error] build config error: bad aspectpath: \\test.jar\n\najc -aspectpath c:\\test.jar Test.aj\n(works)"
    },
    "commit": {
      "diff": [
        "util/src/org/aspectj/util/ConfigParser.java"
      ]
    }
  },
  "808bae8": {
    "bug_report": {
      "summary": "Bug 36046  inter-type declaration bug with abstract classes",
      "description": "This error occurs when you do an inter-type declaration on an interface, use \ndeclare parents to make an abstract base class implement it, and then try to \nuse the declared (method), it fails. If you make the base class concrete, then \nthis doesn't fail.\n\nThe following code demonstrates the error. If you run java Driver you get:\njava.lang.AbstractMethodError: Derived.getExecutions(Ljava/lang/String;)I\n\tat Driver.main(Driver.java:23)\nException in thread \"main\" \n\npublic class Driver {\n    public static void main(String args[]) {\n        Derived generator = new Derived();\n        System.out.println(generator.getExecutions(\"processEvents\"));\n    }\n    static aspect MonitorBase {\n        declare parents: Base implements ExecutionMonitor.MonitoredItem;\n    }    \n}\n\nclass Derived extends Base {\n    public String getName() {\n        return null;\n    }\n}\n\nabstract class Base {\n    abstract public String getName();\n}\n\naspect ExecutionMonitor {\n    /** marker interface to indicate the execution monitor should track calls \nand executions on this class. */\n    public interface MonitoredItem {\n        int getExecutions(String methodName);\n    }\n\n    /** a Map of events to mutable integers */\n    public int MonitoredItem.getExecutions(String methodName) {\n        return 0;\n    }\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "tests/bugs/interAbstract/Driver.java"
      ]
    }
  },
  "7aa6cfe": {
    "bug_report": {
      "summary": "Bug 151991  Missing copyright/license in recently added modules",
      "description": "BuildModuleTests does not test for licenses in ajdoc, loadtime, loadtime5, weaver5. When I added the necessary logic there were a couple of failures. Could the owners please step forward ...\n\nepl-cpl-ibm|parc|xerox|others   LICENSE FAIL: C:\\workspaces\\org.aspectj-Restructure\\weaver5\\java5-src\\org\\aspectj\\weaver\\reflect\\DeferredResolvedPointcutDefinition.java\nepl-cpl-ibm|parc|xerox|others COPYRIGHT FAIL: C:\\workspaces\\org.aspectj-Restructure\\weaver5\\java5-src\\org\\aspectj\\weaver\\reflect\\DeferredResolvedPointcutDefinition.java\nepl-cpl-ibm|parc|xerox|others   LICENSE FAIL: C:\\workspaces\\org.aspectj-Restructure\\weaver5\\java5-src\\org\\aspectj\\weaver\\reflect\\InternalUseOnlyPointcutParser.java\nepl-cpl-ibm|parc|xerox|others COPYRIGHT FAIL: C:\\workspaces\\org.aspectj-Restructure\\weaver5\\java5-src\\org\\aspectj\\weaver\\reflect\\InternalUseOnlyPointcutParser.java\nTotal passed: 7 failed: 2\n\n\nI also noticed the following messages. Does anyone know what they mean?\n\nBuildModuleTest: Define \"run.build.tests\" as a system property to run tests to build run-all-junit-tests (this is the only warning)\nclass org.aspectj.internal.build.BuildModuleTest.testNoDuplicates() incomplete\nerror building module weaver\n\tat org.aspectj.internal.tools.ant.taskdefs.BuildModule.build(BuildModule.java:145)\n\tat org.aspectj.internal.tools.ant.taskdefs.BuildModule.execute(BuildModule.java:117)\n\tat org.aspectj.internal.build.BuildModuleTest.doTask(BuildModuleTest.java:445)\n\tat org.aspectj.internal.build.BuildModuleTest.testNoDuplicates(BuildModuleTest.java:178)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)Module \tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)"
    },
    "commit": {
      "diff": [
        "build/testsrc/org/aspectj/build/BuildModuleTests.java"
      ]
    }
  },
  "9edb4b6": {
    "bug_report": {
      "summary": "Bug 120363  LTW weaver include and exclude does not behave correctly",
      "description": null
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "tests/java5/ataspectj/com/foo/bar/Test$$EnhancerByCGLIB$$12345.java",
        "tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java",
        "tests/java5/ataspectj/ataspectj/Test$$EnhancerByCGLIB$$12345.java",
        "tests/java5/ataspectj/com/foo/bar/Test.java"
      ]
    }
  },
  "2505485": {
    "bug_report": {
      "summary": "Bug 108902  Type mismatch: cannot convert from Collection to Collection",
      "description": "(From aspectj-users)\n\nThe program below produces the erroneous message:\n\n    [iajc] D:\\workdir\\DPsample\\main\\src\\com\\designpattern\\observer\\ObserverProt\nocol.aj:39 [error] Type mismatch: cannot convert from Collection to Collection\n    [iajc] return observers;\n    [iajc]        ^^^^^\n\n//Subject.java\ninterface Subject {\n public void addObserver(Observer observer);\n public void removeObserver(Observer observer);\n public Collection getObservers();\n}\n//Observer.java\ninterface Observer\n{\n public void update();\n}\n\n//ObserverProtocol\npublic abstract aspect ObserverProtocol{\n abstract pointcut stateChange(Subject subject);\n after(Subject subject):stateChange(subject){\n   Iterator it=subject.getObservers().iterator();\n   while(it.hasNext()){\n        Observer observer=(Observer)it.next();\n        observer.update();\n   }\n }\n private Collection Subject.observers=new ArrayList();\n public void Subject.addObserver(Observer observer){\n        observers.add(observer);\n }\n public void Subject.removeObserver(Observer observer){\n       observers.remove(observer);\n }\n public Collection Subject.getObservers()\n {\n  return observers;\n }\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs150/pr108902/Observer.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java",
        "tests/bugs150/pr108902/Subject.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "1e1bbb3": {
    "bug_report": {
      "summary": "Bug 118715  Load Time Weaving wipes out Xlint files if no Xlint values",
      "description": "In ClassLoaderWeavingAdaptor if weaverOption.lint is null, then a loaded Xlint properties file gets overwritten by the default Xlint properties. See attached patch to fix this problem."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java",
        "testing/newsrc/org/aspectj/testing/OutputSpec.java",
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java",
        "tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java",
        "testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java",
        "testing/newsrc/org/aspectj/testing/RunSpec.java"
      ]
    }
  },
  "a23c7e4": {
    "bug_report": {
      "summary": "Bug 293351  RuntimeException weaving roo app with advice based on execution pointcut",
      "description": "java.lang.RuntimeException\nat org.aspectj.weaver.ResolvedType.getAnnotations(ResolvedType.java:718)\nat org.aspectj.weaver.AbstractAnnotationAJ.retrieveAnnotationOnAnnotation(AbstractAnnotationAJ.java:123)\nat org.aspectj.weaver.AbstractAnnotationAJ.ensureAtTargetInitialized(AbstractAnnotationAJ.java:85)\nat org.aspectj.weaver.AbstractAnnotationAJ.specifiesTarget(AbstractAnnotationAJ.java:115)\nat org.aspectj.weaver.bcel.BcelWeaver.verifyTa ... .eclipse.core.internal.jobs.Worker.run(Worker.java:55)\n\nCompile error: RuntimeException thrown: ResolvedType.getAnnotations() should never be called"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java"
      ]
    }
  },
  "2fb86fe": {
    "bug_report": {
      "summary": "Bug 132926  Compiler crashes processing annotations",
      "description": "Just upgraded to latest AJDT (Version: 1.3.1, Build id: 20060322082516\nAspectJ version: 1.5.1.20060320075953)\nand the compiler crashed while rebulding the project (which used to work fine \nusing using the March 16th version). Retrying with 'clean' build produced the\nsame crash.\n\njava.lang.NullPointerException\nat org.aspectj.weaver.AnnotationX.ensureAtTargetInitialized(AnnotationX.java:158)\nat org.aspectj.weaver.AnnotationX.specifiesTarget(AnnotationX.java:98)\nat org.aspectj.weaver.bcel.BcelWeaver.verifyTargetIsOK(BcelWeaver.java:1450)\nat org.aspectj.weaver.bcel.BcelWeaver.applyDeclareAtType(BcelWeaver.java:1417)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveParentTypeMungers(BcelWeaver.java:1366)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1223)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1211)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1058)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:845)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:241)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/AnnotationX.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "tests/bugs151/pr132926/AffectedType.java",
        "tests/bugs151/pr132926/InputAnnotation2.java",
        "tests/bugs151/Deca/DecA.java",
        "tests/bugs151/pr132926/InputAnnotation.java"
      ]
    }
  },
  "59123b0": {
    "bug_report": {
      "summary": "Bug 154332  [annotations] Incorrect handling of java.lang annotations when matching",
      "description": "As raised by Mr Bodkin on the list:\nCan anyone tell me why this compiling this program produces warnings for marker but not for deprecated (in a recent dev build of AJDT)? Is this just a bug? Both have runtime retention, so I would expect equivalent behavior.\n\n \n\n@Deprecated @Marker\n\npublic aspect Annot {\n\n \n\n    pointcut test() : within(@Marker *);// *);\n\n   \n\n    declare warning: staticinitialization(@Deprecated *): \"deprecated\";   \n\n    declare warning: staticinitialization(@Marker *): \"marker\";   \n\n   \n\n    public static void main(String argz[]) {\n\n        new Baz().foo();\n\n    }\n\n}\n\n \n\n@Deprecated @Marker\n\nclass Baz {\n\n    public void foo() {}\n\n}\n\n \n\n@Retention(RetentionPolicy.RUNTIME)\n\npublic @interface Marker {\n\n \n\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java",
        "tests/bugs153/pr154332/Annot.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "a4bd19d": {
    "bug_report": {
      "summary": "Bug 124999  [generics] Incorrect call to generic inherited method in around advice",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"
      ]
    }
  },
  "5d0e186": {
    "bug_report": {
      "summary": "Bug 384189  make ajcore file creation optional",
      "description": "Although cores are useful, there may be situations where you are working around whatever they are reporting and are perhaps unable to pick up a later version of AJ that includes the fix.  In these situations it might be helpful to make the creation of cores optional, through a sys prop."
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/Dump.java"
      ]
    }
  },
  "9ed75a1": {
    "bug_report": {
      "summary": "Bug 115607  Incorrect structure model for simple declare @type program?",
      "description": "This program:\n---8<-----\n@interface I {}\n\nclass Simple {}\n\npublic aspect C {\n  declare @type: Simple : @I;\n}\n---8<-----\n(all in a file called C.java, open with the AJ editor) when built shows\nincorrect gutter markers, it shows a double headed arrow on Simple implying that\nit annotates itself - rather than something outgoing from the declare statement\nand something incoming on the Simple type."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java",
        "tests/bugs150/pr115607.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "cc6e681": {
    "bug_report": {
      "summary": "Bug 82989  Compiler error due to a wrong exception check in try blocks",
      "description": "Compiler error on correct code when an aspect performs a method introdiction.\nThe method introduction contains an invocation to a method from the class and\nsuch an invocation is inside an appropriate try block.\nThe ajc compiler performs a wrong check on the exception types.\nTo understand better, please see the attached example"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/AjcMemberMaker.java",
        "tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java"
      ]
    }
  },
  "6c8747b": {
    "bug_report": {
      "summary": "Bug 107858  illegal argument to proceed crashes the parser",
      "description": "in a context where proceed requires zero arguments, calling it with an extra\nargument crashes the compiler, but only if that argument is a field access:\n\nclass Foo {\n  Foo field;\n  void test() {}\n}\n\npublic aspect Bug {\n  void around() : call(void Foo.test()) {\n    Foo foo = new Foo().field;\n    proceed(foo); // caught at compile time\n    proceed(new Foo().field); // crashes\n  }\n}\n\n\n/home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error\njava.lang.NullPointerException\n        at\norg.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.getAccessibleField(AccessForInlineVisitor.java:145)\n        at\norg.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisit(AccessForInlineVisitor.java:108)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.FieldReference.traverse(FieldReference.java:609)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:467)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:212)"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"
      ]
    }
  },
  "3e2801a": {
    "bug_report": {
      "summary": "Bug 29959  super call in intertype method declaration body causes VerifyError",
      "description": "AspectJ Compiler 1.1beta4\nThis program:\n\naspect Foo {\n  void A.foo() { }\n  void B.foo() { super.foo(); }\n}\n\nclass A { }\nclass B extends A { }\n\nclass Main {\n  public static void main(String[] args) {\n    new B();\n  }\n}\n\ncauses this error at runtime:\n\nException in thread \"main\" java.lang.VerifyError: (class: B, method: ajc$superDispatch$B$foo signature: ()V) Illegal use of nonvirtual function call\n\tat Main.main(Foo.java:11)\n\nNote that foo is never even called; the error happens at load time when the new B() expression causes class B to be loaded.  There's no error if either one of the foo methods is declared in its class directly.\n\nThis is kind of a showstopper...\n\n--Doug"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMethodBinding.java",
        "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java",
        "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java",
        "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/SuperFixerVisitor.java",
        "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java",
        "tests/bugs/SuperToIntro.java"
      ]
    }
  },
  "bbdd496": {
    "bug_report": {
      "summary": "Bug 58520  ajdoc doesn't navigate to target details in some cases",
      "description": "When a file is advised, javadoc uses the following naming convention for \nsetting its \"A NAME\":\n\n  convertCheckedException(java.lang.Throwable)\n\nHowever, ajdoc uses the unqualified name for the argument, resuting in the \nfollwing in-file anchor link:\n\n  <class-name>.html#convertCheckedException(Throwable) \n\nWhich fails to navigate to the anchor within the file, although it does always \ngo to the right file."
    },
    "commit": {
      "diff": [
        "ajdoc/testdata/pr119453/src/pack/C.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/FullyQualifiedArgumentTest.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"
      ]
    }
  },
  "99d1c18": {
    "bug_report": {
      "summary": "Bug 148388  LTW weaver produces a debug message at the begining",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"
      ]
    }
  },
  "f503523": {
    "bug_report": {
      "summary": "Bug 72154  Support for simple dump file",
      "description": "When the compiler terminates abnormally (exception) or behaves unexpectedly \n(warning/error/abort) a simple dump of the compiler state should be produced \nto aid problem diagnosis. The content and conditions under which the dump is \nproduced should be configurable by the user but the facility should be enabled \nby default for exceptions. Consequently its inclusion should have negligible \nimpact on compiler performance and footprint. The file should be attached to \nbug reports to give a complete and objective description of the users \nenvironment and support problem resolution where a testcase cannot be provided.\n\nOne approach is to write a uniquely name file (using date & time) in the \ncurrent directory e.g ajcore.20040818.105200.txt which should be human \nreadable (it can be zipped if large) to allow the user to potentially diagnose \ntheir own problems or remove potentially sensitive data before submission. It \nshould contain basic information such as AspectJ version, system properties \nand command line as well as failure information such as _full_ exception stack \ntrace, compiler messages and internal compiler state."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/World.java",
        "weaver/testsrc/org/aspectj/weaver/DumpTestCase.java",
        "weaver/src/org/aspectj/weaver/Dump.java",
        "org.aspectj.ajdt.core/testdata/DumpTestCase/src/HelloWorld.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/CompilerDumpTestCase.java",
        "weaver/testsrc/org/aspectj/weaver/BcweaverTests.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java"
      ]
    }
  },
  "3be69a2": {
    "bug_report": {
      "summary": "Bug 311910  AspectJ internal Compiler Error",
      "description": "Stack Trace:\njava.lang.NullPointerException\nat org.aspectj.weaver.model.AsmRelationshipProvider.createSourceLocation(AsmRelationshipProvider.java:303)\nat org.aspectj.weaver.model.AsmRelationshipProvider.addPointcuts(AsmRelationshipProvider.java:580)\nat org.aspectj.weaver.model.AsmRelationshipProvider.createHierarchyForBinaryAspect(AsmRelationshipProvider.java:562)\nat org.aspectj.weaver.model.AsmRelationshipProvider.addAdvisedRelationship(AsmRelations ...       ARETURN\n  end public Object run(Object[])\nend public class com.cerner.isis.biz.services.asclepius.patient.PatientManagerImplTest$AjcClosure3\n\n\nHappening when weaving a jar with a aspect jar."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"
      ]
    }
  },
  "3117255": {
    "bug_report": {
      "summary": "Bug 44117  NPE on compile",
      "description": "java.lang.NullPointerException\nat org.aspectj.weaver.AsmRelationshipProvider.checkerMunger\n(AsmRelationshipProvider.java:51)\nat org.aspectj.weaver.Checker.match(Checker.java:58)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:985)\nat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:791)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:291)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:77)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:417)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:390)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:316)\nat \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFile\ns(AjBuildManager.java:256)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:156)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:70)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:103)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run\n(AspectJBuildManager.java:165)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"
      ]
    }
  },
  "fb428d0": {
    "bug_report": {
      "summary": "Bug 102933  problem with Object arrays and clone() with 1.4 .class compatibility",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "2dfc738": {
    "bug_report": {
      "summary": "Bug 71878  Bad injar aspect name on Linux",
      "description": "If you checkout the \"JarUsingProject\" project from \"org.eclipse.ajdt.test/manual\ntesting\" in the AJDT 1.1.12 tree, and look at the advised-by entries in the\noutline view and the context menu of the gutter annotation, on Windows you get\n\"injar aspect: AbstractAspect.aj\", but on Linux you get \"injar aspect:\nC:\\eclipse30AJDTPluginTest\\eclipse\\workspace\\JarGeneratingProject\\src\\p1\\AbstractAspect.aj\".\nThe Windows-style path indicates the location of the original class files in the\nJAR file, which was clearly built on Windows."
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java"
      ]
    }
  },
  "782ade2": {
    "bug_report": {
      "summary": "Bug 156904  Incorrect warning when advising a private method of a private inner class",
      "description": "The Eclipse AJDT give an incorrect warning when you want to advise a private method of a private inner class.\n\n\nWhen I want to advise a private method in a private inner class, like this\n\npublic class Outer\n{\n   private class Inner\n   {\n      private void myMethod()\n   }\n}\n\nUsing the following poincut:\n\npoincut innerpointcut():execution( * Outer.Inner.myMethod() );\n\nand advice:\n\nbefore():innerpointcut()\n{\n   System.out.println( \"executing!\" );\n}\n\nI get a warning \"invalidAbsoluteTypeName\" next to my pointcut, but next to the advice, there is a marker that points to the private method."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "tests/bugs153/pr156904/inSamePkg/Outer.java",
        "tests/bugs153/pr156904/inDiffPkgWithoutImport/Outer.java",
        "tests/bugs153/pr156904/inDiffPkgAndImport/Outer.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "fbc0aa3": {
    "bug_report": {
      "summary": "Bug 51320  ClasscastException on concretization of if(false)",
      "description": "I get the following exception when weaving the attached aspect on the dev build.\n\njava.lang.ClassCastException\n\tat org.aspectj.weaver.patterns.IfPointcut.concretize1(IfPointcut.java:156)\n\tat org.aspectj.weaver.patterns.IfPointcut.concretize(IfPointcut.java:143)\n\tat org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:119)\n\tat org.aspectj.weaver.Checker.concretize(Checker.java:35)\n\tat org.aspectj.weaver.CrosscuttingMembers.\naddShadowMunger(CrosscuttingMembers.java:78)\n\tat org.aspectj.weaver.CrosscuttingMembers.addDeclare(CrosscuttingMembers.\njava:102)\n\tat org.aspectj.weaver.CrosscuttingMembers.addDeclares(CrosscuttingMembers.\njava:92)\n\tat org.aspectj.weaver.CrosscuttingMembersSet.\naddAdviceLikeDeclares(CrosscuttingMembersSet.java:65)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.\naddAdviceLikeDeclares(AjLookupEnvironment.java:147)\n\tat org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.\ncompleteTypeBindings(AjLookupEnvironment.java:122)\n\tat org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:\n300)\n\tat org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:314)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.\nperformCompilation(AjBuildManager.java:384)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.\ndoBuild(AjBuildManager.java:125)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.\nbatchBuild(AjBuildManager.java:70)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:104)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:234)\n\tat org.aspectj.tools.ajc.Main.runMain(Main.java:170)\n\tat org.aspectj.tools.ajc.Main.main(Main.java:81)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java",
        "tests/bugs/DecwClassCastException.java"
      ]
    }
  },
  "75afb31": {
    "bug_report": {
      "summary": "Bug 122580  Fix & Bug: Circularity Failure for Verbose Loading on JRockit 1.4.2_08 Agent",
      "description": "Here is a stack trace I am getting when I try to use AspectJ 1.5.0 final release's load-time weaving with JRockIt 1.4.2_08 using -Xmanagement:class=org.aspectj.weaver.loadtime.JRockitAgent to load Weblogic Server 8.1 SP2. I debugged the code in Eclipse and discovered that the weaver was being initialized while loading IMessage$Kind, so the JRockIt VM simply hasn't run staticinitialization yet, making IMessage.INFO null.\n\nI was able to fix this stack trace by hoisting the check for loading AspectJ code up BEFORE initializing a weaving adaptor i.e., changing line 55 of Aj.java to be\n        if (loader == null || className == null || className.startsWith(\"org/aspectj/\")) {\n\nI then commented out line 251 of WeavingAdaptor to avoid a duplicate check:\n\tprivate boolean shouldWeaveName (String name) {\n\t\treturn !((/*(name.startsWith(\"org.apache.bcel.\")||//FIXME AV why ? bcel is wrapped in org.aspectj.\n                name.startsWith(\"org.aspectj.\")||*/ // now checked earlier, to avoid circularity issues in initialization \n                name.startsWith(\"java.\")\n                || name.startsWith(\"javax.\"))\n                //|| name.startsWith(\"$Proxy\")//JDK proxies//FIXME AV is that 1.3 proxy ? fe. ataspect.$Proxy0 is a java5 proxy...\n                || name.startsWith(\"sun.reflect.\"));//JDK reflect\n\t}\n\nNote that this bug does NOT occur when using a JRockIt 1.5.0 VM, even with the -Xmanagement command line argument.\n\nStack Trace:\njava.lang.IllegalArgumentException: null kind\n\tat org.aspectj.bridge.Message.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII)V(Message.java:89)\n\tat org.aspectj.bridge.Message.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:67)\n\tat org.aspectj.bridge.Message.<init>(Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Ljava/lang/Throwable;Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:110)\n\tat org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:211)\n\tat org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.<init>()V(WeavingAdaptor.java:80)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.<init>(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)V(ClassLoaderWeavingAdaptor.java:70)\n\tat org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)Lorg/aspectj/weaver/tools/WeavingAdaptor;(Aj.java:94)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Ljava/lang/String;[BLjava/lang/ClassLoader;)[B(Aj.java:61)\n\tat org.aspectj.weaver.loadtime.JRockitAgent.preProcess(Ljava/lang/ClassLoader;Ljava/lang/String;[B)[B(JRockitAgent.java:74)\n\tat jrockit.vm.ClassPreProcessorManager.notifyClassPreProcessor(ILjava/lang/String;[B)[B(Unknown Source)\n\tat jrockit.vm.Classes.defineClass0(ILjava/lang/String;[BII)I(Unknown Source)\n\tat jrockit.vm.Classes.defineClass(Ljava/lang/ClassLoader;Ljava/lang/String;[BII)Ljava/lang/Class;(Unknown Source)\n\tat java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;(Unknown Source)\n\tat java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class;(SecureClassLoader.java:123)\n\tat java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:251)\n\tat java.net.URLClassLoader.access$100(Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:55)\n\tat java.net.URLClassLoader$1.run()Ljava/lang/Object;(URLClassLoader.java:194)\n\tat jrockit.vm.AccessController.do_privileged_exc(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;I)Ljava/lang/Object;(Unknown Source)\n\tat jrockit.vm.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;(Unknown Source)\n\tat java.net.URLClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;(URLClassLoader.java:187)\n\tat java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Unknown Source)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Launcher.java:274)\n\tat java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;(Unknown Source)\n\tat java.lang.ClassLoader.loadClassFromNative(II)Ljava/lang/Class;(Unknown Source)\n\tat jrockit.vm.RNI.getRunnableCode(I)I(Unknown Source)\n\tat jrockit.vm.RNI.trampoline()V(Unknown Source)\n\tat org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:???)\n\tat org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)\njava.lang.IllegalArgumentException: null kind\n\tat org.aspectj.bridge.Message.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII)V(Message.java:89)\n\tat org.aspectj.bridge.Message.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:67)\n\tat org.aspectj.bridge.Message.<init>(Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Ljava/lang/Throwable;Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:110)\n\tat org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:211)\n\tat org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.<init>()V(WeavingAdaptor.java:80)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.<init>(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)V(ClassLoaderWeavingAdaptor.java:70)\n\tat org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)Lorg/aspectj/weaver/tools/WeavingAdaptor;(Aj.java:94)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Ljava/lang/String;[BLjava/lang/ClassLoader;)[B(Aj.java:61)\n\tat org.aspectj.weaver.loadtime.JRockitAgent.preProcess(Ljava/lang/ClassLoader;Ljava/lang/String;[B)[B(JRockitAgent.java:74)\n\tat jrockit.vm.ClassPreProcessorManager.notifyClassPreProcessor(ILjava/lang/String;[B)[B(Unknown Source)\n\tat jrockit.vm.Classes.defineClass0(ILjava/lang/String;[BII)I(Unknown Source)\n\tat jrockit.vm.Classes.defineClass(Ljava/lang/ClassLoader;Ljava/lang/String;[BII)Ljava/lang/Class;(Unknown Source)\n\tat java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;(Unknown Source)\n\tat java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class;(SecureClassLoader.java:123)\n\tat java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:251)\n\tat java.net.URLClassLoader.access$100(Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:55)\n\tat java.net.URLClassLoader$1.run()Ljava/lang/Object;(URLClassLoader.java:194)\n\tat jrockit.vm.AccessController.do_privileged_exc(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;I)Ljava/lang/Object;(Unknown Source)\n\tat jrockit.vm.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;(Unknown Source)\n\tat java.net.URLClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;(URLClassLoader.java:187)\n\tat java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Unknown Source)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Launcher.java:274)\n\tat java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;(Unknown Source)\n\tat java.lang.ClassLoader.loadClassFromNative(II)Ljava/lang/Class;(Unknown Source)\n\tat jrockit.vm.RNI.getRunnableCode(I)I(Unknown Source)\n\tat jrockit.vm.RNI.trampoline()V(Unknown Source)\n\tat org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:???)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168)"
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/Aj.java",
        "loadtime/testsrc/LoadtimeModuleTests.java",
        "loadtime/testsrc/org/aspectj/bea/jvm/ClassLibraryImpl.java",
        "loadtime/testsrc/org/aspectj/weaver/loadtime/JRockitAgentTest.java",
        "loadtime/testsrc/org/aspectj/bea/jvm/JVMImpl.java",
        "loadtime/src/org/aspectj/weaver/loadtime/JRockitAgent.java"
      ]
    }
  },
  "19c3e16": {
    "bug_report": {
      "summary": "Bug 31423  Pointcut adviceexecution() does not work",
      "description": "Pointcut adviceexecution() does not seem to pick advice execution\njoin points in beta4. Here is a program that shows the problem:\n\npublic class Test {\n    public static void main(String[] args) {\n    }\n}\n\naspect Aspect1 {\n    before() : execution(* Test.*(..)) {\n\tSystem.out.println(\"Reached \" + thisJoinPoint);\n    }\n}\n\naspect Aspect2 {\n    before() : adviceexecution() && !within(Aspect2) {\n\tSystem.out.println(\"Reached \" + thisJoinPoint);\n    }\n}\n\nF:\\aop\\bugs\\1.1\\b4\\adviceexecution>ajc -version\nAspectJ Compiler 1.1beta4\n\nF:\\aop\\bugs\\1.1\\b4\\adviceexecution>ajc Test.java\n\nF:\\aop\\bugs\\1.1\\b4\\adviceexecution>java Test\nReached execution(void Test.main(String[]))"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java",
        "tests/bugs/AdviceExec.java",
        "weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java"
      ]
    }
  },
  "ae612d9": {
    "bug_report": {
      "summary": "Bug 112027  unexpected error unboundFormalInPC",
      "description": "In 1.5.0M4, I get error \"the parameter tis is not bound in [all branches of]\npointcut\".  Not true of 1.2.1.  Untested in other development versions of 1.5.0.\n  No branches (all &&) but duplicate specification of this(..).\n\n------------------------------------------\npackage demo;\n\n/**\n * PerThis\n */\npublic class PerThis {\n    public static void main(String[] args) {\n        new This().test();\n    }\n}\naspect PerThisTest perthis(pc()) {\n    // TutIndex example-basic-perthis\n    pointcut pc() : this(This) && !within(PerThisTest) && call(void run());\n    before(This tis) : pc() && this(tis){\n        System.out.println(\"bef \" + this + \" <-- \" + tis);\n    }\n}\n\nclass This {\n    int i;\n    void test() {\n        run();\n    }\n    void run() {\n        System.out.println(\"run \" + this);\n    }\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java"
      ]
    }
  },
  "66235e8": {
    "bug_report": {
      "summary": "Bug 274986  DocumentParser incorrectly caches DTD InputStream",
      "description": "Build ID: 1.6.3\n\nSteps To Reproduce:\nAttempt to parse two aop.xml files using two DocumentParsers that are loaded by the same class loader. If the DTD is loaded from a JAR file you'll get an NPE at  java.util.zip.Inflater.inflateBytes(Native Method).\n\nMore information:\nDocumentParser caches the DTD InputStream in a static final field. Many InputStreams are unusable after being closed so the same instance should not be used here. \n\nFor InflaterInputStreams there seems to be a bug in the JRE that prevents the stream from reporting itself as closed when you use it again."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"
      ]
    }
  },
  "19355dd": {
    "bug_report": {
      "summary": "Bug 120375  Support Load-Time Weaving and HotSwap",
      "description": null
    },
    "commit": {
      "diff": [
        "loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java"
      ]
    }
  },
  "1b663a9": {
    "bug_report": {
      "summary": "Bug 272591  [WARNING] couldn't find aspectjrt.jar on classpath",
      "description": "I am using the aspectj runtime jar that is in the spring source bundle repository.  The have renamed their jar to match their naming conventions and it is causing the warning to occur.  Their bundle is named com.springsource.org.aspectj.runtime-1.6.3.RELEASE.jar.  It would be nice if this warning was not printed out in this case."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "791f8a7": {
    "bug_report": {
      "summary": "Bug 147845  Generic abstract aspect hierarchies 3 deep or higher can fail when type parameters have bounds",
      "description": "The program below should compile happily, but fails with:\n\n[error] Type B does not meet the specification for type parameter 1 (A extends MyBase) in generic type Base\nabstract aspect Middle<B extends MyBase> extends Base<B> {}\n                ^^^^^                                      \n\n\nThe test program:\n------------------\n\ninterface MyBase {};\ninterface MyMarker extends MyBase {}\n\nabstract aspect Base<A extends MyBase> {}\n\nabstract aspect Middle<B extends MyBase> extends Base<B> {}\n\naspect Sub extends Middle<MyMarker> {}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java",
        "weaver/src/org/aspectj/weaver/TypeVariable.java"
      ]
    }
  },
  "be750d5": {
    "bug_report": {
      "summary": "Bug 108377  Verify Error on intertype field indirection in intertype method",
      "description": "When I run this program:\n\npublic class A {\n    public static void main(String[] args) {\n\tSystem.out.println(new A().foo());\n    }\n}\n\naspect Aspect1 {\n    public A A.a;\n    public String A.value;\n\n    public String A.foo() {\n\treturn a.value;\n    }\n}\n\nI get the error:\n\nException in thread \"main\" java.lang.VerifyError: (class: Aspect1, method:\najc$interMethod$Aspect1$A$foo signature: (LA;)Ljava/lang/String;) Incompatible\ntype for getting or setting field\n        at A.<init>(A.java:1)\n        at A.main(A.java:3)\n\nJavap reveals that the field name is missing the class name part:\n\n   1:   getfield        #50; //Field a:LA;\n   4:   getfield        #46; //Field A.value:Ljava/lang/String;\n\nIf I replace a.value by this.a.value, the correct code is generated:\n\n   1:   getfield        #37; //Field A.a:LA;\n   4:   getfield        #46; //Field A.value:Ljava/lang/String;"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "369de87": {
    "bug_report": {
      "summary": "Bug 148409  [generics] ClassCastException in UnresolvedType.java:348",
      "description": "I am using AspectJ load time weaving with Spring 2.0 RC1 to inject my entities, and I am getting the following exception:\n\njava.lang.ClassCastException: org.aspectj.apache.bcel.classfile.Signature$TypeVariableSignature\n\tat org.aspectj.weaver.UnresolvedType.forGenericTypeSignature(UnresolvedType.java:348)\n\tat org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType(BcelWorld.java:385)\n\tat org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.accept(ClassLoaderWeavingAdaptor.java:492)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.shouldWeave(WeavingAdaptor.java:230)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:210)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:55)\n\tat sun.instrument.TransformerManager.transform(TransformerManager.java:122)\n\tat sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\n.\n.\n.\n\nHaving examined the call stack under the debugger, this seems to happening when the weaver is attempting to determine whether a particular class should be weaved. The exception is thrown in the following method, at the cast highlighted below.\n\n\n    public static UnresolvedType forGenericTypeSignature(String sig,String declaredGenericSig) {\n    \tUnresolvedType ret = UnresolvedType.forSignature(sig);\n    \tret.typeKind=TypeKind.GENERIC;\n    \t\n    \tClassSignature csig = new GenericSignatureParser().parseAsClassSignature(declaredGenericSig);\n    \t\n    \tSignature.FormalTypeParameter[] ftps = csig.formalTypeParameters;\n    \tret.typeVariables = new TypeVariable[ftps.length];\n    \tfor (int i = 0; i < ftps.length; i++) {\n\t\t\tSignature.FormalTypeParameter parameter = ftps[i];\n\t\t\tSignature.ClassTypeSignature cts = (Signature.ClassTypeSignature)parameter.classBound; // EXCEPTION HERE!\n\t\t\tret.typeVariables[i]=new TypeVariable(ftps[i].identifier,UnresolvedType.forSignature(cts.outerType.identifier+\";\"));\n\t\t}\n    \tret.signatureErasure = sig;\n    \tret.signature = ret.signatureErasure;\n    \treturn ret;\n    }\n\n\nThe class in question (which is not one that requires weaving), has the following signature:\n\npublic class HibernateEntityDAO<interfaceT extends SecurityEntity, concreteT extends interfaceT> extends HibernateDaoSupport\n        implements EntityDAO<interfaceT>\n \nThe exception is happening because the parameter.classBound member is not of type Signature.ClassTypeSignature, but an instance of Signature.TypeVariableSignature.\n\nThe loop variable i is 1, and parameter.identifier is concreteT, so it looks like it's the signature of the second type parameter (concreteT) that is tripping up the weaver."
    },
    "commit": {
      "diff": [
        "tests/bugs153/pr148409/Blurgh.java",
        "weaver/src/org/aspectj/weaver/UnresolvedType.java",
        "tests/bugs153/pr148409/X.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "5765d53": {
    "bug_report": {
      "summary": "Bug 83565  BCException \"bad type name\" thrown when compiling",
      "description": "I just downloaded AJDT version 1.2.0.20050124144759 and I am running Eclipse\n3.1M4.  I tried to use aspectJ on an existing Java 5 project.  There are no\naspects in it yet, just straight Java 5.  The project runs just fine as a\nstandard Java project. \n\nWhen add the AspectJ nature and I try to compile the project, no class files are\ngenerated and I get this error generated on a type that is parameterized:\n\nInternal compiler error\norg.aspectj.weaver.BCException: Bad type name: \n\n\tat org.aspectj.weaver.TypeX.nameToSignature(TypeX.java:634)\n\n\tat org.aspectj.weaver.TypeX.forName(TypeX.java:87)\n\n\tat\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:155)\n\n\tat\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings(EclipseFactory.java:163)\n\n\tat\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:229)\n\n\tat\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:224)\n\n\tat\norg.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:675)\n\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.traverse(ConstructorDeclaration.java:447)\n\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1133)\n\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:314)\n\n\tat\norg.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:171)\n\n\tat\norg.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:111)\n\n\tat\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:354)\n\n\tat\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:138)\n\n\tat\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:373)\n\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:682)\n\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:168)\n\n\tat\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:102)\n\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\n\n\tat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:165)\n\n\nThe source code of the file that generates this error is:\n\npackage mj.compiler.ast;\n\nimport java.util.Vector;\n\nimport mj.compiler.Driver;\nimport mj.compiler.Visitor;\n\npublic class Sequence<T extends AST> extends AST {\n\t\n\tprivate Vector<T> elements = new Vector<T>();\n\t\n\tpublic Sequence() {\n\t\tsuper(0, 0);\n    }\n\t\n\tpublic Sequence(T element) {\n\t\tsuper(element);\n\t\telements.add(element);\n    }\n    \n\tpublic int length()       { return elements.size(); }\n\tpublic T elementAt(int i) { return elements.elementAt(i); }\n\n    public Sequence add(T element) {\n    \telements.add(element);\n\t\treturn this;\n    }\n    \n    public Sequence add(int pos, T element) {\n    \telements.add(pos, element);\n    \treturn this;\n    }\n    \n    public Sequence addAll(Sequence<T> others) {\t\t\n\t\tif(  others == null ) return this;\n\t\telements.addAll(others.elements);\n\t\treturn this;\n    }\n    \n    public void visitChildren(Visitor v) {\n    \tfor( AST element : elements ) {\n    \t\telement.visit(v);\n        }\n    }\n    \n    public void replaceChild(AST old, AST gnu) {\n    \tT NEW = (T)gnu;\n    \tfor(int i = 0; i < elements.size(); i++ ) {\n    \t\tif( elements.get(i) == old ) {\n    \t\t\telements.set(i, NEW);\n    \t\t\treturn;\n    \t\t}\n    \t}\n    \tthrow new Driver.CompileError(\"Can't find child in replaceChild.\");\n    }\n\n\t/*** START GENERATED VISITOR PROTOCOL ***///TODO\n    public void visit(mj.compiler.Visitor v) {\n        v.visitSequence(this);\n    }\n\t/*** END GENERATED VISITOR PROTOCOL ***/\n}\n\n\nHope this helps something.\n\nps- I am able to create and run a very simple AspectJ project with an aspect,\nadvice, and some Java 5 syntax."
    },
    "commit": {
      "diff": [
        "ajde/testsrc/org/aspectj/ajde/AjdeTests.java",
        "ajde/testdata/bug-83565/Bug.java",
        "ajde/testsrc/org/aspectj/ajde/GenericsTest.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java"
      ]
    }
  },
  "427c0d3": {
    "bug_report": {
      "summary": "Bug 80916  In some cases the structure model doesn't contain the \"matches declare\" relationship",
      "description": "With a project containing one class and one aspect:\n\npublic class HelloClass {\n\n\tpublic static void main(String[] args) {\n\t\tnew HelloClass().sayHello();\n\t}\n\t\n\tpublic void sayHello() {\n\t\tSystem.out.println(\"Hello\");\n\t}\n\t\n}\n\n\npublic aspect A1 {\n\n\tpointcut test() : get(* System.out);\n\t\n\tdeclare warning : test() && !within(A1)\n\t\t : \"test warning\";\n\t\n\tpointcut anotherTest() : \n\t\texecution(void HelloClass.sayHello(..));\n\t\n\tafter() returning : anotherTest() {\n\t\tSystem.out.println(\"returning....\");\n\t}\n\t\t\n}\n\nThe following is returned from the structure model:\n\nasmRelMap entry: HelloClass.sayHello(), relationship: advised by, target: \nA1.afterReturning(): anotherTest..\nasmRelMap entry: A1.afterReturning(): anotherTest.., relationship: uses \npointcut, target: A1.anotherTest()\nasmRelMap entry: A1.afterReturning(): anotherTest.., relationship: advises, \ntarget: HelloClass.sayHello()\nasmRelMap entry: HelloClass.sayHello(), relationship: advised by, target: \nA1.afterReturning(): anotherTest..\nasmRelMap entry: A1.anotherTest(), relationship: pointcut used by, target: \nA1.afterReturning(): anotherTest..\nasmRelMap entry: A1.declare warning: \"test warning\", relationship: matched by, \ntarget: HelloClass.sayHello()\n\nIn other words, the model is saying that there are two entries the same:\n\nasmRelMap entry: HelloClass.sayHello(), relationship: advised by, target: \nA1.afterReturning(): anotherTest..\n\nwhereas one of these should be the \"matches declare\" relationship relating to \nthe declare warning.\n\nChanging the aspect to be:\n\n\npublic aspect A1 {\n\n\tpointcut test() : get(* System.out);\n\t\n\tdeclare warning : test() && !within(A1)\n\t\t : \"test warning\";\n\t\n\tpointcut anotherTest() : \n\t\texecution(void HelloClass.sayHello(..));\n\t\n\tafter() returning : anotherTest() {\n\t\tSystem.out.println(\"returning....\");\n\t}\n\t\n\tafter() returning : test() {\n\t\tSystem.out.println(\"returning again!\");\n\t}\n\t\n}\n\nmeans that the IRelationshipMap does now contain the \"matches declare\" \nrelationship.\n\nThis is all with AspectJ 5 M1."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java"
      ]
    }
  },
  "12e6334": {
    "bug_report": {
      "summary": "Bug 91417  -Xreweavable should be the default",
      "description": "In order to facilitate widespread use of LTW we need to ensure code is \ncompiled with Xreweavable. However we cannot rely on developers to use this \nflag so it must be the default. Unfortunately the current code bloat is \nunacceptable for large projects."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "loadtime/src/org/aspectj/weaver/loadtime/Options.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java",
        "tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BinaryFormsTestCase.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java",
        "weaver/src/org/aspectj/weaver/WeaverStateInfo.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "tests/java5/ataspectj/ataspectj/ltwlog/MainVerboseAndShow.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "testing/newsrc/org/aspectj/testing/WeaveSpec.java"
      ]
    }
  },
  "a968890": {
    "bug_report": {
      "summary": "Bug 298786  suspected problem with handling of multiple aop.xml files",
      "description": null
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java"
      ]
    }
  },
  "794f9b5": {
    "bug_report": {
      "summary": "Bug 108892  Load Time Weaving problem with Aspect Definition at 2 Levels of Hierarchy",
      "description": "I am trying to weave into Tomcat with a system-level aspect (META-INF/aop.xml \nis found in a jar on the system classpath), and also have a Web application \nwith an aop.xml properly deployed. When I try to run them both together, only \nthe system-level aspects work. If I remove the system-level aspect jar from the \nclasspath, the application-level aspects work. What would be a reasonable way \nto isolate this into a test case? If I could package up a simple system.jar and \napp.war file for Tomcat 5.5.9, would that be useful for you to use in debugging \nit? I tried making a simple standalone version with 2 aop.xml files in the same \napp classloader but that works just fine."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java",
        "tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java",
        "tests/java5/ataspectj/ataspectj/hierarchy/app/SubApp.java",
        "tests/java5/ataspectj/ataspectj/hierarchy/AppContainerTest.java"
      ]
    }
  },
  "5c49c0b": {
    "bug_report": {
      "summary": "Bug 269578  Resource deletion in source folder on full build when source and output folders are the same.",
      "description": "On the clean before a full aspectj build resources are removed from the output folder.  This is true even when the output and the source folder are the same.  In this case, the resources are deleted from the source folder!\n\nWhen the source and output folders are the same, resources should never be deleted."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "6e155a6": {
    "bug_report": {
      "summary": "Bug 74238  Applet which uses cflow pointcut gets AccessControlException",
      "description": "When I used cflow pointcut for my applet, I couldn't launch the Applet.\n\njava.lang.ExceptionInInitializerError\n        at SandAspect.ajc$preClinit(SandAspect.aj)\n        at SandAspect.<clinit>(SandAspect.aj)\n        at SandApplet.init(SandApplet.java)\n        at sun.applet.AppletPanel.run(AppletPanel.java:353)\n        at java.lang.Thread.run(Thread.java:534)\nCaused by: java.security.AccessControlException: access denied (java.util.Proper\ntyPermission aspectj.runtime.cflowstack.usethreadlocal read)\n        at java.security.AccessControlContext.checkPermission(AccessControlConte\nxt.java:269)\n        at java.security.AccessController.checkPermission(AccessController.java:\n401)\n        at java.lang.SecurityManager.checkPermission(SecurityManager.java:524)\n        at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:12\n76)\n        at java.lang.System.getProperty(System.java:612)\n        at org.aspectj.runtime.internal.CFlowStack.selectFactoryForVMVersion(CFl\nowStack.java:124)\n        at org.aspectj.runtime.internal.CFlowStack.<clinit>(CFlowStack.java:59)\n        ... 5 more\n\nIt because CFlowStack uses System.getProperty method with no try..catch block. \nApplet doesn't have permission to read system property:\n\"aspectj.runtime.cflowstack.usethreadlocal\".\n\nworkaround:\nmodify CFlowStack.java(1.5) line 123,124 like this\n-----\nprivate static String getSystemPropertyWithNoSecurityException(\n  String aPropertyName, String aDefaultValue){\n  try{\n    return System.getProperty(aPropertyName, aDefaultValue);\n  } catch(java.lang.SecurityException e){\n    return aDefaultValue;\n  }\n}\n\nprivate static void selectFactoryForVMVersion() {\n  String override = getSystemPropertyWithNoSecurityException(\n    \"aspectj.runtime.cflowstack.usethreadlocal\"\n    , \"unspecified\"\n  );\n-----\nI think defining getSystemPropertyWithNoSecurityException(or more\nsimple name :-)) method in some utility class and using it where you call\nSystem.getProperty are better way."
    },
    "commit": {
      "diff": [
        "ajde/testdata/SecurityManagerTest/src/HelloWorld.java",
        "runtime/src/org/aspectj/runtime/internal/CFlowStack.java",
        "runtime/src/org/aspectj/runtime/internal/CFlowCounter.java"
      ]
    }
  },
  "d916002": {
    "bug_report": {
      "summary": "Bug 124399  AJDT AspectJ Internal Compiler Error",
      "description": "In Eclipse 3.1.1 with AJDT 1.3 (the December 20th 2005 release) I got this message in an error dialog:\n\norg.aspectj.weaver.BCException\nat org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen(LazyClassGen.java:1216)\nat org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen(LazyClassGen.java:1201)\nat org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:2048)\nat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:232)\nat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:588)\nat org.aspectj.weaver.Shadow.implement(Shadow.java:405)\nat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic class edu.ucsd.aosd.MyApplication extends java.lang.Object:\n  public void <init>():\n                    ALOAD_0     // edu.ucsd.aosd.MyApplication this   (line 5)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void edu.ucsd.aosd.MyApplication.<init>())\n    |               RETURN\n    constructor-execution(void edu.ucsd.aosd.MyApplication.<init>())\n  end public void <init>()\n\n  public static void main(String[])    org.aspectj.weaver.MethodDeclarationLineNumber: 8:124\n:\n    method-execution(void edu.ucsd.aosd.MyApplication.main(java.lang.String[]))\n    |               ALOAD_0     // java.lang.String[] args   (line 9)\n    |               ASTORE 4\n    |               ICONST_0\n    |               ISTORE_2\n    |               ALOAD 4\n    |               ARRAYLENGTH\n    |               ISTORE_3\n    |               GOTO L1\n    |           L0: ALOAD 4\n    |               ILOAD_2\n    |               AALOAD\n    |               ASTORE_1\n    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 10)\n    |               NEW java.lang.StringBuilder\n    |               DUP\n    |               LDC \"got: \"\n    |               INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V\n    |               ALOAD_1     // java.lang.String arg\n    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String))\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;\n    | method-call(java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String))\n    | method-call(java.lang.String java.lang.StringBuilder.toString())\n    | |             INVOKEVIRTUAL java.lang.StringBuilder.toString ()Ljava/lang/String;\n    | method-call(java.lang.String java.lang.StringBuilder.toString())\n    |               ASTORE 5\n    |               ASTORE 6\n    | method-call(void java.io.PrintStream.println(java.lang.String))\n    | |             ALOAD 6\n    | |             ALOAD 5\n    | |             INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V\n    | method-call(void java.io.PrintStream.println(java.lang.String))\n    |               GETSTATIC java.lang.System.out Ljava/io/PrintStream;   (line 11)\n    |               LDC \"got: %s\\n\"\n    |               ICONST_1\n    |               ANEWARRAY java.lang.Object\n    |               DUP\n    |               ICONST_0\n    |               ALOAD_1     // java.lang.String arg\n    |               AASTORE\n    | method-call(java.io.PrintStream java.io.PrintStream.printf(java.lang.String, java.lang.Object[]))\n    | |             INVOKEVIRTUAL java.io.PrintStream.printf (Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;\n    | method-call(java.io.PrintStream java.io.PrintStream.printf(java.lang.String, java.lang.Object[]))\n    |               POP\n    |               IINC 2 1   (line 9)\n    |           L1: ILOAD_2\n    |               ILOAD_3\n    |               IF_ICMPLT L0\n    |               RETURN   (line 13)\n    method-execution(void edu.ucsd.aosd.MyApplication.main(java.lang.String[]))\n  end public static void main(String[])\n\nend public class edu.ucsd.aosd.MyApplication\n\nwhen implementing on shadow method-call(void java.io.PrintStream.println(java.lang.String))\nwhen weaving type edu.ucsd.aosd.MyApplication\nwhen weaving classes \nwhen weaving \nwhen incrementally building BuildConfig[C:\\EclipseWorkspace\\.metadata\\.plugins\\org.eclipse.ajdt.core\\AspectJSemanticsTest.generated.lst] #Files=2\n\nIt occured when I editing this file, in an AspectJ project with an recently renamed .aj extension:\n\npackage edu.ucsd.aosd;\n\nimport java.io.PrintStream;\n\npublic class MyApplication\n{\n    // main\n    public static void main(String[] args) {\n        for (String arg : args) {\n            System.out.println(\"got: \" + arg);\n            System.out.printf(\"got: %s\\n\", arg);\n        }\n    }\n}\n\naspect Printing {\n    pointcut printlnCalls(PrintStream ps, String out):\n        call(* PrintStream+.println(String)) && target(ps) && args(out);\n    Object around(PrintStream ps, String out):\n        printlnCalls(ps, out) && !adviceexecution() {\n        return proceed(ps, out);\n    }\n    \n    pointcut printfCalls(PrintStream ps, String fmt, Object[] objs):\n        call(* PrintStream+.printf(String, Object...#####))\n        && target(ps) && args(fmt, objs);\n}\n\nWhere \"#####\" is where my cursor was when I saved. My previously saved version didn't have the printfCalls pointcut nor the call to printf in the main. (Thus, you might want to try the println version first, save it, and then make the new additions. Though, I hope the debug information is enough.)"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java"
      ]
    }
  },
  "851da68": {
    "bug_report": {
      "summary": "Bug 71377  Cannot advise private method call in around advice",
      "description": "Pointcuts should match call joint points in advice. However AspectJ does not \nmatch calls to _private_ methods in around advice. The same applies to get/set \npointcuts for _private fields. This is probably because in the testcase below \na call to \"privateMethod()\" in the body of the around advice is a call to an \naccessor method:\n\n        \najc$inlineAccessMethod$bug_nnnn_JoinPointInAroundAdvice$bug_nnnn_JoinPointInAro\nundAdvice$privateMethod(\"around\");\n\npublic aspect JoinPointInAroundAdvice {\n\n\tprivate static Set privateCalls = new HashSet();\n\tprivate static Set publicCalls = new HashSet();\n\t\n\tpointcut internalCall () :\n\t\tcall(* JoinPointInAroundAdvice.privateMethod(..));\n\t\n\tbefore () : internalCall () {\n\t\tprivateCalls.add(thisJoinPoint);\n\t}\n\n\tpointcut externalCall () :\n\t\tcall(* JoinPointInAroundAdvice.publicMethod(..));\n\t\n\tbefore () : externalCall () {\n\t\tpublicCalls.add(thisJoinPoint);\n\t}\n\t\n\tpointcut execTest () :\n\t\texecution(* JoinPointInAroundAdvice.test());\n\t\n\tbefore () : execTest () {\n\t\tprivateMethod(\"before\");\n\t\tpublicMethod(\"before\");\n\t}\n\t\n\tvoid around () : execTest () {\n\t\tprivateMethod(\"around\");\n\t\tpublicMethod(\"around\");\n\t\tproceed();\n\t}\n\t\n//\tvoid around () : execTest () {\n//\t\tRunnable runnable = new Runnable () {\n//\t\t\tpublic void run () {\n//\t\t\t\tprivateMethod(\"around closure\");\n//\t\t\t\tpublicMethod;\n//\t\t\t\tproceed();\n//\t\t\t}\n//\t\t};\n//\t\trunnable.run();\n//\t}\n\t\n\tafter () : execTest () {\n\t\tprivateMethod(\"after\");\n\t\tpublicMethod(\"after\");\n\t}\n\t\n\tprivate static void privateMethod (String from) {\n\t\tSystem.out.println(\"? privateMethod() \" + from);\n\t}\n\t\n\tpublic static void publicMethod (String from) {\n\t\tSystem.out.println(\"? publicMethod() \" + from);\n\t}\n\t\n\tpublic static void test () {\n\t\tSystem.out.println(\"? test()\");\n\t\tprivateMethod(\"test\");\n\t\tpublicMethod(\"test\");\n\t}\n\t\n\tpublic static void main (String[] args) {\n\t\ttest();\n\t\t\n\t\tif (privateCalls.size() != publicCalls.size()) {\n\t\t\tthrow new RuntimeException(\"Missing join point\");\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"Success.\");\n\t\t}\n\t}\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "tests/bugs/AroundAdviceJPs/FieldGetJoinPointsInAroundAdvice.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java",
        "tests/bugs/AroundAdviceJPs/FieldJoinPointsInAroundAdvice.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java",
        "tests/bugs/AroundAdviceJPs/JoinPointInAroundAdvice.java"
      ]
    }
  },
  "69e24e9": {
    "bug_report": {
      "summary": "Bug 142466  [ltw] Fail at runtime if abstract methods are not implemented in a hierarchy that finishes with an XML aspect",
      "description": "see pr125480 - copying the test for that will be a good basis for a test for this bug.  We don't check that when defining a concrete aspect there are no unimplemented abstract methods in the aspect we are concretizing."
    },
    "commit": {
      "diff": [
        "tests/bugs152/pr142466/HelloWorld.java",
        "tests/bugs152/pr142466/case2/AtAspectTestConcreteMethods.java",
        "loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java",
        "tests/bugs152/pr142466/case2/HelloWorld.java",
        "tests/bugs152/pr142466/AtAspectTestConcreteMethods.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "fabf159": {
    "bug_report": {
      "summary": "Bug 116255  XML Linkage Error with LTW",
      "description": "I am trying out a recent dev build of AspectJ and am now seeing a new linkage \nerror when I load a Web app that contains an XML deployment descriptor. I'm \ntrying to narrow down the date when this error first appeared. If I build and \nrun with the Sept. 23 dev build all works properly. If I build and run with the \nNov. 14 dev build it fails like this ...\n\nHere's the output:\n\nSEVERE: Error deploying configuration descriptor jpetstore.xml\njava.lang.LinkageError: org/apache/xerces/jaxp/SAXParserFactoryImpl : already \ndefined in loader\n        at java.lang.ClassLoader.defineClass(Ljava.lang.String;\n[BIILjava.security.ProtectionDomain;)Ljava.lang.Class;(Unknown Source\n)\n        at java.security.SecureClassLoader.defineClass\n(SecureClassLoader.java:124)\n        at org.apache.catalina.loader.WebappClassLoader.findClassInternal\n(WebappClassLoader.java:1629)\n        at org.apache.catalina.loader.WebappClassLoader.findClass\n(WebappClassLoader.java:850)\n        at org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1299)\n        at org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1181)\n        at javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:88)\n        at javax.xml.parsers.FactoryFinder.findJarServiceProvider\n(FactoryFinder.java:278)\n        at javax.xml.parsers.FactoryFinder.find(FactoryFinder.java:185)\n        at javax.xml.parsers.SAXParserFactory.newInstance\n(SAXParserFactory.java:107)\n        at org.apache.tomcat.util.digester.Digester.getFactory\n(Digester.java:486)\n        at org.apache.tomcat.util.digester.Digester.getParser(Digester.java:691)\n        at org.apache.tomcat.util.digester.Digester.getXMLReader\n(Digester.java:899)\n        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1561)\n        at org.apache.catalina.startup.TldConfig.tldScanStream\n(TldConfig.java:513)\n        at org.apache.catalina.startup.TldConfig.tldScanTld(TldConfig.java:545)\n        at org.apache.catalina.startup.TldConfig.execute(TldConfig.java:300)\n        at org.apache.catalina.core.StandardContext.processTlds\n(StandardContext.java:4193)\n        at org.apache.catalina.core.StandardContext.start\n(StandardContext.java:4049)\n        at org.apache.catalina.core.ContainerBase.addChildInternal\n(ContainerBase.java:759)\n        at org.apache.catalina.core.ContainerBase.addChild\n(ContainerBase.java:739)\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524)\n        at org.apache.catalina.startup.HostConfig.deployDescriptor\n(HostConfig.java:589)\n        at org.apache.catalina.startup.HostConfig.deployDescriptors\n(HostConfig.java:536)\n        at org.apache.catalina.startup.HostConfig.deployApps\n(HostConfig.java:471)\n        at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1102)\n        at org.apache.catalina.startup.HostConfig.lifecycleEvent\n(HostConfig.java:311)\n        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent\n(LifecycleSupport.java:119)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1020)\n        at org.apache.catalina.core.StandardHost.start(StandardHost.java:718)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012)\nerror can't determine implemented interfaces of missing type javax.xml.rpc.Call\nwhen matching pointcut ((((within(*) && call(public * javax.xml.rpc.Call.invoke*\n(..))) && target(BindingTypePattern(java.lang.Object\n, 0))) && if(boolean \nglassbox.inspector.monitor.resource.RemoteCallMonitor.ajc$if_12())) && \npersingleton(glassbox.inspector.monitor.\nresource.RemoteCallMonitor))\nwhen matching shadow method-call(boolean \norg.apache.crimson.parser.ContentModel.empty())\nwhen weaving type org.apache.crimson.parser.ContentModel\nwhen weaving classes\nwhen weaving\n\nabort trouble in:\nfinal class org.apache.crimson.parser.ContentModel extends java.lang.Object:\n  public char type\n  public Object content\n  public org.apache.crimson.parser.ContentModel next\n  private org.apache.crimson.parser.SimpleHashtable cache\n  public void <init>(String):\n                    ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 116)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void org.apache.crimson.parser.ContentModel.<init>\n(java.lang.String))\n    |               ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 110)\n    |               NEW org.apache.crimson.parser.SimpleHashtable\n    |               DUP\n    | constructor-call(void org.apache.crimson.parser.SimpleHashtable.<init>())\n    | |             INVOKESPECIAL \norg.apache.crimson.parser.SimpleHashtable.<init> ()V\n    | constructor-call(void org.apache.crimson.parser.SimpleHashtable.<init>())\n    |               PUTFIELD org.apache.crimson.parser.ContentModel.cache \nLorg/apache/crimson/parser/SimpleHashtable;\n    |               ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 117)\n    |               ICONST_0\n    |               PUTFIELD org.apache.crimson.parser.ContentModel.type C\n    |               ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 118)\n    |               ALOAD_1     // java.lang.String element\n    |               PUTFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n    |               RETURN   (line 119)\n    constructor-execution(void org.apache.crimson.parser.ContentModel.<init>\n(java.lang.String))\n  end public void <init>(String)\n\n  public void <init>(char, org.apache.crimson.parser.ContentModel):\n                    ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 125)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void org.apache.crimson.parser.ContentModel.<init>\n(char, org.apache.crimson.parser.ContentModel))\n    |               ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 110)\n    |               NEW org.apache.crimson.parser.SimpleHashtable\n    |               DUP\n    | constructor-call(void org.apache.crimson.parser.SimpleHashtable.<init>())\n    | |             INVOKESPECIAL \norg.apache.crimson.parser.SimpleHashtable.<init> ()V\n    | constructor-call(void org.apache.crimson.parser.SimpleHashtable.<init>())\n    |               PUTFIELD org.apache.crimson.parser.ContentModel.cache \nLorg/apache/crimson/parser/SimpleHashtable;\n    |               ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 126)\n    |               ILOAD_1     // char type\n    |               PUTFIELD org.apache.crimson.parser.ContentModel.type C\n    |               ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 127)\n    |               ALOAD_2     // org.apache.crimson.parser.ContentModel \ncontent\n    |               PUTFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n    |               RETURN   (line 128)\n    constructor-execution(void org.apache.crimson.parser.ContentModel.<init>\n(char, org.apache.crimson.parser.ContentModel))\n  end public void <init>(char, org.apache.crimson.parser.ContentModel)\n\n  public boolean empty():\n    method-execution(boolean org.apache.crimson.parser.ContentModel.empty())\n    |               ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 137)\n    |               GETFIELD org.apache.crimson.parser.ContentModel.type C\n    |               LOOKUPSWITCH\n    |                 0:        L1\n    |                 42:       L0\n    |                 43:       L1\n    |                 44:       L7\n    |                 63:       L0\n    |                 124:      L2\n    |                 default:  L13\n    |           L0: ICONST_1   (line 140)\n    |               IRETURN\n    |           L1: ICONST_0   (line 144)\n    |               IRETURN\n    |           L2: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 147)\n    |               GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n    |               INSTANCEOF org.apache.crimson.parser.ContentModel\n    |               IFEQ L3\n    |               ALOAD_0     // org.apache.crimson.parser.ContentModel this\n    |               GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n    |               CHECKCAST org.apache.crimson.parser.ContentModel\n    | method-call(boolean org.apache.crimson.parser.ContentModel.empty())\n    | |             INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty \n()Z\n    | method-call(boolean org.apache.crimson.parser.ContentModel.empty())\n    |               IFEQ L3\n    |               ICONST_1   (line 149)\n    |               IRETURN\n    |           L3: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 151)\n    |               GETFIELD org.apache.crimson.parser.ContentModel.next \nLorg/apache/crimson/parser/ContentModel;\n    |               ASTORE_1\n    |               GOTO L6\n    |           L4: ALOAD_1     // org.apache.crimson.parser.ContentModel m   \n(line 154)\n    |               INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty \n()Z\n    |               IFEQ L5\n    |               ICONST_1   (line 155)\n    |               IRETURN\n    |           L5: ALOAD_1     // org.apache.crimson.parser.ContentModel m   \n(line 153)\n    |               GETFIELD org.apache.crimson.parser.ContentModel.next \nLorg/apache/crimson/parser/ContentModel;\n    |               ASTORE_1     // org.apache.crimson.parser.ContentModel m\n    |           L6: ALOAD_1     // org.apache.crimson.parser.ContentModel m   \n(line 152)\n    |               IFNONNULL L4\n    |               ICONST_0   (line 157)\n    |               IRETURN\n    |           L7: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 160)\n    |               GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n    |               INSTANCEOF org.apache.crimson.parser.ContentModel\n    |               IFEQ L8\n    |               ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 161)\n    |               GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n    |               CHECKCAST org.apache.crimson.parser.ContentModel\n    |               INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty \n()Z\n    |               IFNE L9\n    |               ICONST_0   (line 162)\n    |               IRETURN\n    |           L8: ICONST_0   (line 165)\n    |               IRETURN\n    |           L9: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 167)\n    |               GETFIELD org.apache.crimson.parser.ContentModel.next \nLorg/apache/crimson/parser/ContentModel;\n    |               ASTORE_2\n    |               GOTO L12\n    |          L10: ALOAD_2     // org.apache.crimson.parser.ContentModel m   \n(line 170)\n    |               INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty \n()Z\n    |               IFNE L11\n    |               ICONST_0   (line 171)\n    |               IRETURN\n    |          L11: ALOAD_2     // org.apache.crimson.parser.ContentModel m   \n(line 169)\n    |               GETFIELD org.apache.crimson.parser.ContentModel.next \nLorg/apache/crimson/parser/ContentModel;\n    |               ASTORE_2     // org.apache.crimson.parser.ContentModel m\n    |          L12: ALOAD_2     // org.apache.crimson.parser.ContentModel m   \n(line 168)\n    |               IFNONNULL L10\n    |               ICONST_1   (line 173)\n    |               IRETURN\n    |          L13: NEW java.lang.InternalError   (line 176)\n    |               DUP\n    |               INVOKESPECIAL java.lang.InternalError.<init> ()V\n    |               ATHROW\n    method-execution(boolean org.apache.crimson.parser.ContentModel.empty())\n  end public boolean empty()\n\n  public boolean first(String):\n                    ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 186)\n                    GETFIELD org.apache.crimson.parser.ContentModel.cache \nLorg/apache/crimson/parser/SimpleHashtable;\n                    ALOAD_1     // java.lang.String token\n                    INVOKEVIRTUAL org.apache.crimson.parser.SimpleHashtable.get \n(Ljava/lang/String;)Ljava/lang/Object;\n                    CHECKCAST java.lang.Boolean\n                    ASTORE_2\n                    ALOAD_2     // java.lang.Boolean b   (line 189)\n                    IFNULL L0\n                    ALOAD_2     // java.lang.Boolean b   (line 190)\n                    INVOKEVIRTUAL java.lang.Boolean.booleanValue ()Z\n                    IRETURN\n                L0: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 193)\n                    GETFIELD org.apache.crimson.parser.ContentModel.type C\n                    LOOKUPSWITCH\n                      0:        L1\n                      42:       L1\n                      43:       L1\n                      44:       L5\n                      63:       L1\n                      124:      L12\n                      default:  L16\n                L1: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 198)\n                    GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n                    INSTANCEOF java.lang.String\n                    IFEQ L4\n                    ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 199)\n                    GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n                    ALOAD_1     // java.lang.String token\n                    IF_ACMPNE L2\n                    ICONST_1\n                    GOTO L3\n                L2: ICONST_0\n                L3: ISTORE_3\n                    GOTO L17\n                L4: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 201)\n                    GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n                    CHECKCAST org.apache.crimson.parser.ContentModel\n                    ALOAD_1     // java.lang.String token\n                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first \n(Ljava/lang/String;)Z\n                    ISTORE_3     // boolean retval\n                    GOTO L17   (line 202)\n                L5: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 205)\n                    GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n                    INSTANCEOF java.lang.String\n                    IFEQ L8\n                    ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 206)\n                    GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n                    ALOAD_1     // java.lang.String token\n                    IF_ACMPNE L6\n                    ICONST_1\n                    GOTO L7\n                L6: ICONST_0\n                L7: ISTORE_3     // boolean retval\n                    GOTO L17\n                L8: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 207)\n                    GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n                    CHECKCAST org.apache.crimson.parser.ContentModel\n                    ALOAD_1     // java.lang.String token\n                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first \n(Ljava/lang/String;)Z\n                    IFEQ L9\n                    ICONST_1   (line 208)\n                    ISTORE_3     // boolean retval\n                    GOTO L17\n                L9: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 209)\n                    GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n                    CHECKCAST org.apache.crimson.parser.ContentModel\n                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty \n()Z\n                    IFNE L10\n                    ICONST_0   (line 210)\n                    ISTORE_3     // boolean retval\n                    GOTO L17\n               L10: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 211)\n                    GETFIELD org.apache.crimson.parser.ContentModel.next \nLorg/apache/crimson/parser/ContentModel;\n                    IFNULL L11\n                    ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 212)\n                    GETFIELD org.apache.crimson.parser.ContentModel.next \nLorg/apache/crimson/parser/ContentModel;\n                    ALOAD_1     // java.lang.String token\n                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first \n(Ljava/lang/String;)Z\n                    ISTORE_3     // boolean retval\n                    GOTO L17\n               L11: ICONST_0   (line 214)\n                    ISTORE_3     // boolean retval\n                    GOTO L17   (line 215)\n               L12: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 218)\n                    GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n                    INSTANCEOF java.lang.String\n                    IFEQ L13\n                    ALOAD_0     // org.apache.crimson.parser.ContentModel this\n                    GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n                    ALOAD_1     // java.lang.String token\n                    IF_ACMPNE L13\n                    ICONST_1   (line 219)\n                    ISTORE_3     // boolean retval\n                    GOTO L17\n               L13: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 220)\n                    GETFIELD org.apache.crimson.parser.ContentModel.content \nLjava/lang/Object;\n                    CHECKCAST org.apache.crimson.parser.ContentModel\n                    ALOAD_1     // java.lang.String token\n                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first \n(Ljava/lang/String;)Z\n                    IFEQ L14\n                    ICONST_1   (line 221)\n                    ISTORE_3     // boolean retval\n                    GOTO L17\n               L14: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 222)\n                    GETFIELD org.apache.crimson.parser.ContentModel.next \nLorg/apache/crimson/parser/ContentModel;\n                    IFNULL L15\n                    ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 223)\n                    GETFIELD org.apache.crimson.parser.ContentModel.next \nLorg/apache/crimson/parser/ContentModel;\n                    ALOAD_1     // java.lang.String token\n                    INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first \n(Ljava/lang/String;)Z\n                    ISTORE_3     // boolean retval\n                    GOTO L17\n               L15: ICONST_0   (line 225)\n                    ISTORE_3     // boolean retval\n                    GOTO L17   (line 226)\n               L16: NEW java.lang.InternalError   (line 229)\n                    DUP\n                    INVOKESPECIAL java.lang.InternalError.<init> ()V\n                    ATHROW\n               L17: ILOAD_3     // boolean retval   (line 233)\n                    IFEQ L18\n                    ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 234)\n                    GETFIELD org.apache.crimson.parser.ContentModel.cache \nLorg/apache/crimson/parser/SimpleHashtable;\n                    ALOAD_1     // java.lang.String token\n                    GETSTATIC java.lang.Boolean.TRUE Ljava/lang/Boolean;\n                    INVOKEVIRTUAL org.apache.crimson.parser.SimpleHashtable.put \n(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Obj\nect;\n                    POP\n                    GOTO L19\n               L18: ALOAD_0     // org.apache.crimson.parser.ContentModel \nthis   (line 236)\n                    GETFIELD org.apache.crimson.parser.ContentModel.cache \nLorg/apache/crimson/parser/SimpleHashtable;\n                    ALOAD_1     // java.lang.String token\n                    GETSTATIC java.lang.Boolean.FALSE Ljava/lang/Boolean;\n                    INVOKEVIRTUAL org.apache.crimson.parser.SimpleHashtable.put \n(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Obj\nect;\n                    POP\n               L19: ILOAD_3     // boolean retval   (line 238)\n                    IRETURN\n  end public boolean first(String)\n\nend final class org.apache.crimson.parser.ContentModel"
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"
      ]
    }
  },
  "16adee6": {
    "bug_report": {
      "summary": "Bug 322832  early field resolution leading to problems for ITDs when declare parents in use",
      "description": "I have a type that is being used where a generic is being expected.  That generic specifies an upper bound.  The type only obeys the upper bound once a declare parents has applied to it.\n\nI have an intertype declaration (a field).  When the ITD is applied we do some work to see if it clashes with existing fields.  This causes existing fields to be resolved.  If this resolution triggers a bounds check for the declare parents affected type before the declare parents has applied, a problem will be raised.\n\nBasically if the target of the declare is processed before the intertype then we are ok, but that is luck based.\n\nWe should do the declare parents first (and declare annotation) and then do intertype declarations (since they may trigger this extra resolution)."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java"
      ]
    }
  },
  "3fa1bdd": {
    "bug_report": {
      "summary": "Bug 122742  [@AspectJ] VerifyError with @AfterThrowing/@AfterReturning and extra JoinPoint argument",
      "description": "If an @AspectJ aspect advises itself using after throwing advice that itself throws an exception running the resulting program causes a VerifyError:\n\njava.lang.VerifyError: (class: A, method: stop signature: ()V) catch_type not a subclass of Throwable\n\tat java.lang.Class.getDeclaredMethods0(Native Method)\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2365)\n\tat java.lang.Class.getMethod0(Class.java:2611)\n\tat java.lang.Class.getMethod(Class.java:1579)\n\tat org.aspectj.tools.ajc.AjcTestCase.run(AjcTestCase.java:608)\n\tat org.aspectj.testing.RunSpec.execute(RunSpec.java:56)\n\tat org.aspectj.testing.AjcTest.runTest(AjcTest.java:68)\n\tat org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111)\n\tat org.aspectj.systemtest.ajc150.Ajc150Tests.testError(Ajc150Tests.java:877)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)"
    },
    "commit": {
      "diff": [
        "tests/bugs151/pr122742/AfterReturningTest.java",
        "weaver/src/org/aspectj/weaver/Advice.java",
        "tests/bugs151/pr122742/AfterThrowingTest.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"
      ]
    }
  },
  "2a8d684": {
    "bug_report": {
      "summary": "Bug 318899  NPE with @args matching Argument by Type",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/reflect/ShadowMatchImpl.java"
      ]
    }
  },
  "d4219e1": {
    "bug_report": {
      "summary": "Bug 121616  [@AspectJ]Lacking import for JoinPoint crahes the compiler",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "tests/bugs151/pr121616.java"
      ]
    }
  },
  "16a0abd": {
    "bug_report": {
      "summary": "Bug 36430  Support -Xreweavable option",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "ajde/testdata/ReweavableTest/tjp/GetInfo.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "weaver/src/org/aspectj/weaver/WeaverStateInfo.java",
        "weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java",
        "weaver/src/org/aspectj/weaver/Shadow.java",
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java",
        "ajde/testsrc/org/aspectj/ajde/ReweavableTestCase.java",
        "testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java",
        "weaver/src/org/aspectj/weaver/Advice.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java",
        "weaver/src/org/aspectj/weaver/CrosscuttingMembers.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "ajde/testsrc/org/aspectj/ajde/AjdeTests.java",
        "ajde/testdata/ReweavableTest/CalculatePI.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "ajde/testdata/ReweavableTest/tjp/Demo.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelCflowStackFieldAdder.java"
      ]
    }
  },
  "07c2189": {
    "bug_report": {
      "summary": "Bug 148219  Wrong warning is reported",
      "description": "I used ajdt_1.3.1_for_eclipse_3.1.zip on Eclipse 3.1.2.\nBelow is my aspectj code.\n\npublic aspect MyMessages {\n    pointcut getResourceString(String key): args(key, ..) &&\n    call (* CommonPlugin.getResourceString(String, ..));\n\n    String around(String key):getResourceString(key) {\n    \treturn key;\n    }\n}\n\nThe warning message is\nThe parameter key is never read. \nSee my screenshot."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "tests/bugs153/PR148219/MyMessages.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "9dca72e": {
    "bug_report": {
      "summary": "Bug 132130  Missing relationship for declare @method when annotating a co-located method",
      "description": "For this program (when all entered into *one* file) I don't see a marker from the declare to the annotated method.  If the annotated method is in another file, I do... (not sure if fields/ctors/types are also a problem..)\n\npublic aspect basic {\n\n        declare @method:\n                 * debit(..):\n                 @Secured(role=\"supervisor\");\n\n}\n\nclass BankAccount {\n        public void debit(long accId,long amount) {\n        }\n}\n\n@interface Secured {\n        String role();\n}"
    },
    "commit": {
      "diff": [
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java",
        "asm/src/org/aspectj/asm/internal/ProgramElement.java",
        "ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java",
        "ajde/testsrc/org/aspectj/ajde/AsmRelationshipsTest.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java"
      ]
    }
  },
  "183fc23": {
    "bug_report": {
      "summary": "Bug 40192  build cancel during weaving",
      "description": "The build can not be cancelled during the bytecode weaving stage."
    },
    "commit": {
      "diff": [
        "ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java",
        "ajde/testdata/BuildCancelling/Cl2.java",
        "ajde/testsrc/org/aspectj/ajde/BuildCancellingTest.java",
        "ajde/testdata/BuildCancelling/Cl1.java",
        "bridge/src/org/aspectj/bridge/IProgressListener.java",
        "ajde/testdata/BuildCancelling/Cl3.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java",
        "ajde/testsrc/org/aspectj/ajde/AjdeTests.java",
        "ajde/testdata/BuildCancelling/HW.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "1a4c02c": {
    "bug_report": {
      "summary": "Bug 54625  Incremental support does not work with outjar",
      "description": "Either fix the class file deleting etc. to work with jars, or always do a batch \nbuild when working with outjars."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"
      ]
    }
  },
  "619a6ad": {
    "bug_report": {
      "summary": "Bug 104212  static method call from subclass signature is wrong",
      "description": "a very bad bug... or ?\n\nin the snip below, getMethod() says null and the factory is actually thinking\nthat test() is a static method of AspectJBugMain instead of Assert...\n\nwondering why we don't catch that in the test suite or what could happen\nrecently around that. Or is it something I am confused about ? (i doubt a\njp.getSignature().getMethod is supposed to return null in some cases though..)\n\n@Aspect\npublic class Sam {\n\n    @Pointcut(\"call(* *.*(..))\")\n            public void methodCalls() {\n    }\n\n    @Around(\"methodCalls() && !within(alex.sam.Sam) && within(alex..*)\")\n            public Object aroundMethodCalls(ProceedingJoinPoint jp) throws\nThrowable {\n        String typeName = jp.getSignature().getDeclaringTypeName();\n        System.out.println(\"declType \" + typeName);\n        System.out.println(\"method \" +\n((MethodSignature)jp.getSignature()).getMethod());\n\n        return jp.proceed();\n    }\n\n}\n\nclass Assert {\n    public static void test() {\n        System.out.println(\"RUN Assert.test\");\n    }\n}\n\nclass AspectJBugMain extends Assert {\n    public static void main(String[] args) {\n        test();\n    }\n//    public static void test() {\n//        System.out.println(\"RUN AspectJBugMain.test\");\n//    }\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "tests/java5/ataspectj/ataspectj/Bug104212.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java"
      ]
    }
  },
  "b664969": {
    "bug_report": {
      "summary": "Bug 287315  NPE using declare @type",
      "description": "reported by Ramnivas:\n\njava.lang.NullPointerException\n        at \norg.aspectj.weaver.bcel.BcelObjectType.hasAnnotation(BcelObjectType.java:558)\n        at \norg.aspectj.weaver.ReferenceType.hasAnnotation(ReferenceType.java:161)\n        at \norg.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:101)\n        at \norg.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:94)\n        at \norg.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly(TypePattern.java:513)\n        at \norg.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:129)\n        at \norg.aspectj.weaver.patterns.DeclareAnnotation.matches(DeclareAnnotation.java:269)\n        at \norg.aspectj.weaver.bcel.BcelWeaver.applyDeclareAtType(BcelWeaver.java:1590)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"
      ]
    }
  },
  "a17b51b": {
    "bug_report": {
      "summary": "Bug 54238  Restore build cancelling to Swing-based IDEs",
      "description": "Core compiler implementation changes have resulted in an incompatability with \nAJDE's build cancelling mechanism.  Once the core canceling behavior \nstabilizes this needs to be restored."
    },
    "commit": {
      "diff": [
        "ajbrowser/src/org/aspectj/tools/ajbrowser/BasicEditor.java"
      ]
    }
  },
  "89756cd": {
    "bug_report": {
      "summary": "Bug 371684  type construction for signature makes mistakes with wildcards",
      "description": "If you have a type with multiple type params, like this:\n\nFoo<?,T>\n\nthe signature is:\n\nLFoo<*TT;>;\n\nand the handling of * is not working in TypeFactory.  If that signature is passed in it will actually build:\n\nFoo<?>\n\nhaving lost the second type parameter, this breaks code later that has expectations on the number of params.  (e.g. ArrayIndexOutOfBoundsException when building parameterization map)"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java",
        "tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java"
      ]
    }
  },
  "4921f0c": {
    "bug_report": {
      "summary": "Bug 46298  Aspectj generate code does not de-compile cleanly.",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"
      ]
    }
  },
  "a116142": {
    "bug_report": {
      "summary": "Bug 129298  Contribution: Remove Memory Consuming Declared Signature",
      "description": "The code for weaver.Member#getDeclaredSignature() is never used in the weaver. My memory analysis showed this can pin several megabytes of memory in a large system. This patch removes it. YAGNI :-)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/MemberImpl.java",
        "weaver/src/org/aspectj/weaver/JoinPointSignature.java",
        "weaver/src/org/aspectj/weaver/Member.java"
      ]
    }
  },
  "7b831ff": {
    "bug_report": {
      "summary": "Bug 152366  LTW Within Patterns Should Accept AND For Consistency",
      "description": "The load-time weaving definition system accepts AND in addition to &amp;&amp; for pointcuts, but it silently accepts and then fails to work with type patterns that use AND. Such type patterns are important when creating exceptions (e.g., excluding weblogic..* &amp;&amp; !weblogic.jdbc..*) and using AND is also helpful here.\n\nI've attached a patch to support this and tests to show it's working."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java",
        "loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"
      ]
    }
  },
  "edd6539": {
    "bug_report": {
      "summary": "Bug 77163  Load time weaver default verbose setting",
      "description": "The default setting for the load time weaver is (as of 1.2.1rc1) to produce\nweaving messages rather than ignore them.  I think the default should be changed\nto ignore them.  \n\nAlso, I cannot override the default setting with -Daj.weaver.versose=\"False\". \nThis is the implied syntax from docs/examples/build.xml.  If this has changed\nthen build.xml should be updated.  Otherwise, the weaver should be fixed to use it!"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java",
        "weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java"
      ]
    }
  },
  "b0f270e": {
    "bug_report": {
      "summary": "Bug 76055  Some Pointcut PatternNodes are missing getters to traverse syntax tree",
      "description": "In order to find out which other pointcuts are referenced by a pointcut definition  \ni need to access the private members of the CflowPointcut, IfPointcut and\nNotPointcut PatternNodes found in the weaver module.\n\nUnlike the OrPointcut and AndPointcut classes, they are missing the appropriate\ngetter methods."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java",
        "weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java"
      ]
    }
  },
  "c667bcb": {
    "bug_report": {
      "summary": "Bug 138286  perthis() causes ClassCastException",
      "description": "When using perthis() with an aspect, I see the following Internal Compiler \n\nAJDT 1.3.1 / AspectJ 1.5.1a\nBuild 20060406092046\nEclipse 3.1.2, Windows XP, JDK 1.5\n\n\nError:\n\njava.lang.ClassCastException\nat org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.getPerTypePointcut(PerThisOrTargetPointcutVisitor.java:41)\nat org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.visit(PerThisOrTargetPointcutVisitor.java:108)\nat org.aspectj.weaver.patterns.AndPointcut.accept(AndPointcut.java:119)\nat org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.getPerTypePointcut(PerThisOrTargetPointcutVisitor.java:41)\nat org.aspectj.weaver.PerObjectInterfaceTypeMunger.getTestTypePattern(PerObjectInterfaceTypeMunger.java:64)\nat org.aspectj.weaver.PerObjectInterfaceTypeMunger.matches(PerObjectInterfaceTypeMunger.java:85)\nat org.aspectj.weaver.ConcreteTypeMunger.matches(ConcreteTypeMunger.java:65)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:508)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1089)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:278)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\ntrouble in: \npublic abstract class org.apache.tapestry.internal.aspects.AbstractClassTargetting extends java.lang.Object:\n  public void <init>():\n                    ALOAD_0     // Lorg/apache/tapestry/internal/aspects/AbstractClassTargetting; this   (line 10)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    initialization(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.<init>())\n    |               ALOAD_0\n    |               INVOKEVIRTUAL java.lang.Object.getClass ()Ljava/lang/Class;\n    |               LDC org.apache.tapestry.internal.annotations.Synchronized\n    |               INVOKEVIRTUAL java.lang.Class.isAnnotationPresent (Ljava/lang/Class;)Z\n    |               IFEQ L0\n    |               ALOAD_0\n    |               INVOKESTATIC org.apache.tapestry.internal.aspects.InternalSynchronization.ajc$perObjectBind (Ljava/lang/Object;)V\n    | constructor-execution(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.<init>())\n    | |         L0: ALOAD_0\n    | |             INVOKEVIRTUAL java.lang.Object.getClass ()Ljava/lang/Class;\n    | |             LDC org.apache.tapestry.internal.annotations.Synchronized\n    | |             INVOKEVIRTUAL java.lang.Class.isAnnotationPresent (Ljava/lang/Class;)Z\n    | |             IFEQ L1\n    | |             ALOAD_0\n    | |             INVOKESTATIC org.apache.tapestry.internal.aspects.InternalSynchronization.ajc$perObjectBind (Ljava/lang/Object;)V\n    | |         L1: RETURN\n    | constructor-execution(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.<init>())\n    initialization(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.<init>())\n  end public void <init>()\n\n  abstract void ajc$pointcut$$targetClasses$274()    org.aspectj.weaver.MethodDeclarationLineNumber: 16:628\n;\n\nend public abstract class org.apache.tapestry.internal.aspects.AbstractClassTargetting\n\nwhen weaving type org.apache.tapestry.internal.aspects.AbstractClassTargetting\nwhen weaving aspects \nwhen weaving \nwhen batch building BuildConfig[C:\\workspace\\.metadata\\.plugins\\org.eclipse.ajdt.core\\tapestry5.generated.lst] #Files=70\n\n\n\nI'll attach the corresponding files."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "f70b383": {
    "bug_report": {
      "summary": "Bug 82218  fails to doc spacewar using AJDT 1.2.0M2",
      "description": "Using AJDT 1.2.0M2 {with Java 5 JRE on XP SP2}, install Spacewar example and\ngenerate to Spacewar/docs.  \nResult: output has no cross-references (and displays special AJDT tags), and\nstderr lists this exception:\n\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.AbstractStringBuilder.insert(AbstractStringBuilder.java:980)\n\tat java.lang.StringBuffer.insert(StringBuffer.java:447)\n\tat\norg.aspectj.tools.ajdoc.HtmlDecorator.insertDeclarationsDetails(HtmlDecorator.java:350)\n\tat\norg.aspectj.tools.ajdoc.HtmlDecorator.addAspectDocumentation(HtmlDecorator.java:234)\n\tat org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile(HtmlDecorator.java:188)\n\tat\norg.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl(HtmlDecorator.java:116)\n\tat\norg.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls(HtmlDecorator.java:54)\n\tat\norg.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles(HtmlDecorator.java:43)\n\tat org.aspectj.tools.ajdoc.Main.main(Main.java:210)"
    },
    "commit": {
      "diff": [
        "ajdoc/testdata/coverage/foo/ModelCoverage.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/Util.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/JDKVersionTest.java",
        "ajdoc/testdata/coverage/foo/NoMembers.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java"
      ]
    }
  },
  "78abc76": {
    "bug_report": {
      "summary": "Bug 91858  NullPointerException when declare @type is spelt with capital letter",
      "description": "I have the following code in an AspectJ project:\n\ndeclare @Type: MainClass : @MyAnnotation;\n\nI believe the correct syntax should be:\n\ndeclare @type: MainClass : @MyAnnotation;\n\nHowever when I saved my aspect with the first version I got the following \nNullPointerException:\n\njava.lang.NullPointerException\n\tat \norg.aspectj.ajdt.internal.compiler.ast.DeclareAnnotationDeclaration.postParse\n(DeclareAnnotationDeclaration.java:83)\n\tat \norg.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.postParse\n(ClassScope.java:175)\n\tat \norg.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.buildFieldsAndM\nethods(ClassScope.java:154)\n\tat \norg.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.build\nFieldsAndMethods(CompilationUnitScope.java:63)\n\tat \norg.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindi\nngs(AjLookupEnvironment.java:104)\n\tat \norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile\n(Compiler.java:331)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile\n(Compiler.java:348)\n\tat \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation\n(AjBuildManager.java:683)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:191)\n\tat \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild\n(AjBuildManager.java:109)\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile\n(CompilerAdapter.java:117)\n\tat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run\n(AspectJBuildManager.java:165)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/PatternParser.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareAnnotationDeclaration.java",
        "tests/src/org/aspectj/systemtest/ajc150/DeclareAnnotationTests.java"
      ]
    }
  },
  "5187437": {
    "bug_report": {
      "summary": "Bug 109016  NullPointerException when building configuration",
      "description": "The exception below seems to be happening with any .lst file:\n\nMessage: NullPointerException thrown: null\nStack trace: java.lang.NullPointerException\n\tat\norg.aspectj.ajde.internal.CompilerAdapter.configureBuildOptions(CompilerAdapter.java:296)\n\tat\norg.aspectj.ajde.internal.CompilerAdapter.genBuildConfig(CompilerAdapter.java:170)\n\tat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:95)\n\tat\norg.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)"
    },
    "commit": {
      "diff": [
        "ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java"
      ]
    }
  },
  "5e9aca9": {
    "bug_report": {
      "summary": "Bug 64568  Wildcarding in ITDs needs clearer compiler error message.",
      "description": "If a user attempts to define an ITD using a type pattern (illegal since\nAspectJ 1.1) they get back a compiler error message of the following\nform :-\n\nMyAspect.java:4 error Syntax error on token \"*\", around expected\npublic String foo.bar.*.name;\n\nA clearer error message informing the user of their use of illegal \nsyntax would help."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "7f19ab4": {
    "bug_report": {
      "summary": "Bug 67774  Nullpointer-exception in pointcuts using withincode() clause",
      "description": "Hi,\nI am getting null-pointer-exceptions whenever I try to specify a pointcut with \na \"withincode(Signature)\" clause. E.g.:\n\npublic aspect DetectSystemOutErrorUsage \n{\npointcut allSystemOutAndSystemErrAccesses(): \n\t(get(* System.out) || get(* System.err))\n\t;\n\ndeclare warning: \n\tallSystemOutAndSystemErrAccesses() \n\t&& !adviceexecution()\n\t&& !within(com.tivoli.act..Test*)\n\t&& !within(com.tivoli.act.log..*)\n\t&& !execution(* com.tivoli.act..*.main(..))\n\t&& !execution(* com.tivoli.act..*.usage())\n\t// && !withincode(* com.tivoli.act..*.main(..))\n\t// && !withincode(* com.tivoli.act..*.usage())\n\t: \"Warning: use of System.out or System.err - consider logging \ninstead!\";\n}\n\nIn the above example excluding main() and usage() methods from the pointcut \nusing an execution(...)-clause (shows) works but using a withincode()-clause \n(as commented) always yields an NPE:\n\ntrouble in:\nnull\njava.lang.NullPointerException\n        at org.aspectj.weaver.patterns.SignaturePattern.matches\n(SignaturePattern.java:87)\n        at org.aspectj.weaver.patterns.WithincodePointcut.match\n(WithincodePointcut.java:42)\n        at org.aspectj.weaver.patterns.NotPointcut.match(NotPointcut.java:45)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:62)\n        at org.aspectj.weaver.Checker.match(Checker.java:48)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.match\n(BcelClassWeaver.java:1121)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit\n(BcelClassWeaver.java:895)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.match\n(BcelClassWeaver.java:793)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave\n(BcelClassWeaver.java:343)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave\n(BcelClassWeaver.java:80)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:724)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump\n(BcelWeaver.java:689)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify\n(BcelWeaver.java:615)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563)\n        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave\n(AjCompilerAdapter.java:239)\n        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling\n(AjCompilerAdapter.java:114)\n        at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376)\n        at \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation\n(AjBuildManager.java:601)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:160)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:94)\n        at org.aspectj.ajde.internal.CompilerAdapter.compile\n(CompilerAdapter.java:108)\n        at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run\n(AspectJBuildManager.java:165)\n!SESSION Jun 18, 2004 10:49:48.666 ---------------------------------------------\neclipse.buildId=I200406110010\njava.version=1.4.2_03\njava.vendor=Sun Microsystems Inc.\nBootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=de_CH\n\n!ENTRY org.eclipse.ajdt.ui 4 0 Jun 18, 2004 10:49:48.666\n!MESSAGE NullPointerException thrown: null\n!STACK 0\njava.lang.NullPointerException\n        at org.aspectj.weaver.patterns.SignaturePattern.matches\n(SignaturePattern.java:87)\n        at org.aspectj.weaver.patterns.WithincodePointcut.match\n(WithincodePointcut.java:42)\n        at org.aspectj.weaver.patterns.NotPointcut.match(NotPointcut.java:45)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42)\n        at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:62)\n        at org.aspectj.weaver.Checker.match(Checker.java:48)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.match\n(BcelClassWeaver.java:1121)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit\n(BcelClassWeaver.java:895)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.match\n(BcelClassWeaver.java:793)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave\n(BcelClassWeaver.java:343)\n        at org.aspectj.weaver.bcel.BcelClassWeaver.weave\n(BcelClassWeaver.java:80)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:724)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump\n(BcelWeaver.java:689)\n        at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify\n(BcelWeaver.java:615)\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563)\n        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave\n(AjCompilerAdapter.java:239)\n        at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling\n(AjCompilerAdapter.java:114)\n        at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376)\n        at \norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation\n(AjBuildManager.java:601)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:160)\n        at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n(AjBuildManager.java:94)\n        at org.aspectj.ajde.internal.CompilerAdapter.compile\n(CompilerAdapter.java:108)\n        at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run\n(AspectJBuildManager.java:165)\n\n\nMichael"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "tests/bugs/WithincodeNPE01.java"
      ]
    }
  },
  "b225911": {
    "bug_report": {
      "summary": "Bug 130300  Remove, hide or obfuscate -XnoWeave",
      "description": "This option is redundant apart from use in AspectJ development and maintenance. It is confusing to users and is a source new problems for LTW."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/inpath/InPathTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java",
        "ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java",
        "testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java",
        "taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java",
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java"
      ]
    }
  },
  "85aa152": {
    "bug_report": {
      "summary": "Bug 87376  NPE when unresolved type of a bound var in a pointcut expression (EclipseFactory.java:224)",
      "description": "see attached mini-project to reproduce"
    },
    "commit": {
      "diff": [
        "tests/bugs150/pr87376/I.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "d15eb32": {
    "bug_report": {
      "summary": "Bug 30168  Error with certain combination of advice",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs/crashes/test/Test3.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java"
      ]
    }
  },
  "008efca": {
    "bug_report": {
      "summary": "Bug 136707  iajc should print summary like javac",
      "description": "The iajc ant task should produce a summary of what it is doing, like the javac task does:\n\n[javac] Compiling 189 source files to C:\\project\\classes"
    },
    "commit": {
      "diff": [
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java",
        "taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java"
      ]
    }
  },
  "04e8dca": {
    "bug_report": {
      "summary": "Bug 112243  Compiler Core Dump with Apparent Fix",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "weaver/src/org/aspectj/weaver/World.java"
      ]
    }
  },
  "b8ebdc3": {
    "bug_report": {
      "summary": "Bug 389456  NPE in EclipseTypeMunger.mungeNewMethod()",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java"
      ]
    }
  },
  "44a92e1": {
    "bug_report": {
      "summary": "Bug 59208  Weaver fails in BCEL  for large classes",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/WeaverMessages.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java",
        "tests/bugs/pr59208/Foo.java",
        "tests/bugs/pr59208/FooProducer.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "03c43f5": {
    "bug_report": {
      "summary": "Bug 324190  NullPointerException in AjBuildManager.findOutputDirsForAspects when compiling AspectJ project generated with Maven",
      "description": "Build Identifier: 20100617-1415\n\nWhen I compile my AspectJ project, I get an AspectJ Internal Compiler Error. The stack trace is : \njava.lang.NullPointerException\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.findOutputDirsForAspects(AjBuildManager.java:725)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeOutxmlFile(AjBuildManager.java:652)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild(AjBuildManager.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:181)\nat org.aspectj.a ... on$1.run(GlobalBuildAction.java:179)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n\nI digged a bit and looked into the classes. It would seem that AjState.getAspectNamesToFileNameMap() can return null in AjBuildManager.findOutputDirsForAspects. It is taken in account when AjBuildConfig.getCompilationResultDestinationManager() returns null or a list with one element, but not when it returns a list with several elements.\n\nReproducible: Always\n\nSteps to Reproduce:\nAlways happen in my configuration, but I didn't try to make it happen again in another workspace. Here are the steps I followed.\n\n1. Generate a AspectJ project with Maven using the pom.xml I'll join\n2. Create an aspect with a few pointcuts and a few advices\n3. Compile (not with maven, the Eclipse compilation)"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "f4c8bf9": {
    "bug_report": {
      "summary": "Bug 58524  ajdoc should not use the Declaration and SymbolManager classes",
      "description": "In order to speed up porting porting to the old HTML generation code ajdoc \ncontinues to use the following classes:\n\n  org.aspectj.tools.ajdoc.Declaration\n  org.aspectj.tools.ajdoc.SymbolManager\n\nThese funtion only as a wrapper to the ASM, and are not needed.  The next \nrefactoring effort should get rid of them (and all those static methods as \nwell!)."
    },
    "commit": {
      "diff": [
        "ajdoc/src/org/aspectj/tools/ajdoc/SymbolManager.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/Declaration.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/Main.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java"
      ]
    }
  },
  "551b9ca": {
    "bug_report": {
      "summary": "Bug 117209  Runtime error - Stack size too large, Bug#69706 related.",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java",
        "tests/multiIncremental/pr117209/base/src/DefaultInterfaceImplementationRecipe.java",
        "tests/multiIncremental/pr117209/base/src/Broken.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "tests/multiIncremental/pr117209/base/src/Aspect.java",
        "tests/multiIncremental/pr117209/base/src/P.java",
        "tests/multiIncremental/pr117209/base/src/MyInterface_ch16.java",
        "tests/multiIncremental/pr117209/base/src/MyClass_ch16.java"
      ]
    }
  },
  "2b0e675": {
    "bug_report": {
      "summary": "Bug 111481  varargs doesn't work for ITD'd constructors",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java"
      ]
    }
  },
  "2393bef": {
    "bug_report": {
      "summary": "Bug 418129  Can't introduce annotation onto introduced method from trait-patterned aspect",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "tests/bugs174/pr418129/Target.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java",
        "tests/bugs174/pr418129/Target4.java",
        "tests/bugs174/pr418129/Target2.java",
        "weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java",
        "tests/bugs174/pr418129/Target3.java"
      ]
    }
  },
  "b4715bc": {
    "bug_report": {
      "summary": "Bug 210848  Fix javadoc for ProceedingJoinPoint.proceed(Object[])",
      "description": null
    },
    "commit": {
      "diff": [
        "runtime/src/org/aspectj/lang/ProceedingJoinPoint.java"
      ]
    }
  },
  "35a9649": {
    "bug_report": {
      "summary": "Bug 279298  AspectJ LTW with Cobertura",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"
      ]
    }
  },
  "c509c6f": {
    "bug_report": {
      "summary": "Bug 38131  ajc needs -d . option while correctly compiling classes from subpackage",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/testdata/src1/WrongPackage.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "93fdce1": {
    "bug_report": {
      "summary": "Bug 79523  BCException: illegal change to pointcut declaration: calls(<nothing>)",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"
      ]
    }
  },
  "82e3e13": {
    "bug_report": {
      "summary": "Bug 153535  Bug in reflection delegate signature for array of object type",
      "description": "The following problem is interesting because the advice weaves correctly with Java 1.5 LTW and also using Java 1.4 with build-time weaving. However, the following call pointcut isn't matching the expected call site in Java 1.4 load-time weaving (*).\n\nPointcut:\n    private pointcut inExecQuery() : \n        (within(uk.ltd.getahead.dwr.impl.ExecuteQuery) || within(uk.ltd.getahead.dwr.ExecuteQuery));\n    \n    public pointcut dwrQuery(Method method, Object receiver, Object[] params) : \n        inExecQuery() && withincode(* execute(..)) && \n        call(* Method.invoke(..)) && args(receiver, params) && target(method);\n\n    protected pointcut monitorEnd() : dwrQuery(*, *, *);\n\nMatching call site:\n                Object reply = method.invoke(object, params);\n\nI've tracked it down to failing to find the method in ResolvedType.matches. On line 405:\n\n\"m1.getSignature()\"= \"(Ljava/lang/Object;[Ljava.lang.Object;)Ljava/lang/Object;\"\t\n\"m2.getSignature()\"= \"(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\"\t\n\nNote the difference between . and /            ^    ^\n\nIt looks to me like the signature for array types in the reflection delegate is erroneously using . instead of /. I have attached a patch to the ReflectionBasedReferenceTypeDelegateTest that isolates this unexpected signature return. Hopefully you agree that this is not correct. If not, some more information follows.\n\nHere's the stack trace where the match fails:\n\nResolvedType.matches(Member, Member) line: 405\t\nReferenceType(ResolvedType).lookupMember(Member, Iterator) line: 347\t\nReferenceType(ResolvedType).lookupMethod(Member) line: 326\t\nLTWWorld(World).resolve(Member) line: 504\t\nMemberImpl.resolve(World) line: 93\t\nJoinPointSignatureIterator.addSignaturesUpToFirstDefiningMember() line: 109\t\nJoinPointSignatureIterator.<init>(Member, World) line: 51\t\nMemberImpl.getJoinPointSignatures(World) line: 943\t\nSignaturePattern.matches(Member, World, boolean) line: 286\t\nKindedPointcut.matchInternal(Shadow) line: 106\t\nKindedPointcut(Pointcut).match(Shadow) line: 146\t\nAndPointcut.matchInternal(Shadow) line: 53\t\nAndPointcut(Pointcut).match(Shadow) line: 146\t\nAndPointcut.matchInternal(Shadow) line: 51\t\nAndPointcut(Pointcut).match(Shadow) line: 146\t\nAndPointcut.matchInternal(Shadow) line: 51\t\nAndPointcut(Pointcut).match(Shadow) line: 146\t\nAndPointcut.matchInternal(Shadow) line: 51\t\nAndPointcut(Pointcut).match(Shadow) line: 146\t\nOrPointcut.matchInternal(Shadow) line: 50\t\nOrPointcut(Pointcut).match(Shadow) line: 146\t\nBcelAdvice(ShadowMunger).match(Shadow, World) line: 71\t\nBcelAdvice(Advice).match(Shadow, World) line: 112\t\nBcelAdvice.match(Shadow, World) line: 107\t\nBcelClassWeaver.match(BcelShadow, List) line: 2806\t\nBcelClassWeaver.matchInvokeInstruction(LazyMethodGen, InstructionHandle, InvokeInstruction, BcelShadow, List) line: 2768\t\nBcelClassWeaver.match(LazyMethodGen, InstructionHandle, BcelShadow, List) line: 2506\t\nBcelClassWeaver.match(LazyMethodGen) line: 2332\t\nBcelClassWeaver.weave() line: 494\t\nBcelClassWeaver.weave(BcelWorld, LazyClassGen, List, List, List) line: 119\t\nBcelWeaver.weave(UnwovenClassFile, BcelObjectType, boolean) line: 1613\t\nBcelWeaver.weaveWithoutDump(UnwovenClassFile, BcelObjectType) line: 1564\t\nBcelWeaver.weaveAndNotify(UnwovenClassFile, BcelObjectType, IWeaveRequestor) line: 1341\t\nBcelWeaver.weave(IClassFileProvider) line: 1163\t\nClassLoaderWeavingAdaptor(WeavingAdaptor).getWovenBytes(String, byte[]) line: 319\t\nClassLoaderWeavingAdaptor(WeavingAdaptor).weaveClass(String, byte[]) line: 225\t\nAj.preProcess(String, byte[], ClassLoader) line: 77\t\nClassPreProcessorAdapter.preProcess(String, byte[], ClassLoader) line: 67\t\nClassPreProcessorHelper.defineClass0Pre(ClassLoader, String, byte[], int, int, ProtectionDomain) line: 107\t\nWebappClassLoader(ClassLoader).defineClass(String, byte[], int, int, ProtectionDomain) line: 539\t\nWebappClassLoader(SecureClassLoader).defineClass(String, byte[], int, int, CodeSource) line: 123\t\nWebappClassLoader.findClassInternal(String) line: 1786\t\nWebappClassLoader.findClass(String) line: 1048\t\nWebappClassLoader.loadClass(String, boolean) line: 1506\t\nWebappClassLoader.loadClass(String) line: 1385\t\nWebappClassLoader(ClassLoader).loadClassInternal(String) line: 302\t\nClass.forName0(String, boolean, ClassLoader) line: not available [native method]\t\nClass.forName(String) line: 141\t\nInitializeLog.setWarnLogging(String) line: 121\t\nInitializeLog.initializeLogging() line: 96\t\nContextLoaderServlet.init() line: 13\t\nContextLoaderServlet(GenericServlet).init(ServletConfig) line: 212\t\nStandardWrapper.loadServlet() line: 879\t\nStandardWrapper.load() line: 767\t\nStandardContext.loadOnStartup(Container[]) line: 3483\t\nStandardContext.start() line: 3709\t\nStandardHost(ContainerBase).addChildInternal(Container) line: 776\t\nStandardHost(ContainerBase).addChild(Container) line: 759\t\nStandardHost.addChild(Container) line: 537\t\nStandardHostDeployer.install(String, URL) line: 260\t\nStandardHost.install(String, URL) line: 730\t\nHostConfig.deployWARs(File, String[]) line: 558\t\nHostConfig.deployApps() line: 373\t\nHostConfig.start() line: 784\t\nHostConfig.lifecycleEvent(LifecycleEvent) line: 330\t\nLifecycleSupport.fireLifecycleEvent(String, Object) line: 119\t\nStandardHost(ContainerBase).start() line: 1155\t\nStandardHost.start() line: 696\t\nStandardEngine(ContainerBase).start() line: 1147\t\nStandardEngine.start() line: 310\t\nStandardService.start() line: 449\t\nStandardServer.start() line: 2212\t\nCatalina.start() line: 458\t\nCatalina.execute() line: 345\t\nCatalina.process(String[]) line: 129\t\nNativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]\t\nNativeMethodAccessorImpl.invoke(Object, Object[]) line: 39\t\nDelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25\t\nMethod.invoke(Object, Object[]) line: 324\t\nBootstrap.main(String[]) line: 150\t\n\nI'm using a modified version of Alex Vasseur's LTW plugin for a Java 1.4 VM although I haven't tested on the JRockIt plugin for a 1.4 VM: my guess is that this would fail there too."
    },
    "commit": {
      "diff": [
        "weaver5/java5-testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java",
        "weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java"
      ]
    }
  },
  "1a6f695": {
    "bug_report": {
      "summary": "Bug 135001  NPE at at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline",
      "description": "java.lang.NullPointerException\nat org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:2109)\nat org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:232)\nat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:639)\nat org.aspectj.weaver.Shadow.implement(Shadow.java:456)\nat org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2236)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:491)\nat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511)\nat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291)\nat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1113)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "tests/src/org/aspectj/systemtest/ajc152/AllTestsAspectJ152.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java",
        "weaver/testsrc/org/aspectj/weaver/bcel/AsmDelegateTests.java",
        "tests/src/org/aspectj/systemtest/AllTests15.java",
        "tests/bugs152/pr135001/Foo.java",
        "tests/bugs152/pr135001/ConcreteAspect.java",
        "tests/bugs152/pr135001/AbstractAspect.java",
        "tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java"
      ]
    }
  },
  "76d695f": {
    "bug_report": {
      "summary": "Bug 387444  Softening exception in try-with-resources",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "tests/bugs171/pr387444/Code2.java",
        "tests/bugs171/pr387444/Code.java",
        "tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests_need17jre.java",
        "tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java"
      ]
    }
  },
  "d5c2ead": {
    "bug_report": {
      "summary": "Bug 244321  I cannot aspect code written in SJPP-based encoding",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "ad2fb7a": {
    "bug_report": {
      "summary": "Bug 47952  SoftException.printStackTrace(..) should print  wrapped throwable too",
      "description": "SoftExceptions should print not only their trace but also that of the wrapped\nthrowable.\n\nWe should be able to set a flag on class initialization whether we are running\nunder 1.4 and then implement it under 1.4 using initCause() and otherwise by\ndirect delegation.  I can do this fix if we're agreed."
    },
    "commit": {
      "diff": [
        "runtime/testsrc/RuntimeModuleTests.java",
        "runtime/src/org/aspectj/lang/SoftException.java"
      ]
    }
  },
  "3824b1c": {
    "bug_report": {
      "summary": "Bug 94167  NPE in reflect implementation",
      "description": "Proposed fix (I'd like input on how to best add test cases for this so I can \nsubmit a tested patch); I believe this will work because if you uncomment the \nwork-around line, it works):\n\nChange line 63 from:\n\t\t\t\tmethod = declaringType.getDeclaredMethod\n(getName(),getParameterTypes());\n\nto\n\n\t\t\t\tmethod = getDeclaringType().getDeclaredMethod\n(getName(),getParameterTypes());\n\nTest source:\n\npackage reflect;\n\nimport org.aspectj.lang.*;\nimport org.aspectj.lang.reflect.*;\nimport java.lang.reflect.*;\n\naspect Test {\n    before() : call(* *(..)) && !within(Test) {\n       MethodSignature sig = (MethodSignature)thisJoinPoint.getSignature();\n       //sig.getDeclaringType(); // uncomment to work-around\n       Method method = sig.getMethod();\n   }\n}\n\npublic class MinimalErr {\n    public static void main(String args[]) {\n\ttry {\n\t    Inner.foo();\n\t} catch (Throwable t) {\n\t    t.printStackTrace();\n\t}\n    }\n    public static class Inner {\n\tpublic static void foo() {}\n    }\n}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/PR94167.java",
        "runtime/src/org/aspectj/runtime/reflect/AdviceSignatureImpl.java",
        "runtime/src/org/aspectj/runtime/reflect/MethodSignatureImpl.java"
      ]
    }
  },
  "9d32b76": {
    "bug_report": {
      "summary": "Bug 120543  Issue version message during load-time weaving",
      "description": "It would be very useful to know exactly which version of the weaver is being used for LTW. An informational message could be issued when each WeavingAdaptor instance is created (it is possible to have multiple versions of AspectJ in a system). This message could be similar to the that issued by \"ajc -version\"."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java"
      ]
    }
  },
  "abc9a58": {
    "bug_report": {
      "summary": "Bug 92906  showWeaveInfo for declare annotations",
      "description": "declaring annotations (declare @type, @constructor, @method and @field)\ncurrently doesn't show a message when the -showWeaveInfo option is set in ajc.\n\nAppropriate messages should be displayed."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "bridge/src/org/aspectj/bridge/WeaveMessage.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "ajde/testsrc/org/aspectj/ajde/ShowWeaveMessagesTestCase.java",
        "weaver/src/org/aspectj/weaver/bcel/Utility.java"
      ]
    }
  },
  "c517e85": {
    "bug_report": {
      "summary": "Bug 49457  No error on overloaded pointcuts unless binding variables",
      "description": "The compiler might not be detecting overloaded pointcut names when parameters\nare not bound, and/or might not be implementing the pointcut correctly.  Below\nis the context from my reply to Ron Bodkin on aspectj-dev \"Proper behavior of\noverloaded pointcut definitions\".  (I have not checked this code recently or\nsubmitted a test case, nor have I evaluated whether my code below actually\nreplicates Ron's bug.)\n\n---- context from the email\nThe programming guide says,\n\n  It is an error for two pointcuts to be named with the same\n  name in the same class or aspect declaration.\n\nWhen I compile with overloaded pointcut names, I do get an error.\n\n    pointcut pc(Runnable r) : target(r) && call(void run());\n    pointcut pc(SubRunnable r) : target(r) && call(void run());\n\n $ aspectj-1.1.1 -classpath $ajrt11 OverloadedPointcut.java\n ...\\OverloadedPointcut.java:14 duplicate pointcut name: pc\n ...\\OverloadedPointcut.java:15 duplicate pointcut name: pc\n\n...\n\nWhen I use these pointcuts with bound parameters, I get an error.\n\n    before(Runnable r) : pc(r) { log(\"pc(Runnable r)\"); }\n    before(SubRunnable r) : pc(r) { log(\"pc(SubRunnable r)\"); }\n\nWhen I use these pointcuts with type parameters, I get no errors.\n\n    before() : pc(Runnable) { log(\"pc(Runnable)\"); }\n    before() : pc(SubRunnable) { log(\"pc(SubRunnable)\"); }\n    before() : pc(*) { log(\"pc(*)\"); }\n\n[...]\n\n---- my code\npublic class OverloadedPointcut {\n    public static void main(String[] args) {\n        new C().run();\n    }\n}\nclass C { public void run() {} }\n\naspect A {\n    declare parents: C implements Runnable;\n    declare parents: C implements SubRunnable;\n    interface SubRunnable extends Runnable {}\n\n    pointcut pc(Runnable r) : target(r) && call(void run());\n    pointcut pc(SubRunnable r) : target(r) && call(void run());\n    before(Runnable r) : pc(r) { log(\"pc(Runnable r)\"); }\n    before(SubRunnable r) : pc(r) { log(\"pc(SubRunnable r)\"); }\n    before() : pc(Runnable) { log(\"pc(Runnable)\"); }\n    before() : pc(SubRunnable) { log(\"pc(SubRunnable)\"); }\n    before() : pc(*) { log(\"pc(*)\"); }\n    void log(String s) { System.out.println(s); }\n} \n\n---- Ron's code\n[...] the following program compiles with no warnings, produces no output when\nrun under AspectJ 1.1.1.  It appears to behave as if the more specific\ndefinition is the only definition of the pointcut\n[...]\nHere is a simple program that illustrates the question and odd behavior:\n\npackage lib;\n\npublic class RunnablePointcuts {\n    public pointcut runnableCalls(Runnable runnable, Object caller) :\n        call(* run(..)) && target(runnable) && this(caller);\n\n    //public pointcut specialRunnableCalls(SpecialRunnable runnable, Object\ncaller) :\n    public pointcut runnableCalls(SpecialRunnable runnable, Object caller) :\n        call(* run(..)) && target(runnable) && this(caller);\n}\n---\npackage lib;\n\npublic interface SpecialRunnable extends Runnable {\n}\n---\npackage client;\n\nimport lib.RunnablePointcuts;\nimport lib.SpecialRunnable;\n\npublic aspect Use {\n    before(Object caller) : RunnablePointcuts.runnableCalls(*, caller) &&\ntarget(MyRunnable) {\n        System.out.println(\"my runnable called from \"+caller);\n    }\n    public static void main(String args[]) {\n\tUse.aspectOf().doIt();\n    }\n    public void doIt() {\n        new MyRunnable().run();\n    }\n}\n\n// the advice will run if you make this implement SpecialRunnable\n//class MyRunnable implements SpecialRunnable {\nclass MyRunnable implements Runnable {\n    public void run() {}\n}"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java",
        "tests/bugs/OverloadedPointcutsInClass.java",
        "tests/bugs/OverloadedPointcutsInAspect.java"
      ]
    }
  },
  "2c9ea11": {
    "bug_report": {
      "summary": "Bug 108448  IllegalStateException: Undeclared type variable when hiding",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelField.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelMethod.java",
        "weaver/testsrc/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXTestCase.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"
      ]
    }
  },
  "04fa1dc": {
    "bug_report": {
      "summary": "Bug 129525  Don't Dump Bytecodes to Syserr in LTW",
      "description": "The load-time weaving system can produce truly massive quantities of output when there's a weaving error, since the system dumps the bytecode to syserr. It would be much better to produce an ajcore file and just point to it, or use some other log."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java",
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java",
        "loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "67ffda8": {
    "bug_report": {
      "summary": "Bug 289816  Potentially unclosed stream in org.aspectj.weaver.bcel.BcelWorld",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWorld.java"
      ]
    }
  },
  "f37c56e": {
    "bug_report": {
      "summary": "Bug 371998  org.aspectj.weaver.BCException compiling @DeclareParents with value using \"||\"",
      "description": "Build Identifier: 20110916-0149\n\nUsing:\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.DeclareParents;\n\n@Aspect\npublic class AspectTest {\n    \n    private interface X {}\n    private static class XImpl {}\n\n    @DeclareParents(value=\"java.lang.Runnable || java.util.concurrent.Callable\",  defaultImpl=XImpl.class)\n    private X xImpl;\n  \n}\n\n\nThrows:\n\norg.aspectj.weaver.BCException\nat org.aspectj.weaver.patterns.ExactTypePattern.resolveBindings(ExactTypePattern.java:312)\nat org.aspectj.weaver.patterns.OrTypePattern.resolveBindings(OrTypePattern.java:121)\nat org.aspectj.weaver.bcel.AtAjAttributes.handleDeclareParentsAnnotation(AtAjAttributes.java:746)\nat org.aspectj.weaver.bcel.AtAjAttributes.readAj5ClassAttributes(AtAjAttributes.java:384)\nat org.aspectj.weaver.bcel.BcelObjectType.ens ... \\Program Files\\Java\\jre6\\lib\\ext\\sunjce_provider.jar;C:\\Users\\xxx\\software\\eclipse-j2ee\\\\plugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar;\n\nCurrent workaround is to use multiple DeclareParents annotations on different variables.\n\nReproducible: Always\n\nSteps to Reproduce:\n1. Create new class given the code in the details.\n2. Save and compile in Eclipse."
    },
    "commit": {
      "diff": [
        "tests/bugs170/pr371998/AspectTest.java",
        "tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java",
        "weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"
      ]
    }
  },
  "508dbcb": {
    "bug_report": {
      "summary": "Bug 11280  [View Mgmt] Switching perspectives loses view maximized state",
      "description": "1. Open the CVS repository view in the Java perspective.\n2. Double click the title bar to maximize it\n3. Switch to the resource perspective.\n4. Come back to the Java perspective. The CVS repository view is no longer\nmaximized.\n\nA view that is maximized should stay maximized."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"
      ]
    }
  },
  "df7fff4": {
    "bug_report": {
      "summary": "Bug 82171  enable ASM interoperability with JavaCore via uniform element handles",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java",
        "weaver/src/org/aspectj/weaver/ShadowMunger.java",
        "weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java",
        "asm/src/org/aspectj/asm/IElementHandleProvider.java",
        "docs/sandbox/api-clients/org/aspectj/samples/AsmRelationshipMapExtensionTest.java",
        "asm/src/org/aspectj/asm/internal/FullPathHandleProvider.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AsmInterTypeRelationshipProvider.java",
        "asm/src/org/aspectj/asm/internal/ProgramElement.java",
        "asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java",
        "asm/src/org/aspectj/asm/AsmManager.java"
      ]
    }
  },
  "2302e94": {
    "bug_report": {
      "summary": "Bug 350855  overweaving misbehaving when subclassing WeavingURLClassLoader",
      "description": "Raised by the Spring Insight team, they observed that in a system where they are using a special classloader (subclassing weaving url classloader) they see it fail to weave an aspect if overweaving is on."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java"
      ]
    }
  },
  "9664058": {
    "bug_report": {
      "summary": "Bug 152589  [pipeline] adding a whitespace results in adviceDidNotMatch warning",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java"
      ]
    }
  },
  "7a398a2": {
    "bug_report": {
      "summary": "Bug 186884  Unhandled Kind of New Exception when have advice for Pointcut call(Throwable+.new(..))",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java"
      ]
    }
  },
  "f6436e3": {
    "bug_report": {
      "summary": "Bug 67592  value in the args[] array of thisjoinpoint can be changed by one advice decl and updated values seen in another advice decl",
      "description": "In ajc a use of thisJoinPoint corresponds to an object of type JoinPoint, where\na JoinPoint object has four components, which can be retrieved using\naccessor methods.\n\n  this                   getThis()\n  target                 getTarget()\n  args                   getArgs()\n  staticJoinPoint        getStaticPart()\n\nIn the case of args, the object returned is an Object array.  This means\nthat an advice decl can overwrite the args,  and then another advice which\nshares the same JoinPoint will see the changed args.   Here is a\nsmall example.  In this aspect the\nbefore advice changes arg[0] to always be \"Laurie\" and then the after\nadvice will always say that \"Laurie won a million pounds\".\n\nIs this the behaviour that is intended?   I would have thought that the\ninterface to args[] should be such that the values can only be read.  Otherwise\nvery strange interactions between advice decls could occur.\n\n---------------------------------------------------------------------\n\npublic class Main {\n\n  public static Main v = new Main();\n\n  void lottery ( String arg )\n    { System.out.println(\"The arg in lottery is \" + arg);\n    }\n\n  public static void main (String args[])\n    { v.lottery(\"Oege\");\n      v.lottery(\"Ganesh\");\n    }\n\n}\n\n---------------------------------------------------------------------\n\npublic aspect Aspect {\n\n  // This pair of advice decls demonstrates that an advice can change to\n  //   the args of a join point.\n\n  before () : call(* lottery(java.lang.String)) && !within(Aspect)\n    { System.out.println(\"BEFORE \" + thisJoinPoint +\n                         \" at \" + thisJoinPointStaticPart.getSourceLocation());\n      Object args[] = thisJoinPoint.getArgs();\n      System.out.println(\"arg[0] is \" + args[0]);\n      args[0] = \"Laurie\";\n      System.out.println(\"... now it is \" + thisJoinPoint.getArgs()[0]);\n    }\n\n\n  after ()  : call(* lottery(java.lang.String)) && !within(Aspect)\n    { System.out.println(\"AFTER \" + thisJoinPoint +\n                         \" at \" + thisJoinPointStaticPart.getSourceLocation());\n      if (thisJoinPoint.getArgs()[0].equals(\"Laurie\"))\n        System.out.println(\"Laurie wins 1 million pounds!\");\n    }\n\n}"
    },
    "commit": {
      "diff": [
        "runtime/testsrc/RuntimeModuleTests.java",
        "runtime/src/org/aspectj/runtime/reflect/JoinPointImpl.java",
        "runtime/testsrc/org/aspectj/runtime/reflect/JoinPointImplTest.java"
      ]
    }
  },
  "3fa4d24": {
    "bug_report": {
      "summary": "Bug 133117  Lots of warnings with noGuardForLazyTjp",
      "description": "When the noGuardForLazyTjp compiler option is set to warning or error and a piece of advice causes this warning to show up, you get one warning for every join point matched by the advice.  I think just one would probably be enough..."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "weaver/src/org/aspectj/weaver/Lint.java"
      ]
    }
  },
  "7c6e936": {
    "bug_report": {
      "summary": "Bug 386049  Error \"must implement abstract inter-type declaration\" even though build is fine",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs171/pr386049/de/scrum_master/galileo/filter/BasicFilter.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java",
        "tests/bugs171/pr387568/Code.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java",
        "tests/bugs171/pr386049/de/scrum_master/galileo/filter/JsoupFilter.java"
      ]
    }
  },
  "efe6cc7": {
    "bug_report": {
      "summary": "Bug 160496  ajdoc Main class needs refactoring for ease of use",
      "description": "Whilst looking at other ajdoc bugs it was slightly confusing to read the main ajdoc method. I didn't want to include the refactoring of this within patches for the other bugs as this is mearly for ease of use. Therefore, raising this enhancement to cover it."
    },
    "commit": {
      "diff": [
        "ajdoc/src/org/aspectj/tools/ajdoc/Main.java"
      ]
    }
  },
  "5d281fd": {
    "bug_report": {
      "summary": "Bug 83303  complier error when mixing inheritance, overriding and polymorphism",
      "description": "Given this scenario:\n- class A define method m1 (with proteceted visibility)\n- class B extends class A and implements interface I and override method m1 (but\nwith public visibility)\n- interface I define method m1 (with public  visibility)\n\nThe code is correct and compile using java 1.4\n\nLet's modify the scenario:\nmove the method B.m1 into a method introduction on aspect C, such that\n- class B extends class A\n- apsect C intosuces method m1 into B (with public visibility) and makes B\nimplemts I (declare parents)\n- A and I as before\n\nThe compiler reports this error:\nB.java:1 [error] The inherited method A.m1() cannot hide the public abstract\nmethod in I\nclass B extends A {"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "tests/bugs150/PR83303.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java"
      ]
    }
  },
  "a8e6797": {
    "bug_report": {
      "summary": "Bug 340323  NPE when weaving java.lang.Object at org.aspectj.weaver.bcel.BcelTypeMunger.createAnyBridgeMethodsForCovariance(BcelTypeMunger.java:1251)",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java"
      ]
    }
  },
  "302c14e": {
    "bug_report": {
      "summary": "Bug 413378  A constructor added by ITD cannot invoke the method of its super class",
      "description": "AspectJ Development Tools\t2.2.0.e37x-RELEASE-20120704-0900\n\n\n\n\n\nIt seems *super.someMethod()* can not be correctly resolved in the\nconstructor added by ITD \n\nIt can be compiled with no problem, but* at runtime, exception is raised.*\n\n\nThe class which I'll add a new constructor to:\n\npublic class Child extends Parent{\n\n    public String mParent = \"John\";\n    \n    public Child(String parent) {\n        this.mParent = parent;\n    }\n    \n    public String getParent()\n    {\n        return this.mParent;\n    }\n}\n\nAs we can see, *Child * extends *Parent*\n\nclass Parent has a method getAge()\n\npublic class Parent {\n    private String mName = \"John\";\n    private int mAge = 50;\n    \n    public int getAge(){\n        return mAge;\n    }\n}\n\nIf I add a new constructor for the *Child * in my aspect.\n\npublic aspect MyTest {\n\n    public Child.new(String parent, int age) {\n        this(parent);\n        \n        System.out.println(\"Get Age:\" + super.getAge());\n        System.out.println(\"Child Name:\" + this.mParent);\n    }\n}\n\nThe above aspect code will trigger an exception.\n\nException in thread \"main\" java.lang.NoSuchMethodError: com.test.Child.ajc$superDispatch$com_test_Child$getAge()I\n\tat MyTest.ajc$postInterConstructor$MyTest$com_test_Child(MyTest.aj:13)\n\tat com.test.Child.<init>(Child.java:1)\n\tat MainProgram.main(MainProgram.java:14)\n\nIs this a limitation of AspectJ? Is this the only way to resolve this\nissue?\n\n\nI also attach the src & compiled binary files"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java",
        "tests/src/org/aspectj/systemtest/ajc174/AllTestsAspectJ174.java",
        "tests/bugs174/pr413378/Code.java",
        "tests/src/org/aspectj/systemtest/AllTests17.java"
      ]
    }
  },
  "e71e287": {
    "bug_report": {
      "summary": "Bug 354947  Nullpointer-Exception while parsing definition file (aop.xml) in DocumentParser",
      "description": "Build Identifier: 20100617-1415\n\nWith an activated NullpointerException-Breakpoint i recently stumpled upon a thrown NPE in the DocumentParser.parse()-method (Line 106):\n\n\tpublic static Definition parse(final URL url) throws Exception {\n\t\tInputStream in = null;\n\t\ttry {\n\t\t\tif (CACHE && parsedFiles.containsKey(url.toString())) {\n\t\t\t\treturn parsedFiles.get(url.toString());\n\t\t\t}\n\t\t\tDefinition def=null;\n\t\t\t\n\t\t\tif(LIGHTPARSER){\t\n\t\t\t\tdef = SimpleAOPParser.parse(url);\n\t\t\t}else{\n\t\t\t\tdef = saxParsing(url);\n\t\t\t}\n\t\t\n\t\t\tif (CACHE && def.getAspectClassNames().size() > 0) {\n\t\t\t\tparsedFiles.put(url.toString(), def);\n\t\t\t}\n\n\t\t\treturn def;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tin.close();\n\t\t\t} catch (Throwable t) {\n\n\t\t\t}\n\t\t}\n\t}\n\n... The parsing of the configuration file works fine, merely the InputStream seems not to be used anymore. \n\n\nReproducible: Always"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java"
      ]
    }
  },
  "e76b370": {
    "bug_report": {
      "summary": "Bug 88900  Unnecessary warning for ITDs",
      "description": "Consider the following aspect:\n\npublic aspect RunnableDefaultImpl {\n    public void Runnable.run() {\n    }\n}\n\n(Note that it makes little sense to have a default implementation for\n Runnable. However, I am using it to allow easy reproduction of the bug.)\n\nCompiling this aspect leads to the following warning:\n\n...\\test\\RunnableDefaultImpl.aj:9 [warning]\n this affected type is not exposed to the weaver: java.lang.Runnable [Xlint:type\nNotExposedToWeaver]\npublic void Runnable.run() {\n                     ^^^\n\nThis warning isn't really necessary as weaver doesn't (and shouldn't) need\nto have Runnable exposed. In fact, everything works as expected already.\n\nNow it will be a good warning (or even error), if I was trying to introduce a\nnew method, such as in the following aspect:\npublic aspect RunnableDefaultImpl {\n    public void Runnable.walk() {\n    }\n}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeMunger.java"
      ]
    }
  },
  "91473b3": {
    "bug_report": {
      "summary": "Bug 132160  NPE in SingleTypeReference",
      "description": "I was C&P'ing the guts of another aspect into a new file (from another project that I'm porting over).  There are a number of errors in the aspect (as most of the references point to the other project).  I just changed an object from one type (in the other project) to a type in the project that the file is in.\n\n\nEclipse SDK\nVersion: 3.1.2\nBuild id: M20060118-1600\n\nVersion: 1.3.0\nBuild id: 20051220093604\nAspectJ version: 1.5.0\n\n----------------------------------------------------------------\n\njava.lang.NullPointerException\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding(SingleTypeReference.java:39)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.getTypeBindingPublic(TypeReference.java:98)\nat org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind(AsmElementFormatter.java:230)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:399)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1250)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:392)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse(LocalDeclaration.java:242)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:212)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:142)\nat org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:82)\nat org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:926)\nat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:195)\nat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184(CompilerAdapter.aj:89)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:528)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java"
      ]
    }
  },
  "7a2087e": {
    "bug_report": {
      "summary": "Bug 128744  LTW doesn't work using JRE1.4 in Eclipse",
      "description": "LTW doesn't work using JRE1.4 in Eclipse\n\nnow I want to support JRE1.4 when LTW.\nI defined a aop.xml file in application META-INF path, it works fine using JRE1.4 in command-line, aop.xml file is used when LTW, the command as below:\n\n\"D:\\work\\BTM\\eclipse 3.1.1\\eclipse-SDK-3.1.1-win32\\eclipse-1.4.2\\jre\\bin\\java\" -classpath \"C:\\aspectj1.5\\lib\\aspectjweaver.jar\" \"-Djava.system.class.loader=org.aspectj.weaver.loadtime.WeavingURLClassLoader\" \"-Daj.class.path=D:\\work\\BTM\\eclipse 3.1.1\\jre1.4.2\\myTest;C:\\aspectj1.5\\doc\\examples\\armtest\\jar\\btm-deps-e3.1.jar;C:\\aspectj1.5\\doc\\examples\\armtest\\jar\\btm-rt.jar\" Hello\n\n\nbut it doesn't work in Eclipse, I added upper command to VM arguments, it can't find aop.xml, because if I changed aop.xml to be wrong, there is no any error when execute the application in Eclipse , but there will be error when execute it in command-line, based on this point, I think that aop.xml didn't be used in Eclipse, I also tried to add \"-Daj.aspect.path=D:\\work\\BTM\\eclipse 3.1.1\\jre1.4.2\\myTest\", but it is still. so I want to confirm if AspectJ only supports command-line for JRE1.4? doesn't support Eclipse for JRE1.4?\n\nBTW, my Eclipse env: eclipse 3.1.1 + ajdt_1.3_for_eclipse_3.1 + Sun JDK 1.4.2.\nI also tried to use eclipse 3.1.2, but this problem is still existed."
    },
    "commit": {
      "diff": [
        "tests/bugs151/pr128744/World.java",
        "loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "tests/bugs151/pr128744/Hello.java"
      ]
    }
  },
  "7389d9f": {
    "bug_report": {
      "summary": "Bug 91267  NPE at EclipseFactory.java:143 when using generic methods in aspects",
      "description": "When I compile any of these two aspects with ajc -1.5, an exception is thrown by\nthe compiler:\n\n\nimport java.util.*;\n\npublic aspect TestBug1 {\n    static <T> void addToEnv(Map<String,T> env, String key, T value) {\n\tenv.put(key, value);\n    }\n}\n\n\nimport java.util.*;\n\npublic aspect TestBug2 {\n    static <T> T lookupEnv(Map<String,T> env, String key) {\n\treturn env.get(key);\n    }\n}\n\n\nIf the methods are placed into classes instead of aspects, all works fine.\n\nThe exception thrown is the following:\n\njava.lang.NullPointerException\n        at\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.getName(EclipseFactory.java:143)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:166)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings(EclipseFactory.java:176)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:254)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:249)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.fillDeclaredMembers(EclipseSourceType.java:115)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getDeclaredPointcuts(EclipseSourceType.java:146)\n        at\norg.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclaration.java:977)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupEnvironment.java:303)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:119)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:331)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:348)\n        at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:683)\n        at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:168)\n        at\norg.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:102)\n        at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:109)\n        at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n        at org.aspectj.tools.ajc.Main.run(Main.java:291)\n        at org.aspectj.tools.ajc.Main.runMain(Main.java:227)\n        at org.aspectj.tools.ajc.Main.main(Main.java:80)"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/TypeX.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java"
      ]
    }
  },
  "be5a530": {
    "bug_report": {
      "summary": "Bug 318878  Pertarget aspect instantiation is not thread-safe",
      "description": "The way in which pertarget aspects compiled with ajc check if a given target already has an aspect is not thread safe. When two different threads trigger an advice on a target object for the first time at the same time, sometimes the aspect for that target gets created twice.\n\nThe following code demonstrates the problem:\n\nThe following pertarget aspect will add itself to a (synchronized) set in another class in it's constructor.\n\naspect Pertarget pertarget(execution(void foo())) {\n        public Pertarget() {\n                Main.aspects.add(this); // Add this instance to the set in Main\n        }\n        before(): execution(void foo()) {} // Empty advice to trigger creation\n}\n\nThis class creates 10000 target objects and has two separate threads call a method (that causes the aspect to be instantiated) on each object. The aspects add themselves to the \"aspects\" set and this set's size is printed when all threads have finished.\n\nimport java.util.Collections;\nimport java.util.IdentityHashMap;\nimport java.util.Set;\n\npublic class Main {\n    public static Set aspects = Collections.synchronizedSet(\n        Collections.newSetFromMap(new IdentityHashMap()));\n    public static void main(String[] args) throws InterruptedException {\n        for (int i = 0; i < 10000; ++i) {\n            final Main m = new Main(); // Create a new target for the aspect\n            Runnable r = new Runnable() {\n                public void run() { m.foo(); } // This will trigger the advice\n            };\n            Thread t1 = new Thread(r);\n            Thread t2 = new Thread(r);\n            t1.start();\n            t2.start();\n            t1.join();\n            t2.join();\n        }\n        System.out.println(aspects.size()); // Should be 10000\n    }\n    private void foo() {}\n}\n\nWhen compiled with ajc and run, the main method prints values over 10000 (something like 10030-10060 typically), which means that some target objects get multiple aspect instances.\n\nIn my own application I sometimes also saw some threads accessing partially built aspect instances. This was quite rare however and I wasn't able to make a test case for it.\n\nThe ajc version (the current stable) used was:\nAspectJ Compiler 1.6.8 (1.6.8 - Built: Friday Jan 8, 2010 at 21:53:37 GMT) - Eclipse Compiler 0.785_R33x, 3.3\n\nThe sun vm version was:\nJava(TM) SE Runtime Environment (build 1.6.0_20-b02)\nJava HotSpot(TM) 64-Bit Server VM (build 16.3-b01, mixed mode)\n\nI investigated the source of this problem: the ajc compiler generates the following (decompiled) method into the aspect class:\n\npublic static void ajc$perObjectBind(Object obj)\n{\n    if((obj instanceof ajcMightHaveAspect) && ((ajcMightHaveAspect)obj).perObjectGet() == null)\n        ((ajcMightHaveAspect)obj).perObjectSet(new Pertarget());\n}\n\n, which obviously is not thread safe."
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/AjcMemberMaker.java"
      ]
    }
  },
  "c54fa62": {
    "bug_report": {
      "summary": "Bug 164288  Can no longer compile JDK 1.5 projects with apsectj for JDeveloper",
      "description": "I am working with AspectJ 1.5.2 in JDeveloper and have found that it is \nnot possible to convince the compiler to use JDK 5 constructs.\n \nIt appears that there is a method on AjcBuildOptions called \ngetJavaOptionsMap() which is currently implemented to return null in all \ncases. In CompilerAdapter.configureBuildOptions areound line 358 the \ncode tried to access this object to access whether to use JDK 5 \nconstructs or not. Since the return value is always null the project is \nnever properly configured. \n \nI notice that the only other implementation of the root interface is \nCoreBuildOption which appears to directly return a structure from the \neclipse class JavaProject. It would appear that this interface is \nbreaking the rules on abstraction, is this the correct read on the \nsituation? \n\nIf so the solution would either be to implement a CoreBuildOption class \nto correctly work with the ADJE project adapter class or alter the code in\nCompiler adapter to correct use the properties in project adapter. I think\nthat the latter is probably the best as BuildOption assumes a depedency on\nEclipse which shouldn't be there.\n\nWe do currently have customer, one in nato, who are currently having to \nwork around this issue so it would be good to get it resolve for 1.5.3 if possible\nBut I know I am a bit late for that now do to a lost email."
    },
    "commit": {
      "diff": [
        "ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java",
        "ajde/src/org/aspectj/ajde/BuildOptionsAdapter.java",
        "ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java"
      ]
    }
  },
  "92a52a2": {
    "bug_report": {
      "summary": "Bug 317139  NullPointerException during weaving",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java"
      ]
    }
  },
  "8c5d743": {
    "bug_report": {
      "summary": "Bug 61768  scope for intertype methods",
      "description": "/* According to the documentation, the scope rules for\n   intertype method declarations are interpreted\n   from the originating aspect. The only exceptions\n   (I thought) are the use of \"this\" and \"super\" which refer to\n   the target type.\n\n   According to that interpretation, the program below is type correct, but\n   ajc generates two error messages, shown in comments\n   at the relevant lines. Note that it's ok to access private static\n   fields of the aspect, but not to use private classes of the aspect.\n\n   If this is a feature and not a bug, what are the\n   precise scope rules for intertype method declarations?\n*/\n\naspect Aspect { \n\n    private static int y = 5;\n\n    private class A { int x = 3; }\n\n    private static void B.happy() {\n\tSystem.out.println(y);          // happy accessing private field y\n    }\n\n    private static void B.foo(A z) { \n\tSystem.out.println(z.x); \t// ERROR: The type Aspect.A is not visible\n    }\n\n    public void B.bar() {\n\tB.foo(new A());                 // ERROR: The type A is not visible\n    }\n\n}\n\nclass B {\n}\n\npublic class IT { \n\n\n    public static void main(String[] args) { \n\tnew B().bar();\n    } \n \n}"
    },
    "commit": {
      "diff": [
        "tests/bugs/oxford/PR62475.java",
        "tests/bugs/oxford/PR61768.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "dd7d879": {
    "bug_report": {
      "summary": "Bug 285172  Sometimes when load-time weaving there will be two ReferenceType objects for the same type",
      "description": "Seen by Ramnivas.\n\nA pointcut uses an exact type name for an annotation\n\nexecution(* (@Controller *..*).*(..))\n\nResolving this pointcut causes us to construct a ReferenceType for 'Controller'.  Then we attempt to populate it by loading the class implementation.  This recurses back into the weaver as Controller is loaded and an attempt is made to weave it.  This takes a second route through the weaver to build a referencetype again and this second referencetype is cached in the world.  When we unwind, we continue building the original referencetype and are left with one in the cache and the one resolved for the pointcut.  Due to the use of == for comparison, we fail to match on join points later because they will use the ReferenceType from the cache."
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/World.java"
      ]
    }
  },
  "693945f": {
    "bug_report": {
      "summary": "Bug 123901  NPE in AccessForInlineVisitor.endVisit(AccessForInlineVisitor.java:105)",
      "description": "java.lang.NullPointerException\nat org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisit(AccessForInlineVisitor.java:105)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference.traverse(QualifiedNameReference.java(Compiled Code))\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java(Compiled Code))\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java(Compiled Code))\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java(Compiled Code))\nat org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements(AdviceDeclaration.java:172)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java(Compiled Code))\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java(Compiled Code))\nat org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:115)\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java(Inlined Compiled Code))\nat org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java(Compiled Code))\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:514)\nat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java(Compiled Code))\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185)\nat org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163)\nat org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117)\nat org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n\nNullPointerException thrown: null"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "tests/bugs151/pr125475/TestEmptyPointcutAtAspect.java",
        "tests/bugs151/pr123901/B.java",
        "tests/bugs151/pr123901/A.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"
      ]
    }
  },
  "94d0a4e": {
    "bug_report": {
      "summary": "Bug 308386  NPE when hasfield evaluating with annotations and there is an unresolved import",
      "description": "hasfield/hasmethod can cause early matching - before the weaving process kicks in properly.  For a 'normal' compile error, like an unresolvable import, the error is put out before the weaving process kicks off.  However hasfield/hasmethod happening early causes an NPE to occur before the error is put out.\n\nA guard for the NPE (which occurs in EclipseResolvedMember.getAnnotationTypes()) addresses this problem and allows the real error to come out."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java"
      ]
    }
  },
  "d1a252e": {
    "bug_report": {
      "summary": "Bug 136665  Bug: ajc fails on missing classpath entries with fix",
      "description": "[iajc] error at (no source information available)\n     [iajc] File.aj:0::0 Internal compiler error\n     [iajc] org.aspectj.weaver.BCException: Can't open archive: missingjar\n\n     [iajc] when resolving types defined in compilation unit File.aj\n     [iajc] when processing compilation unit File.aj\n     [iajc] when batch building BuildConfig[null] #Files=14\n     [iajc]\n     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureO\npen(ClassPathManager.java:258)\n     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find(Cl\nassPathManager.java:225)\n     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManage\nr.java:92)\n     [iajc]     at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.j\nava:287)\n     [iajc]     at org.aspectj.weaver.World.resolveToReferenceType(World.java:33\n5)\n     [iajc]     at org.aspectj.weaver.World.resolve(World.java:251)\n     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInWorld\n(WildTypePattern.java:716)\n     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFr\nomFullyQualifiedTypeName(WildTypePattern.java:690)\n     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(W\nildTypePattern.java:623)\n     [iajc]     at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings(\nSignaturePattern.java:82)\n     [iajc]     at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings(Ki\nndedPointcut.java:259)\n     [iajc]     at org.aspectj.weaver.patterns.AndPointcut.resolveBindings(AndPo\nintcut.java:74)\n     [iajc]     at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:19\n4)\n     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.fin\nishResolveTypes(PointcutDesignator.java:84)\n     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.reso\nlveStatements(AdviceDeclaration.java:118)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMet\nhodDeclaration.resolve(AbstractMethodDeclaration.java:400)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara\ntion.resolve(TypeDeclaration.java:1088)\n     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.reso\nlve(AspectDeclaration.java:116)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara\ntion.resolve(TypeDeclaration.java:1137)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Compilation\nUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.proces\ns(Compiler.java:514)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compil\ne(Compiler.java:329)\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.perform\nCompilation(AjBuildManager.java:845)\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:241)\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu\nild(AjBuildManager.java:161)\n     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:1\n12)\n     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:\n60)\n     [iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:356)\n     [iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:246)\n     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTas\nk.java:1262)\n     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1\n056)\n     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja\nva:275)\n     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)\n     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)\n     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)\n     [iajc]     at org.apache.tools.ant.Project.executeTarget(Project.java:1214)\n\n     [iajc]     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:386)\n     [iajc]     at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.j\nava:106)\n     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja\nva:275)\n     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)\n     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)\n     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)\n     [iajc]     at org.apache.tools.ant.Project.executeTarget(Project.java:1214)\n\n     [iajc]     at org.apache.tools.ant.Project.executeTargets(Project.java:1062\n)\n     [iajc]     at org.apache.tools.ant.Main.runBuild(Main.java:673)\n     [iajc]     at org.apache.tools.ant.Main.startAnt(Main.java:188)\n     [iajc]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:196)\n     [iajc]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:55)\n     [iajc] Caused by: java.util.zip.ZipException: error in opening zip file\n     [iajc] java.util.zip.ZipException: error in opening zip file\n     [iajc]     at java.util.zip.ZipFile.open(Native Method)\n     [iajc]     at java.util.zip.ZipFile.<init>(ZipFile.java:111)\n     [iajc]     at java.util.zip.ZipFile.<init>(ZipFile.java:127)\n     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureO\npen(ClassPathManager.java:252)\n     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find(Cl\nassPathManager.java:225)\n     [iajc]     at org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManage\nr.java:92)\n     [iajc]     at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.j\nava:287)\n     [iajc]     at org.aspectj.weaver.World.resolveToReferenceType(World.java:33\n5)\n     [iajc]     at org.aspectj.weaver.World.resolve(World.java:251)\n     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInWorld\n(WildTypePattern.java:716)\n     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFr\nomFullyQualifiedTypeName(WildTypePattern.java:690)\n     [iajc]     at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(W\nildTypePattern.java:623)\n     [iajc]     at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings(\nSignaturePattern.java:82)\n     [iajc]     at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings(Ki\nndedPointcut.java:259)\n     [iajc]     at org.aspectj.weaver.patterns.AndPointcut.resolveBindings(AndPo\nintcut.java:74)\n     [iajc]     at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:19\n4)\n     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.fin\nishResolveTypes(PointcutDesignator.java:84)\n     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.reso\nlveStatements(AdviceDeclaration.java:118)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMet\nhodDeclaration.resolve(AbstractMethodDeclaration.java:400)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara\ntion.resolve(TypeDeclaration.java:1088)\n     [iajc]     at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.reso\nlve(AspectDeclaration.java:116)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara\ntion.resolve(TypeDeclaration.java:1137)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Compilation\nUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.proces\ns(Compiler.java:514)\n     [iajc]     at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compil\ne(Compiler.java:329)\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.perform\nCompilation(AjBuildManager.java:845)\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n(AjBuildManager.java:241)\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu\nild(AjBuildManager.java:161)\n     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:1\n12)\n     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:\n60)\n     [iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:356)\n     [iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:246)\n     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTas\nk.java:1262)\n     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1\n056)\n     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja\nva:275)\n     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)\n     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)\n     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)\n     [iajc]     at org.apache.tools.ant.Project.executeTarget(Project.java:1214)\n\n     [iajc]     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:386)\n     [iajc]     at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.j\nava:106)\n     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja\nva:275)\n     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)\n     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)\n     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)\n     [iajc]     at org.apache.tools.ant.Project.executeTarget(Project.java:1214)\n\n     [iajc]     at org.apache.tools.ant.Project.executeTargets(Project.java:1062\n)\n     [iajc]     at org.apache.tools.ant.Main.runBuild(Main.java:673)\n     [iajc]     at org.apache.tools.ant.Main.startAnt(Main.java:188)\n     [iajc]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:196)\n     [iajc]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:55)\n     [iajc] abort ABORT -- (BCException) Can't open archive: wissing.jar\n     [iajc] when resolving types defined in compilation unit File.aj\n     [iajc] when processing compilation unit File.aj\n     [iajc] when batch building BuildConfig[null] #Files=14"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java"
      ]
    }
  },
  "979124d": {
    "bug_report": {
      "summary": "Bug 120351  cflowbelow issue when binding, in @AJ",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelShadow.java",
        "tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java",
        "tests/java5/ataspectj/ataspectj/bugs/CflowBelowStackTest.java"
      ]
    }
  },
  "549d227": {
    "bug_report": {
      "summary": "Bug 374745  Performance regression in 1.6.12",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/UnresolvedType.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/UnresolvedTypeVariableReferenceType.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/World.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java"
      ]
    }
  },
  "5b90224": {
    "bug_report": {
      "summary": "Bug 71076  Missing Javadoc comments that aren't missing",
      "description": "Reported in the AJDT newsgroup:\n\nGo to Preferences > Java > Compiler > Javadoc and set \"Missing javadoc comments\"\nto \"Warning\".\n\nYou then get warnings against things you wouldn't expect, such as after advice.\n\n/**\n * A comment\n */\npublic aspect World {\n\tpointcut greeting() : execution(* Hello.sayHello(..));\n\t\n\t/**\n\t * A comment\n\t */\n\tafter() returning : greeting() {\n\t\tSystem.out.println(\"world\");\n\t}\n}\n\nThis gives two warnings, one for the aspect itself, and one for the after\nreturning advice. The warnings occur both with and without the existence of\nJavadoc comments!"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/testdata/javadoc/World.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/JavadocTest.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java"
      ]
    }
  },
  "1b01255": {
    "bug_report": {
      "summary": "Bug 83563  pertypewithin() handing of inner classes",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs150/PR83563_2.java",
        "weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java",
        "weaver/src/org/aspectj/weaver/PerTypeWithinTargetTypeMunger.java",
        "tests/bugs150/PR83563_1.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java"
      ]
    }
  },
  "684c9c1": {
    "bug_report": {
      "summary": "Bug 40534  Declare warning/error output - more detail required.",
      "description": "At present the declare warning and declare error functionality of the compiler \nprovides no detailed information about what it is in the user code that has led \nto the generation of the compile-time warning or error. \n\nConsider the following test case...\n\npublic class A\n{\n  public static void main(String[] args)\n  {\n    A a = new A();\n    a.doSomething();\n    System.out.println(\"All done\");\n  }\n\n  void doSomething()\n  {\n    System.out.println(\"Doing something\");\n  }\n} // end of class A\n\n\npublic aspect MyAspect\n{\n  pointcut noDoing() :\n    call(* *.doSomething(..));\n\n  declare warning : noDoing() :\n    \"Don't do it!\";\n} \n\nWhen I compile these two files I get the following warning ...\n\nc:\\src\\A.java:16 Don't do it!\n\n..which is great if all I want to know is where the offending code is. But not \nnearly enough if I want to know what it is on the line that is contravening the \npolicy (or policies) that I have specified in my aspect. In the above example it \nwould be even more useful if the warning message was something like ...\n\nc:\\src\\A.java:16 Don't do it! : calling method : void A.doSomething()\n\nFor large projects where there is an architectural imperative to reduce or \ncompletely remove coupling between certain components declare warning/error \nwould be of far greater use if it could return more detailed info to say *why* \nnot just *where* the desired enforcement rules have been broken."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/Checker.java",
        "bridge/src/org/aspectj/bridge/IMessage.java",
        "bridge/src/org/aspectj/bridge/Message.java",
        "testing/src/org/aspectj/testing/xml/SoftMessage.java"
      ]
    }
  },
  "0a01759": {
    "bug_report": {
      "summary": "Bug 53012  declare precedence on a class should be a compile-time error",
      "description": "The compiler silently accepts\n\n----\npublic class DeclarePrecedence {\npublic static void main(String[] args) {\n    System.out.println(\"hello\");\n}\n}\naspect DP {\n    declare precedence: DeclarePrecedence, DP;\n    before() : staticinitialization(DeclarePrecedence) {\n        System.out.println(\"ok\"); \n    }\n}\n----\n\nSince this is likely to be a mistake, an error would be nice.  However, that\nwould mean saying (!TargetClass && TargetClass+) to pick out the aspect subtypes\nof TargetClass."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java",
        "tests/bugs/declarePrecedenceWithClasses/DeclarePrecedenceTestClass.java"
      ]
    }
  },
  "248962b": {
    "bug_report": {
      "summary": "Bug 155347  NPE during compilation of class file with pointcuts",
      "description": "I commented out a static nested aspect inside a class to let me do a rename refactoring in Eclipse. This results in the following exception, which even a full rebuild won't fix. The class does have pointcut definitions inside of it. Commenting those out avoids the problem (though it caused other syntax errors...)\n\njava.lang.ArrayIndexOutOfBoundsException\nat org.aspectj.weaver.patterns.IfPointcut.findResidueInternal(IfPointcut.java:186)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:269)\nat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)\nat org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:269)\nat org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93)\nat or ... ses \nwhen weaving \nwhen batch building BuildConfig[C:\\devel\\glassbox\\.metadata\\.plugins\\org.eclipse.ajdt.core\\glassboxAgent.generated.lst] #Files=210"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/IfPointcut.java"
      ]
    }
  },
  "169a488": {
    "bug_report": {
      "summary": "Bug 91114  [jdt-parser] Parser error on System.out.printf(\"...\" + (after-before) + \"...\")",
      "description": "Following code fragment:\n\n*****************************\nclass Foo {\n        public void bar () {\n                long before = 0;\n                long after = 0;\n                System.out.println(\"... \" + (before - after) + \" ...\");\n\n        }\n}\n*****************************\n\nleads to following parser error\n\n*****************************\n[...].java:25 [error] Syntax error on token \"-\", invalid AssignmentOperator\nSystem.out.println(\"... \" + (before - after) + \" ...\");\n*****************************\n\nProblems seems to vanish when I rename the before variable."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "f7508cf": {
    "bug_report": {
      "summary": "Bug 160167  NPE when using crossrefs option for iajc ant task",
      "description": "The ant task is shown below.  I ommited the full paths to the values of inpath, outJar, and argfiles, because they are somewhat long (hence the \"...\" before the file names):\n\n<iajc  \ncrossrefs=\"true\" argfiles=\"...\\weave-jars.txt\" inpath=\"...\\org.eclipse.core.runtime_3.2.0.v20060603.jar\" outJar=\"...\\org.eclipse.core.runtime_3.2.0.v20060603_woven.jar\">\n  <classpath>\n    <pathelement location=\"C:\\aspectj1.5\\lib\\aspectjrt.jar\"/>\n      <fileset dir=\"${plugins.dir}\">\n        <include name=\"**/*.jar\"/>\n      </fileset>\n  </classpath>\n</iajc>\n\nMy argfile only contains the absolute path of a single .aj file, which contains one aspect.  The aspect is shown below.  It is very basic - advice bodies simply toggle a boolean variable.  \n\npublic aspect FFDC {\n  public static boolean bit = false;\n  protected pointcut ffdcScope(): within(org.eclipse..*);\t\n  protected pointcut excluded():  within(org.eclipse.ffdc.FFDC+)\n\t|| within(org.eclipse.core.internal.runtime.PlatformActivator);\n\t\n  before(CoreException c): ffdcScope() && !excluded() \n      && handler(CoreException+) && args(c) {\n    bit = !bit;\n  }\n\t\n  after() throwing(CoreException c): ffdcScope() && !excluded() && !handler(*) {\n    bit = !bit;\n  }\n\t\n  after(Plugin activator): execution(void PlatformActivator.start(..)) \n      && this(activator) {\n    bit = !bit;\n  }\n}\n\nThis task worked properly before I added \"crossrefs=true\".  After adding this option, I get the following error:\n\nweave-C:\\eclipse\\sdk-aspect-package\\eclipse\\plugins\\org.eclipse.core.runtime_3.2.0.v20060603.jar:\n     [iajc] abort ABORT -- (NullPointerException) null\n     [iajc] null\n     [iajc] java.lang.NullPointerException\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:313)\n     [iajc]     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163)\n     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n     [iajc]     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n     [iajc]     at org.aspectj.tools.ajc.Main.run(Main.java:367)\n     [iajc]     at org.aspectj.tools.ajc.Main.runMain(Main.java:246)\n     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1282)\n     [iajc]     at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1080)\n     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)\n     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)\n     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)\n     [iajc]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1216)\n     [iajc]     at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:37)\n     [iajc]     at org.apache.tools.ant.Project.executeTargets(Project.java:1068)\n     [iajc]     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:382)\n     [iajc]     at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:107)\n     [iajc]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n     [iajc]     at org.apache.tools.ant.Task.perform(Task.java:364)\n     [iajc]     at org.apache.tools.ant.Target.execute(Target.java:341)\n     [iajc]     at org.apache.tools.ant.Target.performTasks(Target.java:369)\n     [iajc]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1216)\n     [iajc]     at org.apache.tools.ant.Project.executeTarget(Project.java:1185)\n     [iajc]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)\n     [iajc]     at org.apache.tools.ant.Project.executeTargets(Project.java:1068)\n     [iajc]     at org.apache.tools.ant.Main.runBuild(Main.java:668)\n     [iajc]     at org.apache.tools.ant.Main.startAnt(Main.java:187)\n     [iajc]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:246)\n     [iajc]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:67)"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java"
      ]
    }
  },
  "5f6b18b": {
    "bug_report": {
      "summary": "Bug 59909  CFlowStack removesThreads to late",
      "description": "Problem:\nThe current implementation of CFlowStack (Version 1.1-till 1.2 rc1) stores all \nthreads in a hashtable. These Threads are removes after several calls to the \nmethods getThreadStack(). (In our cases >70 calls.)\n\nIn our project, this cycle is much to long. We have soveral long running \nthreads, which grap quite a lot of lot of memory. This memory can only be freed \nafter the threads have been removed from the CFlowStack. \nIn our production code we sum up to more than 300 Threads stored in different \nCFlowStack Varaibles. Often this results in out of memory Errors.\n\nAdded patch provides an improved freeing scheme.\n\nIt checks if the size of the table has grown, if it has, it checks if it can \nremove some threads."
    },
    "commit": {
      "diff": [
        "runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackFactoryImpl11.java",
        "runtime/src/org/aspectj/runtime/internal/CFlowStack.java",
        "runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackFactoryImpl.java",
        "runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackImpl11.java",
        "runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStack.java",
        "runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackFactory.java"
      ]
    }
  },
  "27e68f3": {
    "bug_report": {
      "summary": "Bug 108050  Execution not matching override in doubly derived method",
      "description": "The following sample code fails because the compiler isn't matching the\nexecution of doPost in MockServlet4. The declare warning for \"servlet request\"\ndoesn't match  in that case, nor does advice on the join point actually run at\nruntime (though this simplified code only shows the problem with declare\nwarning). This was working until fairly recently (certainly in M2, even in AJDT\nfrom August 11).\n\npublic abstract class MockServlet extends HttpServlet {\n    \n    protected void doPost() {\n    }\n\n    private static aspect FindMatches {\n        declare warning: execution(* HttpServlet.do*(..)): \"servlet request\";\n        declare warning: execution(* HttpServlet+.do*(..)): \"servlet request2\";    \t\n    }\n}\n\nclass HttpServlet {\n    protected void doPost() {\n    }    \n}\n\npublic class MockDelayingServlet extends MockServlet {\n    private static final long serialVersionUID = 1; \n}\n\npublic class MockServlet4 extends MockDelayingServlet \n{\n    protected void doPost()\n    {\n    } \n}\n\ncompiler output (should have 6 warnings, including two for MockServlet4):\n\nC:\\devel\\workspace\\test\\src\\MockServlet.java:16 [warning] servlet request\nprotected void doPost() {\n^^^^^^^^^^^^^^^^^^^^^^^^^\n        method-execution(void MockServlet.doPost())\n        see also: C:\\devel\\workspace\\test\\src\\MockServlet.java:20::0\nC:\\devel\\workspace\\test\\src\\MockServlet.java:16 [warning] servlet request2\nprotected void doPost() {\n^^^^^^^^^^^^^^^^^^^^^^^^^\n        method-execution(void MockServlet.doPost())\n        see also: C:\\devel\\workspace\\test\\src\\MockServlet.java:21::0\nC:\\devel\\workspace\\test\\src\\MockServlet.java:26 [warning] servlet request\nprotected void doPost() {\n^^^^^^^^^^^^^^^^^^^^^^^^^\n        method-execution(void HttpServlet.doPost())\n        see also: C:\\devel\\workspace\\test\\src\\MockServlet.java:20::0\nC:\\devel\\workspace\\test\\src\\MockServlet.java:26 [warning] servlet request2\nprotected void doPost() {\n^^^^^^^^^^^^^^^^^^^^^^^^^\n        method-execution(void HttpServlet.doPost())\n        see also: C:\\devel\\workspace\\test\\src\\MockServlet.java:21::0\nC:\\devel\\workspace\\test\\src\\MockServlet4.java:9 [warning] servlet request2\nprotected void doPost()\n^^^^^^^^^^^^^^^^^^^^^^^\n        method-execution(void MockServlet4.doPost())\n        see also: C:\\devel\\workspace\\test\\src\\MockServlet.java:21::0\n\n5 warnings"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/JoinPointSignature.java"
      ]
    }
  },
  "f603458": {
    "bug_report": {
      "summary": "Bug 93345  unresolved joinpoint in cflow causes ClassCastException on BcelWeaver:933",
      "description": "I'm getting ClassCastException while compiling following code:\n\n---- Test.java ----\nclass AClass {\n//      void method() {}\n}\n\naspect AnAspect {\n        pointcut annt() : cflow( execution(* *(..)) );\n\n        before() : annt() {\n                System.out.println(\"before annt\");\n        }\n}\n----\n\nHere's output of the compiler:\n--- out ---\njava.lang.ClassCastException: org.aspectj.weaver.ResolvedMember\n        at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:933)\n        at\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:244)\n        at\norg.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:119)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:385)\n  [cut]\n------\n\nThe problem is caused by cflow on unresolved (not existing) jointpoint.\nWhen you uncomment the method() in AnClass, the problem disappears.\n\n\nI found this bug when I was introducing an aspect (which has\npointcuts based on annotations) to fresh object-oriented system\nwithout annotated classes. When I started to annotate the classes\nproblem disappeared. Following code illustates (simplified) situation:\n\n--- Test2.java ---\nimport java.lang.annotation.*;\n\n@Target(ElementType.METHOD)\n@interface Ann {}\n\nclass AClass {\n        // @Ann\n        void method() {}\n}\n\naspect AnAspect {\n        pointcut annt() : cflow( execution(@Ann * *(..)) );\n\n        before() : annt() {\n                System.out.println(\"before annt\");\n        }\n}\n----\n\n\nI'm attaching those sources and ajcore files.\n\nBest regards, Michal"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "tests/src/org/aspectj/systemtest/ajc150/StaticImports.java",
        "tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java",
        "tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java"
      ]
    }
  },
  "bb2aea4": {
    "bug_report": {
      "summary": "Bug 349764  Repeated output of ASPECTJ: aspectj.overweaving=true: overweaving switched ON",
      "description": "Build Identifier: 1.6.11\n\nThe message is repeated every time a new class loader is being use to load weaving configuration (using  -Dorg.aspectj.tracing.factory=default). Since this value is a system (!) property there is no need to display its value more than once (or even check it more than once - it could be lazily initialized and cached...)\n\nReproducible: Always\n\nSteps to Reproduce:\n1. use -Dorg.aspectj.tracing.factory=default -Daspectj.overweaving=true properties\n2. place some JAR that contains aop.xml with some aspects and weaving options where it can be loaded/visible from several class loaders\n3. runt the application and check the STDOUT output"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/World.java"
      ]
    }
  },
  "58e3cb2": {
    "bug_report": {
      "summary": "Bug 40824  asm treats \"declare parents\" as methods",
      "description": "\"declare parents\" member declarations report their kind as \"method\" instead of \nwhat they are."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java"
      ]
    }
  },
  "41c6f6d": {
    "bug_report": {
      "summary": "Bug 54965  Incremental compilation does twice as much work as necessary",
      "description": "When I added support for -outjar in the test harness, I was surprised to find \nduplicate entry exceptions coming from the output file writing to the outjar. I \ntraced it through, and found that every source file passed to an incremental \ncompile is in fact compiled twice!\n\nThe first time round we note the references, and of course each file has a \nreference to itself. Then we call \"AjState.getFilesToCompile\" looking to see if \nthere are any further files to compile in another iteration. This method does \nnot remember the set of files it just compiled, so since we have referenced each \ntype we just compiled, and we have no reord of that fact, we compile them again. \nSecond time around, the bytecodes are identical to the previous go, so \nrecordClassFile doesn't note their dependents - and thus this time we terminate."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java"
      ]
    }
  },
  "5834de9": {
    "bug_report": {
      "summary": "Bug 44587  Erroneous exception conversion",
      "description": null
    },
    "commit": {
      "diff": [
        "runtime/src/org/aspectj/lang/NoAspectBoundException.java",
        "weaver/src/org/aspectj/weaver/NameMangler.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java",
        "tests/bugs/ErroneousExceptionConversion.java",
        "tests/bugs/ErroneousExceptionConversion1.java",
        "weaver/src/org/aspectj/weaver/AjcMemberMaker.java",
        "runtime/testsrc/RuntimeModuleTests.java",
        "tests/new/ConstructorExecInitFails.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java"
      ]
    }
  },
  "bd16033": {
    "bug_report": {
      "summary": "Bug 59599  Race condition in test suite for incremental",
      "description": "On faster machines (my linux desktop, andy's home pc) several of the tests in\najcTests.xml are failing (suite attached). This appears to be due to a race \ncondition between checking directory contents and waiting for the compilation to \ncomplete. I have an environment in which I can test candidate fixes if you can \ngive me a pointer for what to tweak..."
    },
    "commit": {
      "diff": [
        "testing/src/org/aspectj/testing/harness/bridge/DirChanges.java"
      ]
    }
  },
  "68f6350": {
    "bug_report": {
      "summary": "Bug 84122  Allow aspectPath to contain directories",
      "description": "The -aspectpath option to the compiler only allows jar/zip files, not\ndirectories. But inpath and classpath allow directories.\n\nThis capability would improve the handling of aspects spanning multiple projects\nin Eclipse. AJDT can currently only support jar/zip files on the aspect path,\nwhich requires one of the projects to create an outjar instead of writing to the\nbin directory as usual.\n\nThe iajc ant task could then also be enhanced to support aspectpath directories."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "tests/options/aspectpath/MyClass.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "c760895": {
    "bug_report": {
      "summary": "Bug 116626  Load-time weaving - exception from the weaver",
      "description": "Hi again :-)\n\nI'm trying to use loadtime weaving and getting an exception. Please look at the \ntestcase:\n\nJava code:\n==========\npublic class Test<T> {\n\n\tSet<T> intsSet;\n\n\tpublic Test() {\n\t\tthis.intsSet = new HashSet<T>();\n\t}\n\n\tpublic <T> T[] getObjs(T[] a) {\n\t\treturn intsSet.toArray(a);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"AAA :-)\");\n\t\tnew TTT().foo();\n\t}\n}\n\nclass TTT {\n\tpublic void foo() {\n\t\tTest<Object> mt = new Test<Object>();\n\t\tObject[] arr = mt.getObjs(new Object[]{});\n\t}\n}\n\nAspect:\n=======\npublic privileged aspect TestAspect {\n\n      pointcut TestToArray(Test mt) :\n                target(mt) &&\n                !within(TestAspect);\n\n\n    Object[] around(Test mt, Object[] objs) :\n            TestToArray(mt) &&\n            args(objs) &&\n            execution(Object[] com.mprv.secsph.Test.getObjs(Object[])) {\n\n        objs = proceed(mt, objs);\n        System.out.println(\"GO Aspects!\");\n        return objs;\n    }\n}\n\naop.xml\n=======\n<aspectj>\n\t<aspects>\n\t\t<aspect name=\"com.mprv.secsph.TestAspect\"/>\n\t</aspects>\n\n\t<weaver options=\"-verbose -XlazyTjp -showWeaveInfo\">\n\t\t<include within=\"com.mprv.*\"/>\n\t</weaver>\n</aspectj>\n\nProgram output:\n==============\nAAA :-)\ninfo weaving 'com/mprv/secsph/TestAspect'\njava.lang.NullPointerException\n\tat \norg.aspectj.weaver.tools.WeavingAdaptor$WeavingClassFileProvider.getBytes\n(WeavingAdaptor.java:390)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.getAtAspectJAspectBytes\n(WeavingAdaptor.java:259)\n\tat org.aspectj.weaver.tools.WeavingAdaptor.weaveClass\n(WeavingAdaptor.java:181)\n\tat org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:66)\n\tat org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform\n(ClassPreProcessorAgentAdapter.java:52)\n\tat sun.instrument.TransformerManager.transform\n(TransformerManager.java:122)\n\tat sun.instrument.InstrumentationImpl.transform\n(InstrumentationImpl.java:155)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass\n(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\tat com.mprv.secsph.Test.getObjs(Test.java:1)\n\tat com.mprv.secsph.TTT.foo(Test.java:34)\n\tat com.mprv.secsph.Test.main(Test.java:27)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:86)\nGO Aspects!\n\n====\n\nThis exception doesn't happen all the time ... but if you will try a few times, \nyou will probably get it. May you can understand what is the problem event \nwithout running the test case. \n\nAnyway, I took a look at your code, and have a guess (but it's only the guess) -\nMy aspect is in the application classpath. Actually it's in the same package, \nso may be you are trying to weave the aspect with itself somehow ...\n\nThanks!\nMisha."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "tests/bugs150/pr116626/com/foo/bar/Test.java"
      ]
    }
  },
  "b3cd01d": {
    "bug_report": {
      "summary": "Bug 131505  Generated aop.xml files contain aspects for all the projects ever built",
      "description": "Using the -outxml option in AJDT the generated aop.xml files are not correct after the first build and contain all the aspects that have ever been built (including those in different projects and duplicates if an aspect has been built twice).  It seems that there is a global list of aspects (aspectNames in AjBuildManager) that is never cleared."
    },
    "commit": {
      "diff": [
        "tests/multiIncremental/PR131505/base/C.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "tests/multiIncremental/PR131505/inc2/C.java"
      ]
    }
  },
  "7322131": {
    "bug_report": {
      "summary": "Bug 47754  illegal method modifier",
      "description": "the attached example throws this at class load time.\n\nplease note that this bug results in a different exception when happens in a \ndifferent setup, and when the class is loaded by JBoss. (more cryptic, talking \nabout generic class format error)\n\n\n\nException in thread \"main\" java.lang.ClassFormatError: \ncom/netvisor/nvsr/client/InvalidByteCodeBug$Test$ITest (Illegal method \nmodifiers: 0x409)\n        at java.lang.ClassLoader.defineClass0(Native Method)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:537)\n        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:\n123)\n        at java.net.URLClassLoader.defineClass(URLClassLoader.java:251)\n        at java.net.URLClassLoader.access$100(URLClassLoader.java:55)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:194)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:187)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:289)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:235)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302)\n        at java.lang.ClassLoader.defineClass0(Native Method)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:537)\n        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:\n123)\n        at java.net.URLClassLoader.defineClass(URLClassLoader.java:251)\n        at java.net.URLClassLoader.access$100(URLClassLoader.java:55)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:194)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:187)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:289)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:235)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302)\n        at com.netvisor.nvsr.client.InvalidByteCodeBug.run(InvalidByteCodeBug.\njava:15)\n        at com.netvisor.nvsr.client.InvalidByteCodeBug.main(InvalidByteCodeBug.\njava:8)"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java",
        "tests/bugs/StaticInterfaceMethods.java"
      ]
    }
  },
  "2c88c59": {
    "bug_report": {
      "summary": "Bug 101606  AspectJ compiler does not process unused code compiler options properly for aspects",
      "description": "In Eclipse (3.0) click 'Window' > 'Preferences' > 'Java' > 'Compiler'.  Select \nthe 'Unused Code' tab on the compiler preference page.  Change 'Unused or \nunread private members' to Warning or Error.  Create a project that contains \nan aspect with some private pointcuts.  You will see warnings or errors for \nthese pointcuts saying that they are unused."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java"
      ]
    }
  },
  "c1260e6": {
    "bug_report": {
      "summary": "Bug 29186  ajc -emacssym chokes on pointcut that includes an intertype method",
      "description": null
    },
    "commit": {
      "diff": [
        "asm/src/org/aspectj/asm/StructureModel.java",
        "weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java",
        "weaver/src/org/aspectj/weaver/Lint.java",
        "weaver/src/org/aspectj/weaver/Shadow.java",
        "weaver/src/org/aspectj/weaver/ResolvedTypeX.java",
        "weaver/src/org/aspectj/weaver/AsmAdaptor.java"
      ]
    }
  },
  "4d200d1": {
    "bug_report": {
      "summary": "Bug 289818  Unclosed stream in org.aspectj.weaver.bcel.ExtensibleURLClassLoader",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/ExtensibleURLClassLoader.java"
      ]
    }
  },
  "f95d2c9": {
    "bug_report": {
      "summary": "Bug 128699  Incorrect error on \"declare\" statements",
      "description": "The error associated with the declare construct is incorrect. \nThe current message is:\n\n\"expected one of error, warning, parents, soft, dominates\"\n\ndominates should be changed to \"precendence\" and new annotation related declararions should be mentioned. Here is a suggestion:\n\n\"expected one of error, warning, parents, soft, precedence, @type, @method, @constructor, @field\""
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/PatternParser.java"
      ]
    }
  },
  "db37189": {
    "bug_report": {
      "summary": "Bug 34820  ajc -aspectpath  fails with NPE for cflow pointcuts",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseAdvice.java"
      ]
    }
  },
  "588023e": {
    "bug_report": {
      "summary": "Bug 99168  [generics][itds] ITD on generic inner class crashes ajc",
      "description": "inter-type declaration on a generic inner class crashes the compiler:\n\nclass Outer {\n  class Inner {}\n  class Generic_Inner<T> {}\n}\n\nclass Generic_Outer<T> {\n}\n\naspect Injector {\n  int Outer.outer; // works\n  int Outer.Inner.inner; // works\n  int Generic_Outer.outer; // works\n  int Outer.Generic_Inner.inner; // crashes\n}\n\n\n/home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error\njava.lang.RuntimeException: can't handle: class Generic_Inner#RAW\n        extends NULL TYPENULL SUPERINTERFACES\n        enclosing type : OuterNULL FIELDSNULL METHODS\n\n\n        at\norg.aspectj.ajdt.internal.compiler.lookup.InterTypeScope.makeSourceTypeBinding(InterTypeScope.java:35)\n        at\norg.aspectj.ajdt.internal.compiler.lookup.InterTypeScope.<init>(InterTypeScope.java:28)\n        at\norg.aspectj.ajdt.internal.compiler.ast.InterTypeDeclaration.resolve(InterTypeDeclaration.java:101)\n        at\norg.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration.resolve(InterTypeFieldDeclaration.java:141)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1076)\n        at\norg.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:110)\n        at\norg.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1125)\n..."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java"
      ]
    }
  },
  "3d3d03b": {
    "bug_report": {
      "summary": "Bug 288505  failure to close inputstream",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/Lint.java"
      ]
    }
  },
  "9b30f9f": {
    "bug_report": {
      "summary": "Bug 37021  source path wrong in declare warning on binary files",
      "description": "In declare warning messages when targeting .class files from -injars, the source \npath is listed in the form \"app.Main.class\" rather than \"app/Main.[java|aj]\".\n\nSee tests/new/binaryWarnings/.. for code to run to see the problem.\n\nLimitations of the tests:\n- These tests return false positives when detecting this error because filename \nchecking is not enabled in harness verification of messages.\n\n- I have also see the filenames not appear at all, but these tests do not \nreproduce that problem.  (I saw it in AJDT, so perhaps if the filename makes no \nsense to AJDT, AJDT simply omits it.)"
    },
    "commit": {
      "diff": [
        "tests/new/binaryWarnings/src/app/Main.java",
        "tests/new/binaryWarnings/src/aspects/MainWarnings.java"
      ]
    }
  },
  "120b47f": {
    "bug_report": {
      "summary": "Bug 185447  [plan] [ataspectj] Abstract @Aspect causing problems",
      "description": "Trying to use an abstract @Aspect from a library jar file is causing problems.\n\nIn the (soon to be) attached zip of eclipse projects:\n* logging-library: defines two abstract trivial logging aspects, one in code-style and one in @AspectJ style.\n\n* sample-system: uses the code-style abstract aspect successfully\n* sample-system2: uses the @AspectJ style abstract aspect and won't compile in Eclipse\n\nException:\njava.lang.NullPointerException\nat org.aspectj.weaver.bcel.AtAjAttributes$LazyResolvedPointcutDefinition.getPointcut(AtAjAttributes.java:1632)\nat org.aspectj.weaver.ShadowMunger.addChildNodes(ShadowMunger.java:258)\nat org.aspectj.weaver.ShadowMunger.createHierarchy(ShadowMunger.java:247)\nat org.aspectj.weaver.AsmRelationshipProvider.adviceMunger(AsmRelationshipProvider.java:180)\nat org.aspectj.weaver.Shadow.implementMungers(Shadow.java:717)\na ... int;)Ljava/lang/String;\n                    ARETURN\n  end public Object run(Object[])"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java",
        "weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java"
      ]
    }
  },
  "0f506ab": {
    "bug_report": {
      "summary": "Bug 353457  NPE when saving an aspect - Aspectj Internal Compiler Error",
      "description": null
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java"
      ]
    }
  },
  "9319e34": {
    "bug_report": {
      "summary": "Bug 420210  Support additional message insert keys in declare error/warning",
      "description": "It would be good to be able to insert the enclosing class name or enclosing member for a joinpoint."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java",
        "tests/bugs174/extra_inserts/Code.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/Checker.java"
      ]
    }
  },
  "2c81907": {
    "bug_report": {
      "summary": "Bug 111667  Produce a compile warning when default advice precedence is applied",
      "description": "I propose that the compiler spit out a warning anytime that it has to apply \nthe default advice precedence.  Also, it should spit out the recommendation \nthat default ordering is not guaranteed from release to release of the \ncompiler.\n\nYou can see the thread on aspectj-dev titled \"change in runtime execution \norder\" and the one on aspectj-users titled \"AJDT 1.3 and aspectj\" for the \nreasoning behind why this is a good thing."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/World.java",
        "weaver/src/org/aspectj/weaver/Shadow.java",
        "weaver/src/org/aspectj/weaver/Lint.java"
      ]
    }
  },
  "3f6e166": {
    "bug_report": {
      "summary": "Bug 408721  java.util.ConcurrentModificationException when multiple threads enter the weaver",
      "description": "I am using AspectJ 1.7.1.  Occasionally I see the following exception, which I believe is related to multiple threads initializing some internal state.\n\njava.util.ConcurrentModificationException: null\n       at java.util.ArrayList$Itr.checkForComodification(Unknown Source) ~[na:1.7.0_11]\n       at java.util.ArrayList$Itr.next(Unknown Source) ~[na:1.7.0_11]\n       at org.aspectj.weaver.ReferenceType.findDerivativeType(ReferenceType.java:1122) ~[aspectjweaver.jar:1.7.1]\n       at org.aspectj.weaver.TypeFactory.createParameterizedType(TypeFactory.java:44) ~[aspectjweaver.jar:1.7.1]\n       at org.aspectj.weaver.ResolvedType.parameterize(ResolvedType.java:2479) ~[aspectjweaver.jar:1.7.1]\n       at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:673) ~[aspectjweaver.jar:1.7.1]\n       at org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:82) ~[aspectjweaver.jar:1.7.1]\n       at org.aspectj.weaver.patterns.TypePattern.matchesSubtypes(TypePattern.java:178) ~[aspectjweaver.jar:1.7.1]\n       at org.aspectj.weaver.patterns.ExactTypePattern.matchesSubtypes(ExactTypePattern.java:74) ~[aspectjweaver.jar:1.7.1]\n       at org.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:130) ~[aspectjweaver.jar:1.7.1]\n       at org.aspectj.weaver.patterns.KindedPointcut.fastMatch(KindedPointcut.java:130) ~[aspectjweaver.jar:1.7.1]\n       at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.couldMatchJoinPointsInType(PointcutExpressionImpl.java:84) ~[aspectjweaver.jar:1.7.1]\n       at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:250) ~[spring-aop.jar:3.2.1.RELEASE]\n       at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:208) ~[spring-aop.jar:3.2.1.RELEASE]\n       at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:262) ~[spring-aop.jar:3.2.1.RELEASE]\n       at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:294) ~[spring-aop.jar:3.2.1.RELEASE]\n       at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:118) ~[spring-aop.jar:3.2.1.RELEASE]"
    },
    "commit": {
      "diff": [
        "org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java"
      ]
    }
  },
  "eca1429": {
    "bug_report": {
      "summary": "Bug 72157  declare soft can cause programs with invalid exception behaviour to be generated",
      "description": "Compiling the program below results in the constructor for the class SCE2\nthrowing Exception, which it is not declared to throw either in the source code\nor in the generated bytecode. If the 'declare soft' statement is removed, then\nthe super() call in the SCE2 constructor is correctly reported as throwing an\nundeclared exception; it seems that the 'declare soft' statement turns off the\nexception checking of the super() call despite there being no join point which\ncovers this call that would actually soften the exception.\n\nI'm using 'DEVELOPMENT built on Monday Aug 16, 2004 at 13:50:47 GMT'.\n\npublic class SuperConsExc {\n    public SuperConsExc() throws Exception {\n\tthrow new Exception();\n    }\n\n    public static void main(String[] args) {\n\tnew SCE2();\n    }\n}\n\nclass SCE2 extends SuperConsExc {\n    public SCE2() {\n\tsuper();\n    }\n}\n\naspect SCEAspect {\n    declare soft: Exception: within(SCE2);\n}"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "tests/bugs/ConvertToUnchecked.java",
        "tests/bugs/PR72157.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "5795b4a": {
    "bug_report": {
      "summary": "Bug 52928  Private members introduced via an interface are visible to the class",
      "description": "If private members are introduced via an interface to classes, the introduced \nmembers are visible inside the classes themselves, although the visibility is \nsupposed to be relative to the aspect. Here's a sample:\n\n\npublic class Sample {\n\n   public static void main(String[] args) {\n      Sample s = new Sample();\n      s.aMethod();\n   }\n\n   public void aMethod() {\n      // x is introduced by the following aspect as private\n      // so it should not be accessible here\n      System.out.println(\"I have \" + x);\n   }\n\n}\n\n\naspect SampleAspect {\n   private interface Tag {};\n   \n   private int Tag.x = 0;\n   \n   declare parents: Sample implements Tag;\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs/VisiblePrivateInterfaceITDs.java"
      ]
    }
  },
  "2942ca0": {
    "bug_report": {
      "summary": "Bug 108826  AJDT Error: Can't find type",
      "description": "In Eclipse 3.1, using the latest AspectJ build (1.5.0_M3a compiler and 1.3.0\nplugin) I get an error \"can't find type test.T\" , using the following code:\n\n===============\npackage test;\n\npublic class CantFindType {\n    public <T> T[] method(T[] array) {\n        return null;\n    }\n}\n================\n\nThe error occurs, if the return type, or the parameter is an array of a generic\ntype.\n\nThe code compiles fine, but Eclipse shows the error, but doesn't show the folder\nor the location for the error."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java"
      ]
    }
  },
  "6defb4e": {
    "bug_report": {
      "summary": "Bug 373195  Memory leak in CompilationAndWeavingContext leading to PermGen OOME",
      "description": "Build Identifier: 1.6.11\n\nThe static contextMap in CompilationAndWeavingContext keeps strong references to Thread instances (which in turn strongly reference their contextClassLoader which prevents all kinds of stuff from unloading).\n\nIn my particular use case I am running unit tests, each in their own WeavingURLClassLoader, but these ClassLoaders are never released, and running several unit tests at once leads to PermGen OutOfMemoryError.\n\nUsing -XX:+HeapDumpOnOutOfMemory and analyzing the resulting heap dump in Eclipse Memory Analyzer points to CompilationAndWeavingContext.contextMap.\n\nI am able to work around this issue by executing the following at the end of each unit test to clear out this contextMap:\n\n    CompilationAndWeavingContext.setMultiThreaded(false);\n    CompilationAndWeavingContext.reset();\n    CompilationAndWeavingContext.setMultiThreaded(true);\n\nI am also able to resolve this issue (more satisfactorily) by patching CompilationAndWeavingContext and changing contextMap into a ThreadLocal.\n\nReproducible: Always"
    },
    "commit": {
      "diff": [
        "bridge/src/org/aspectj/bridge/context/CompilationAndWeavingContext.java"
      ]
    }
  },
  "f1a83b5": {
    "bug_report": {
      "summary": "Bug 251326  Anonymous inner classes declare inside an ITD method will cause IllegalAccessError",
      "description": "If i declare an aspect in pkgB, having an ITD method for a class in pkgA using an inner anonymous class, is created in the pkgA package, package protected, but then instantiated from pkgB causeing the error.\n\nTest case is attached."
    },
    "commit": {
      "diff": [
        "tests/bugs163/pr251326/pkgA/Listener.java",
        "tests/bugs163/pr251326/pkgA/Target.java",
        "tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java"
      ]
    }
  },
  "ab6c7a5": {
    "bug_report": {
      "summary": "Bug 56779  [ajdoc] add ajdoc support for inter-type declarations and other declare forms",
      "description": "Currently ajdoc only exposes the \"Advises\" and \"Advised by\" relationships from \nthe structure model.  \n\nIt needs to support inter-type field and member declarations using a UI \nsimilar to how Javadoc presents inherited members.\n\nIt also needs to support the other declare forms: error, warning, soft, \nparents, and precedence."
    },
    "commit": {
      "diff": [
        "ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/PointcutVisibilityTest.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java",
        "ajdoc/testdata/declareForms/DeclareCoverage.java",
        "asm/src/org/aspectj/asm/IRelationship.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/PatternsTestCase.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/DeclareFormsTest.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/ExecutionTestCase.java"
      ]
    }
  },
  "bba9c50": {
    "bug_report": {
      "summary": "Bug 103266  NPE on syntax error",
      "description": "This example program generates an NPE on CVS HEAD and M2. I will attach the \najcore file.\n\npublic abstract aspect WorkerExample {\n\n    after() returning (RequestContext newContext) : call(RequestContext+.new\n(..)) {        \n        System.out.println(\"constructing \"+newContext+\" \nat \"+thisJoinPoint.toLongString()+\" \nfrom \"+thisEnclosingJoinPointStaticPart+\":\");\n    }\n\n    public abstract class RequestContext {\n        public final Object execute() {\n            return doExecute();\n        }\n        \n        /** template method */\n        public abstract Object doExecute();\n    }\n\n    public static void main(String args[]) {\n        new Runnable() {\n            public void run() {}\n        }.run();\n    };\n}\n\naspect ConcreteAlpha extends WorkerExample {\n\n    Object around(final Object runnable) : execution(void Runnable.run()) && \nthis(runnable) {\n        System.out.println(\"monitoring operation: \"+runnable+\" \nat \"+thisJoinPoint+\", for \"+thisJoinPoint.getThis());\n        RequestContext requestContext = new RequestContext() {\n            public Object doExecute() {\n                return proceed(runnable);\n            }\n            \n        };\n        return requestContext.execute();\n    }\n    \n}\n\naspect ConcreteBeta extends WorkerExample {\n    \n    Object around() : call(void awqeyuwqer()) {\n        RequestContext requestContext = new ConnectionRequestContext() {\n            public Object doExecute() {                \n                return proceed();\n            }\n            \n        };\n        return requestContext.execute();\n    }\n\n    \n}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java"
      ]
    }
  },
  "b133299": {
    "bug_report": {
      "summary": "Bug 73334  Avoid clashes in the org.eclipse namespace by renaming our duplicates.",
      "description": "We have recently renamed our 'copy' of BCEL to use a different package prefix so\nthat our version never clashes with another version that might be around on a\nusers system.\n\nThis enhancement is to do the same thing for our 'copy' of the org.eclipse.jdt\ncode (in the shadows project).  As part of packaging the shadows project to\ncreate the 'jdtcore' jar files (bin and src) we will rename the packages from:\n\norg.eclipse.jdt.***\n\nto\n\norg.aspectj.org.eclipse.jdt.**\n\nThis has a really nice side effect that we can make our version of the compiler\naccessible in the IDE.  It should now be possible for AJDT to work more closely\nwith it and get features like eager parsing to work.\n\nCare will be taken that we don't accidentally make the merge process a nightmare."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/InterimCompilationResult.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AsmBuilderTest.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ProceedVisitor.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PointcutBinding.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AjConstructorDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfPseudoToken.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java",
        "ajde/testsrc/org/aspectj/ajde/ExtensionTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBatchImageBuilder.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PseudoTokens.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedFieldBinding.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMethodBinding.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/SimpleSyntheticAccessMethodBinding.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/HelperInterfaceBinding.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java",
        "ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfMethodDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/IOutputClassFileNameProvider.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjTypeConstants.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java",
        "ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjIncrementalImageBuilder.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/StatefulNameEnvironment.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjClassFile.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ClassFileBasedByteCodeProvider.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AjMethodDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/compiler/IAjTerminalSymbols.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseClassPathManager.java",
        "org.aspectj.ajdt.core/testsrc/WeaveTests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildNotifier.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/SuperFixerVisitor.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InlineAccessFieldBinding.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/AjdtCommandTestCase.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperReference.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PseudoToken.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/KnownFieldReference.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/DeclarationFactory.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseSourceContext.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java",
        "org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/KnownMessageSend.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/EclipseAttributeAdapter.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java"
      ]
    }
  },
  "f6834c7": {
    "bug_report": {
      "summary": "Bug 148737  IllegalStateException for non-generic type",
      "description": "I believe this is similar to 112880.  The message and stack trace I am getting are\n\n -- (IllegalStateException) Can't ask to parameterize a member of non-generic type: com...object  kind(raw)\nCan't ask to parameterize a member of non-generic type: com...object  kind(raw)\njava.lang.IllegalStateException: Can't ask to parameterize a member of non-generic type: com....object  kind(raw)\n\tat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:612)\n\tat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:597)\n\tat org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:508)\n\tat org.aspectj.weaver.ResolvedType$4.get(ResolvedType.java:225)\n\tat org.aspectj.weaver.Iterators$3$1.hasNext(Iterators.java:118)\n\tat org.aspectj.weaver.Iterators$5.hasNext(Iterators.java:171)\n\tat org.aspectj.weaver.Iterators$3.hasNext(Iterators.java:128)\n\tat org.aspectj.weaver.ResolvedType.lookupMember(ResolvedType.java:345)\n\tat org.aspectj.weaver.ResolvedType.lookupMethod(ResolvedType.java:326)\n.\n.\n.\n\nThe same code was able to be weaved under 1.5.0.  The reason why this is a major issue is 1.5.0 suffers from a StackOverflowException."
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java",
        "tests/bugs153/pr148737/A.java",
        "tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java"
      ]
    }
  },
  "2b43e63": {
    "bug_report": {
      "summary": "Bug 259528  [incremental] [build] Class with ITD declared on it causes too many full builds",
      "description": "When there is a structural change to a class that has an ITD on it there is a full build.  This should be an incremental build, but the compiler always drops to a full build."
    },
    "commit": {
      "diff": [
        "tests/multiIncremental/pr259528/inc1/src/b/IsAdvised.java",
        "tests/multiIncremental/pr259528/base/src/b/IsAdvised.java"
      ]
    }
  },
  "c798923": {
    "bug_report": {
      "summary": "Bug 50776  fail in compiling aspect with overriding method introduction with different throws clause",
      "description": "A first class (class A) declares only one method with some exceptions in the\nthrows clause ( void m() throws Exception ).\nA second class (class B) extends it without redefinig the method. \nAn aspect declares a method introduction in the class B, with the same name,\nsignature and return type of the one in class A, but without throws clause; this\nis a legal override.\nIn the second class (class B) each invocation to the overriden method doesn't\nneed a try-catch block, because it refers to his hown method that raises no\nexception.\nThis code compiles using \najc version 1.0.6 (built Jul 24, 2002 6:21 PM PST) running on java 1.4.0\nBut not using\nAspectJ Compiler 1.1.1 \nAspectJ Compiler 1.1.0\n\nclass A{\n  public A(){}\n  public void m() throws Exception{}\n}\n\nclass B extends A{\n  public B(){}\n  public void some_code(){\n    m();}\n}\n\naspect C{\n  public void B.m(){}\n}"
    },
    "commit": {
      "diff": [
        "tests/bugs/IntertypeDifferentThrows.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java"
      ]
    }
  },
  "d697649": {
    "bug_report": {
      "summary": "Bug 90588  compiler verifyerror and an NPE",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/bugs150/pr90588/ConcreteClass.java",
        "tests/bugs150/pr90588/AbstractClass.java",
        "tests/src/org/aspectj/systemtest/knownfailures/KnownfailuresTests.java"
      ]
    }
  },
  "fc0d2af": {
    "bug_report": {
      "summary": "Bug 43194  java.lang.VerifyError in generated code",
      "description": "See the attached file VerifyBug.jar for the source files. You won't need \nanything else to compiler and reproduce this bug:\n\n~/bug> ls\nAbstractCaching.java   TreeNode.java         VerifyBug.jar\nContainerCaching.java  TreeNodeFolding.java  WorkspaceGroup.java\nContainerLoader.java   TreePanel.java        WorkspaceNode.java\nMakefile               TreeWorkspace.java\n~/bug> gmake   \n/cygdrive/c/aspectj1.1.1/bin/ajc -classpath \"C:\\aspectj1.1.1\n\\lib\\aspectjrt.jar\" -version\nAspectJ Compiler 1.1.1\n\n/cygdrive/c/aspectj1.1.1/bin/ajc -classpath \"C:\\aspectj1.1.1\\lib\\aspectjrt.jar\" \n*.java\njava -classpath \"C:\\aspectj1.1.1\\lib\\aspectjrt.jar;.\" TreeNode\njava.lang.VerifyError: (class: TreeNode, method: doShowAction signature: ()V) \nUnable to pop operand off an empty stack\nException in thread \"main\" make: *** [all] Error 1"
    },
    "commit": {
      "diff": [
        "tests/bugs/AdviceInteraction.java",
        "weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java"
      ]
    }
  },
  "d43a391": {
    "bug_report": {
      "summary": "Bug 54421  Compile time declarations (warning and error) do not accept string concatenation (with +)",
      "description": "The following code does not compile because the message uses string \nconcatenation (the + operator). \n\n\npublic class WarningSample {\n\n  public void method() {}\n  public void anotherMethod() {\n    this.method();\n  }\n\n}\n\naspect WarningAspect {\n\n  pointcut illegalCall(): call(* WarningSample.method())\n                && within(WarningSample);\n\n  // the same thing happens with declare error\n  declare warning: illegalCall() : \"Hey, don't \" +\n      \"do that, that is not nice. You should do something else\";\n\n}"
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/PatternParser.java",
        "tests/bugs/decwStrings.java",
        "tests/bugs/decwStringsErroneous.java",
        "tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java"
      ]
    }
  },
  "bf949d3": {
    "bug_report": {
      "summary": "Bug 384398  Type Mismatch error when using inner classes contained in generic types within ITDs",
      "description": "Please see attached example project. \n\nI get the following (strange) compiler error:\n\nType mismatch: cannot convert from A<T>.InnerA<> to A.InnerA\t\n\nBAspect.aj   /AspectJInnerclassInGenericTypeBug/src/de/example\tline 12"
    },
    "commit": {
      "diff": [
        "tests/bugs171/pr384398_2/B.java",
        "tests/bugs171/pr384398/B.java",
        "tests/src/org/aspectj/systemtest/ajc171/AllTestsAspectJ171.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "tests/src/org/aspectj/systemtest/AllTests17.java",
        "tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java",
        "tests/bugs171/pr384398/A.java",
        "tests/bugs171/pr384398_2/A.java"
      ]
    }
  },
  "588e7b9": {
    "bug_report": {
      "summary": "Bug 120743  Improvements to define new server wizard page",
      "description": "On the panel where the server location and button to install the server is shown, a couple of usability improvements could be made...\n\n(1) If I choose browse and choose a location.  Then hit install server, the fs browser should not be brought back up since I have already hitten browse and selected a location.\n\n(2) If (1) and the location chosen contains no server, and the server is downlodable, classpath validation errors should not show, but a message stating that no server is found but can be installed by selecting the install server button."
    },
    "commit": {
      "diff": [
        "loadtime/src/org/aspectj/weaver/loadtime/Aj.java"
      ]
    }
  },
  "fb01cad": {
    "bug_report": {
      "summary": "Bug 84333  BCException: Bad type name: TypeX.nameToSignature(TypeX.java:635)",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java"
      ]
    }
  },
  "89d66dc": {
    "bug_report": {
      "summary": "Bug 128618  [incremental] XLint warnings in the wrong place with incremental compilation",
      "description": "The zip file I am about to attach contains two AspectJ  project, one depending on the other.  If you make a small change to MainClass.java in 'Test Project' and save you will see a strange warning in that class - \"advice defined in ras.FFDC has not been applied [Xlint:adviceDidNotMatch]\".  If you do a full build the warning goes away.  Note that the error would be on line 36 if there were 36 lines in the class, which relates to a line in the FFDC aspect that contains advice."
    },
    "commit": {
      "diff": [
        "tests/multiIncremental/PR128618_2/base/mainpackage/MainClass.java",
        "tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java",
        "tests/multiIncremental/PR128618_2/inc1/mainpackage/MainClass.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java"
      ]
    }
  },
  "cafdecb": {
    "bug_report": {
      "summary": "Bug 121312  [performance]Contribution: Refactoring to Support LTW World with Reflection Delegates for Bootstrap Types",
      "description": "This patch adds an IReflectionWorld interface, changes the various places in code where casts are made to ReflectionWorld to use that interface, creates some common methods and creates an LTWWorld that implements this interface, and sets up the ClassLoaderWeavingAdaptor to use it. It's important that the LTWWorld have just one type map for performance and memory efficiency."
    },
    "commit": {
      "diff": [
        "weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java",
        "weaver/src/org/aspectj/weaver/reflect/IReflectionWorld.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java",
        "weaver/src/org/aspectj/weaver/ltw/LTWWorld.java",
        "weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java"
      ]
    }
  },
  "8dc0845": {
    "bug_report": {
      "summary": "Bug 70008  problem with ajdoc -public",
      "description": null
    },
    "commit": {
      "diff": [
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java",
        "ajdoc/testdata/coverage/foo/PkgVisibleClass.java"
      ]
    }
  },
  "0d69bd3": {
    "bug_report": {
      "summary": "Bug 389752  declare parents & @type not matching on annotation properties of enum types",
      "description": "NOTE:  real project private git repo demonstrating bug has been shared with Andy Clement privately.  I'm reporting bug as Andy requested with as much info as I feel I can.\n\nI have a case where 'declare parents' and 'declare @type' instructions are not being applied because their type patterns, which use annotations whose properties are of enumerated types, are not matching.\n\nBelow find the relevant artifacts and their shapes.  The lines in the aspect PersistableJpaAspect that are not matching as they should are the 'declare parents' and 'declare @type'.  If I change the annotation properties to be of type String and change the type patterns to use string literals (see \"matches\" comments in annotation:  StoreType.JPA => \"JPA\" and IdType.LONG => \"LONG\"), the matching works properly.\n\nenums:\n======\n\npublic enum StoreType {\n\tMONGO, JDO, JPA;\n}\n\n=====\n\npublic enum IdType {\n\tLONG, STRING;\n}\n\nannotation:\n===========\n\npublic @interface Persistable {\n\n\tStoreType in() default StoreType.MONGO; // doesn't match\n\t// matches: String in() default \"MONGO\";\n\n\tIdType id() default IdType.STRING; // doesn't match\n\t// matches: String id() default \"STRING\";\n}\n\naspect:\n=======\n\npublic abstract privileged aspect PersistableAspect {\n\n\tpublic interface I extends ....trait.interfaces.persistence.Persistable {\n\t\tlong version();\n\t\tvoid version(long version);\n\t}\n\n\tpublic interface L extends I {\n\t\tLong idLong();\n\t\tvoid idLong(Long id);\n\t}\n\n\tpublic interface S extends I {\n\t\tString idString();\n\t\tvoid idString(String id);\n\t}\n\t\n\tdeclare @type : I+ : @Configurable;\n\n\t// ...\n}\n\n=====\n\npublic privileged aspect PersistableJpaAspect extends PersistableAspect {\n\n\tpublic interface JL extends L {\n\t}\n\n\tpublic interface JS extends S {\n\t}\n\n\tdeclare parents :\n        (@Persistable(id = IdType.LONG, in = StoreType.JPA) *)\n        implements JL;\n\n\tdeclare parents :\n        (@Persistable(id = IdType.STRING, in = StoreType.JPA) *)\n        implements JS;\n\n\tdeclare @type : @Persistable(in=\"JPA\") JL+ : @Entity;\n\tdeclare @type : @Persistable(in=\"JPA\") JS+ : @Entity;\n\n\t// ...\n}"
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java",
        "tests/bugs172/pr389752/Code3.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/StandardAnnotation.java",
        "tests/bugs172/pr389752/Code.java",
        "org.aspectj.matcher/src/org/aspectj/weaver/EnumAnnotationValue.java",
        "tests/bugs172/pr389752/Code2.java"
      ]
    }
  },
  "89c178f": {
    "bug_report": {
      "summary": "Bug 376990  iajc does not support source compliance level 1.7",
      "description": "Build Identifier: Version: 3.7.2 Build id: M20120208-0800\n\nI am using AspectJ 1.7.0.M1. I changed the examples build.xml to use a source compliance level of 1.7 and verbose=true as follows:\n\n<iajc destdir=\"${classes.dir}\" verbose=\"true\" source=\"1.7\" argfiles=\"${list}\"\n\nWhen I run this using 'ant bean' I get the following line:\n[iajc] ignored: -source 1.7 at E:\\aspectj1.7\\doc\\examples\\build.xml:136:\n\nI have tried running the compiler 'ajc' directly specifying -source 1.7 and that works.\n\nI am trying to use this on a large development project that uses AspectJ and has been migrated over to Java 7. The project uses ant to do builds so it is critical that iajc support 1.7. The project can't be built if any Java 7 features are used in the source files which defeats the whole purpose of moving to Java 7.\n\nReproducible: Always\n\nSteps to Reproduce:\n1.Change the examples build.xml to use a source compliance level of 1.7 and verbose=true as follows:\n\n<iajc destdir=\"${classes.dir}\" verbose=\"true\" source=\"1.7\" argfiles=\"${list}\"\n\n\n2.Run using 'ant bean' I get the following line:\n[iajc] ignored: -source 1.7 at E:\\aspectj1.7\\doc\\examples\\build.xml:136:"
    },
    "commit": {
      "diff": [
        "taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java"
      ]
    }
  },
  "b954b26": {
    "bug_report": {
      "summary": "Bug 140357  NPE or StackOverflow when resolving reference pointcut in ReflectionWorld",
      "description": "Given a type such as :\n\nprivate static class NamedPointcutResolution {\n\t\t\n  @Pointcut(\"execution(* *(..))\")\n  public void a() {}\n\t\t\n\t\t  \n  @Pointcut(\"this(org.aspectj.weaver.tools.Java15PointcutExpressionTest.A)\")\n  public void b() {}\n\t\t\n  @Pointcut(\"a() && b()\")\n  public void c() {}\n\n}\n\nThe reflection based delegate is unable to resolve the pointcut c() failing\nwith either (1) an NPE, or (2) a StackOverflow, depending on the order of the\npointcut definitions in the type.\n\nThe problem occurs because in resolving \"c()\" we get all the pointcuts in the\ntype, which gets a(), b(), and c(), and tries to resolve them..."
    },
    "commit": {
      "diff": [
        "weaver5/java5-src/org/aspectj/weaver/reflect/DeferredResolvedPointcutDefinition.java",
        "weaver/src/org/aspectj/weaver/tools/PointcutParser.java",
        "weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java",
        "weaver5/java5-src/org/aspectj/weaver/reflect/InternalUseOnlyPointcutParser.java",
        "weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java"
      ]
    }
  },
  "11ebdd8": {
    "bug_report": {
      "summary": "Bug 203367  ITD of interface on generic type; can't match calls to methods on interface+",
      "description": "Build ID: I20070621-1340\n\nSteps To Reproduce:\npackage bug;  // I used a \"bug\" package under the \"src\" source folder.\n\npublic aspect CantMatchOnInterfaceIntroducedToGenericClass {\n\tpublic static interface Marker {}\n\tpublic static class NonGenericClass {\n\t\tpublic void doit(String msg) {\n\t\t\tSystem.out.println(\"doit(): msg = \"+msg);\n\t\t}\n\t}\n\tpublic static class GenericClass<T> {\n\t\tpublic void doit(T t) {\n\t\t\tSystem.out.println(\"doit<T>(): t = \"+t);\n\t\t}\n\t}\n\t\n\tdeclare parents: NonGenericClass implements Marker;\n\tdeclare parents: GenericClass    implements Marker;\n\t\n\tpointcut nonGenericCall(): call (void NonGenericClass.doit(..));\n\tpointcut genericCall():    call (void GenericClass.doit(..));\n\tpointcut markerCall():     call (void Marker+.doit(..));\n\t\n\tbefore(): nonGenericCall() {\n\t\tSystem.out.println(\"nonGenericCall: \"+thisJoinPointStaticPart);\n\t}\n\tbefore(): genericCall() {\n\t\tSystem.out.println(\"genericCall: \"+thisJoinPointStaticPart);\n\t}\n\tbefore(): markerCall() {\n\t\tSystem.out.println(\"markerCall: \"+thisJoinPointStaticPart);\n\t}\n\t\n\tpublic static void main(String args[]) {\n\t\tnew NonGenericClass().doit(\"message1\");\n\t\tnew GenericClass<Integer>().doit(new Integer(2));\n\t}\n}\n\n\nMore information:\nThe code pasted in the \"steps\" demonstrates the bug."
    },
    "commit": {
      "diff": [
        "tests/bugs161/pr203367/CantMatchOnInterfaceIntroducedToGenericClass.java",
        "tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java"
      ]
    }
  },
  "d532892": {
    "bug_report": {
      "summary": "Bug 159896  advice from injars do not have unique handles with the JDTLikeHandleProvider",
      "description": "Advice of the same kind contained in the same aspect currently do not have unique handles if the aspect is on the aspectpath."
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc153/JDTLikeHandleProviderTests.java",
        "weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java",
        "weaver/src/org/aspectj/weaver/ShadowMunger.java",
        "tests/features153/jdtlikehandleprovider/ClassForAspectpath.java"
      ]
    }
  },
  "6ddae42": {
    "bug_report": {
      "summary": "Bug 51929  Advice calling protected super method causing java.lang.VerifyError 'Bad access to protected data'",
      "description": "A java.lang.VerifyError is thrown at runtime complaining about 'Bad access to  \nprotected data' when advice, on a sub-aspect, that calls a protected method, on  \nthe super-aspect, is woven into a class. \nHowever another call to the same method woven into the same class but due to  \nadvice declared in the super-aspect works fine. \n \nThe aspects were woven into precompiled (by sun's 1.4 javac) classes. \nThe verify error occurs under both sun's 1.4 and blackdowns 1.3 VMs, and presumably \nall VMs. \n \nWorkaround: \nMaking the protected method public fixes the verify error. \n \nA test case is available in CVS: \ntests/bugs/protectedvf/... \ntests/ajcTestFailing.xml"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InlineAccessFieldBinding.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java",
        "tests/bugs/protectedvf/main/Driver.java",
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java"
      ]
    }
  },
  "5735e96": {
    "bug_report": {
      "summary": "Bug 106461  org.aspectj.weaver.patterns.WildTypePattern.maybeGetCleanName(WildTypePattern.java:500)",
      "description": null
    },
    "commit": {
      "diff": [
        "tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java",
        "weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java",
        "weaver/src/org/aspectj/weaver/patterns/PatternParser.java"
      ]
    }
  },
  "ef7885f": {
    "bug_report": {
      "summary": "Bug 60015  NPE, Incorrect XLint:unmatchedSuperTypeInCall warning",
      "description": "(This is an incomplete bug report -- sorry no time not to further isolate.)\n\nRunning AJDT 1.1.6, I get dozens of these warnings:\n\n----------\nWarning does not match because declaring type is java.lang.Object, if match\ndesired use target(st.ata.mc.exim.DatastoreReader)\n[Xlint:unmatchedSuperTypeInCall] Blah.aj project/src/package/dir line 22\n----------\n\nfor something like this code:\n\n----------\nimport pack.Interface;\n...\npointcut dsrCall() : call(* Interface.*(..)); // WARNING HERE\n...\n----------\n\nEach warning points to the pointcut (not the join point shadow).\n\nNPE running from the command-line with the latest tree (will attach)."
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java",
        "tests/bugs/IncorrectXlintOnInterface.java"
      ]
    }
  },
  "d9bd46d": {
    "bug_report": {
      "summary": "Bug 260751  java.lang.StringIndexOutOfBoundsException",
      "description": "ava.lang.StringIndexOutOfBoundsException\nat java.lang.String.substring(String.java:1938)\nat org.aspectj.ajdt.ajc.ConfigParser.stripWhitespaceAndComments(ConfigParser.java:103)\nat org.aspectj.ajdt.ajc.ConfigParser.parseConfigFileHelper(ConfigParser.java:69)\nat org.aspectj.ajdt.ajc.ConfigParser.parseImportedConfigFile(ConfigParser.java:224)\nat org.aspectj.ajdt.ajc.ConfigParser.parseOneArg(ConfigParser.java:213)\nat org.aspectj.ajdt.ajc.ConfigP ... 82)\nat org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)"
    },
    "commit": {
      "diff": [
        "org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/ConfigParser.java"
      ]
    }
  },
  "d69ce9a": {
    "bug_report": {
      "summary": "Bug 122728  ajdoc crashes",
      "description": null
    },
    "commit": {
      "diff": [
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java",
        "ajdoc/testdata/pr122728/src/pack/EnumWithMethods.java",
        "ajdoc/testsrc/org/aspectj/tools/ajdoc/EnumTest.java",
        "ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java",
        "ajdoc/testdata/pr122728/src/pack/MyEnum.java",
        "ajdoc/testdata/pr122728/src/pack/ClassWithInnerEnum.java"
      ]
    }
  },
  "8676df9": {
    "bug_report": {
      "summary": "Bug 124803  [generics] mixing and matching numbers of type variables/parameters in a hierarchy",
      "description": "Hi guys!\n\nI didn't talk to you for a while, but I've found several new issues related to generics. Here is the first and the most annoying one:\n\n1) Just compile the testcase with iajc and you will get \"java.lang.IllegalStateException: Wrong number of type parameters supplied\"\n\nJava Code:\n=========\n\npublic interface Generic1<T extends Number> {\n\tpublic void foo(T p);\n}\n\n\npublic interface Generic2<T extends Number, Y extends Number> extends Generic1<T> {\n\tpublic void foo2(Y p);\n}\n\npublic class Test<Y extends Number> implements Generic2<Y,Y>{\n\tpublic void foo2(Y p) {\n\t}\n\tpublic void foo(Y p) {\n\t}\n}\n\n\nAspect:\n=======\n\npublic privileged aspect TestAspect {\n\tpointcut TestInheritance(Test test) : target(test) && execution (* com.mprv.secsph.Generic1.*(..));\n\n\tafter (Test test) : TestInheritance(test) {\n\t\tSystem.out.println(\"GO Aspects!\");\n\t}\n}\n\nException:\n==========\niajc\nabort trouble in: \npublic class com.mprv.secsph.Test extends java.lang.Object implements com.mprv.secsph.Generic2:\n  public void <init>():\n                    ALOAD_0     // com.mprv.secsph.Test this   (line 10)\n                    INVOKESPECIAL java.lang.Object.<init> ()V\n    constructor-execution(void com.mprv.secsph.Test.<init>())\n    |               RETURN\n    constructor-execution(void com.mprv.secsph.Test.<init>())\n  end public void <init>()\n\n  public void foo2(Number)    org.aspectj.weaver.MethodDeclarationLineNumber: 11:259\n:\n                    RETURN   (line 12)\n  end public void foo2(Number)\n\n  public void foo(Number)    org.aspectj.weaver.MethodDeclarationLineNumber: 13:287\n:\n                    RETURN   (line 14)\n  end public void foo(Number)\n\nend public class com.mprv.secsph.Test\n -- (IllegalStateException) Wrong number of type parameters supplied\nWrong number of type parameters supplied\njava.lang.IllegalStateException: Wrong number of type parameters supplied\n\tat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:609)\n\tat org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:590)\n\tat org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:472)\n\tat org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:262)\n\tat org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:301)\n\tat org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator(ResolvedType.java:257)\n\tat org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:375)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:177)\n\tat org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:68)\n\tat org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:286)\n\tat org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:106)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)\n\tat org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:145)\n\tat org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64)\n\tat org.aspectj.weaver.Advice.match(Advice.java:109)\n\tat org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:104)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2149)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1716)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:458)\n\tat org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:105)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275)\n\tat org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300)\n\tat org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178)\n\tat org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n\tat org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:819)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:234)\n\tat org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:157)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)\n\tat org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)\n\tat org.aspectj.tools.ajc.Main.run(Main.java:326)\n\tat org.aspectj.tools.ajc.Main.runMain(Main.java:240)\n\tat org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1254)\n\tat org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1048)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n\tat org.apache.tools.ant.Task.perform(Task.java:364)\n\tat org.apache.tools.ant.Target.execute(Target.java:341)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:369)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1216)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1185)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1068)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:668)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:187)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:246)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:67)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat com.intellij.rt.ant.execution.AntMain2.main(AntMain2.java:16)\nwarning at after (Test test) : TestInheritance(test) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/root/IdeaProjects/aspectsTest/src/com/mprv/secsph/TestAspect.aj:44:0::0 advice defined in com.mprv.secsph.TestAspect has not been applied [Xlint:adviceDidNotMatch]"
    },
    "commit": {
      "diff": [
        "tests/bugs151/pr124803/TestAspect2.java",
        "tests/bugs151/pr124803/TestAspect.java",
        "tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java",
        "tests/bugs151/pr124803/Test.java",
        "tests/bugs151/pr124803/Test2.java",
        "weaver/src/org/aspectj/weaver/ReferenceType.java"
      ]
    }
  },
  "9bbdb41": {
    "bug_report": {
      "summary": "Bug 220430  mixup in retrieving the right class in Java15AnnotationFinder",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java"
      ]
    }
  },
  "95e70d2": {
    "bug_report": {
      "summary": "Bug 348488  \"register definition failed\" with NullPointerException",
      "description": null
    },
    "commit": {
      "diff": [
        "weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java"
      ]
    }
  }
}